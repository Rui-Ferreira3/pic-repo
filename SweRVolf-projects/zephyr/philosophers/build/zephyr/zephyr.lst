
zephyr.elf:     file format elf32-littleriscv


Disassembly of section vector:

00000000 <__start>:

	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
   0:	00000297          	auipc	t0,0x0
   4:	02428293          	addi	t0,t0,36 # 24 <__irq_wrapper>
	csrw mtvec, t0
   8:	30529073          	csrw	mtvec,t0
	/*
	* To avoid having to hardcode the main clock frequency,
	* we read the actual value from register 0x8000103c
	* and store to z_clock_hw_cycles_per_sec
	*/
	li	t0, 0x80001000
   c:	800012b7          	lui	t0,0x80001
	lw	t1, 0x3c(t0)
  10:	03c2a303          	lw	t1,60(t0) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>
	la	t0, z_clock_hw_cycles_per_sec
  14:	00007297          	auipc	t0,0x7
  18:	6b028293          	addi	t0,t0,1712 # 76c4 <z_clock_hw_cycles_per_sec>
	sw	t1, 0(t0)
  1c:	0062a023          	sw	t1,0(t0)

	/* Jump to __initialize */
	tail __initialize
  20:	1a90206f          	j	29c8 <__initialize>

Disassembly of section exceptions:

00000024 <__irq_wrapper>:
 * In this architecture, system call (ECALL) is used to perform context
 * switching or IRQ offloading (when enabled).
 */
SECTION_FUNC(exception.entry, __irq_wrapper)
	/* Allocate space on thread stack to save registers */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
  24:	fb010113          	addi	sp,sp,-80

	/* Save caller-saved registers on current thread stack. */
	RV_OP_STOREREG ra, __z_arch_esf_t_ra_OFFSET(sp)
  28:	00112023          	sw	ra,0(sp)
	RV_OP_STOREREG gp, __z_arch_esf_t_gp_OFFSET(sp)
  2c:	00312223          	sw	gp,4(sp)
	RV_OP_STOREREG tp, __z_arch_esf_t_tp_OFFSET(sp)
  30:	00412423          	sw	tp,8(sp)
	RV_OP_STOREREG t0, __z_arch_esf_t_t0_OFFSET(sp)
  34:	00512623          	sw	t0,12(sp)
	RV_OP_STOREREG t1, __z_arch_esf_t_t1_OFFSET(sp)
  38:	00612823          	sw	t1,16(sp)
	RV_OP_STOREREG t2, __z_arch_esf_t_t2_OFFSET(sp)
  3c:	00712a23          	sw	t2,20(sp)
	RV_OP_STOREREG t3, __z_arch_esf_t_t3_OFFSET(sp)
  40:	01c12c23          	sw	t3,24(sp)
	RV_OP_STOREREG t4, __z_arch_esf_t_t4_OFFSET(sp)
  44:	01d12e23          	sw	t4,28(sp)
	RV_OP_STOREREG t5, __z_arch_esf_t_t5_OFFSET(sp)
  48:	03e12023          	sw	t5,32(sp)
	RV_OP_STOREREG t6, __z_arch_esf_t_t6_OFFSET(sp)
  4c:	03f12223          	sw	t6,36(sp)
	RV_OP_STOREREG a0, __z_arch_esf_t_a0_OFFSET(sp)
  50:	02a12423          	sw	a0,40(sp)
	RV_OP_STOREREG a1, __z_arch_esf_t_a1_OFFSET(sp)
  54:	02b12623          	sw	a1,44(sp)
	RV_OP_STOREREG a2, __z_arch_esf_t_a2_OFFSET(sp)
  58:	02c12823          	sw	a2,48(sp)
	RV_OP_STOREREG a3, __z_arch_esf_t_a3_OFFSET(sp)
  5c:	02d12a23          	sw	a3,52(sp)
	RV_OP_STOREREG a4, __z_arch_esf_t_a4_OFFSET(sp)
  60:	02e12c23          	sw	a4,56(sp)
	RV_OP_STOREREG a5, __z_arch_esf_t_a5_OFFSET(sp)
  64:	02f12e23          	sw	a5,60(sp)
	RV_OP_STOREREG a6, __z_arch_esf_t_a6_OFFSET(sp)
  68:	05012023          	sw	a6,64(sp)
	RV_OP_STOREREG a7, __z_arch_esf_t_a7_OFFSET(sp)
  6c:	05112223          	sw	a7,68(sp)

skip_store_fp_caller_saved:
#endif

	/* Save MEPC register */
	csrr t0, mepc
  70:	341022f3          	csrr	t0,mepc
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  74:	04512423          	sw	t0,72(sp)

	/* Save SOC-specific MSTATUS register */
	csrr t0, mstatus
  78:	300022f3          	csrr	t0,mstatus
	RV_OP_STOREREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
  7c:	04512623          	sw	t0,76(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
  80:	1bc000ef          	jal	ra,23c <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	addi t1, x0, 0
  84:	00000313          	li	t1,0
	bnez a0, is_interrupt
  88:	02051e63          	bnez	a0,c4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
  8c:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
  90:	800003b7          	lui	t2,0x80000
  94:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
  98:	0072f2b3          	and	t0,t0,t2
	li t1, SOC_MCAUSE_ECALL_EXP
  9c:	00b00313          	li	t1,11

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call,
	 * otherwise handle fault
	 */
	beq t0, t1, is_syscall
  a0:	00628a63          	beq	t0,t1,b4 <is_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to no_reschedule
	 * to restore stack.
	 */
	addi a0, sp, 0
  a4:	00010513          	mv	a0,sp
	la ra, no_reschedule
  a8:	00000097          	auipc	ra,0x0
  ac:	12408093          	addi	ra,ra,292 # 1cc <no_reschedule>
	tail _Fault
  b0:	0d50206f          	j	2984 <_Fault>

000000b4 <is_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  b4:	04812283          	lw	t0,72(sp)
	addi t0, t0, 4
  b8:	00428293          	addi	t0,t0,4
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  bc:	04512423          	sw	t0,72(sp)
#endif

	/*
	 * Go to reschedule to handle context-switch
	 */
	j reschedule
  c0:	0800006f          	j	140 <reschedule>

000000c4 <is_interrupt>:
	 * Save current thread stack pointer and switch
	 * stack pointer to interrupt stack.
	 */

	/* Save thread stack pointer to temp register t0 */
	addi t0, sp, 0
  c4:	00010293          	mv	t0,sp

	/* Switch to interrupt stack */
	la t2, _kernel
  c8:	00008397          	auipc	t2,0x8
  cc:	b0838393          	addi	t2,t2,-1272 # 7bd0 <_kernel>
	RV_OP_LOADREG sp, _kernel_offset_to_irq_stack(t2)
  d0:	0043a103          	lw	sp,4(t2)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
  d4:	ff010113          	addi	sp,sp,-16
	RV_OP_STOREREG t0, 0x00(sp)
  d8:	00512023          	sw	t0,0(sp)

000000dc <on_irq_stack>:

on_irq_stack:
	/* Increment _kernel.cpus[0].nested variable */
	lw t3, _kernel_offset_to_nested(t2)
  dc:	0003ae03          	lw	t3,0(t2)
	addi t3, t3, 1
  e0:	001e0e13          	addi	t3,t3,1
	sw t3, _kernel_offset_to_nested(t2)
  e4:	01c3a023          	sw	t3,0(t2)
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
  e8:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
  ec:	800002b7          	lui	t0,0x80000
  f0:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
  f4:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
  f8:	134000ef          	jal	ra,22c <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
  fc:	00007297          	auipc	t0,0x7
 100:	8b028293          	addi	t0,t0,-1872 # 69ac <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
 104:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
 108:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	RV_OP_LOADREG a0, 0x00(t0)
 10c:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	RV_OP_LOADREG t1, RV_REGSIZE(t0)
 110:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1
 114:	000300e7          	jalr	t1

00000118 <on_thread_stack>:

on_thread_stack:
	/* Get reference to _kernel */
	la t1, _kernel
 118:	00008317          	auipc	t1,0x8
 11c:	ab830313          	addi	t1,t1,-1352 # 7bd0 <_kernel>

	/* Decrement _kernel.cpus[0].nested variable */
	lw t2, _kernel_offset_to_nested(t1)
 120:	00032383          	lw	t2,0(t1)
	addi t2, t2, -1
 124:	fff38393          	addi	t2,t2,-1
	sw t2, _kernel_offset_to_nested(t1)
 128:	00732023          	sw	t2,0(t1)

	/* Restore thread stack pointer */
	RV_OP_LOADREG t0, 0x00(sp)
 12c:	00012283          	lw	t0,0(sp)
	addi sp, t0, 0
 130:	00028113          	mv	sp,t0
	/*
	 * Check if we need to perform a reschedule
	 */

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t2, _kernel_offset_to_current(t1)
 134:	00832383          	lw	t2,8(t1)

	/*
	 * Check if next thread to schedule is current thread.
	 * If yes do not perform a reschedule
	 */
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t1)
 138:	02032e03          	lw	t3,32(t1)
	beq t3, t2, no_reschedule
 13c:	087e0863          	beq	t3,t2,1cc <no_reschedule>

00000140 <reschedule>:
reschedule:
#if CONFIG_TRACING
	call sys_trace_thread_switched_out
#endif
	/* Get reference to _kernel */
	la t0, _kernel
 140:	00008297          	auipc	t0,0x8
 144:	a9028293          	addi	t0,t0,-1392 # 7bd0 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 148:	0082a303          	lw	t1,8(t0)

	/*
	 * Save callee-saved registers of current thread
	 * prior to handle context-switching
	 */
	RV_OP_STOREREG s0, _thread_offset_to_s0(t1)
 14c:	02832e23          	sw	s0,60(t1)
	RV_OP_STOREREG s1, _thread_offset_to_s1(t1)
 150:	04932023          	sw	s1,64(t1)
	RV_OP_STOREREG s2, _thread_offset_to_s2(t1)
 154:	05232223          	sw	s2,68(t1)
	RV_OP_STOREREG s3, _thread_offset_to_s3(t1)
 158:	05332423          	sw	s3,72(t1)
	RV_OP_STOREREG s4, _thread_offset_to_s4(t1)
 15c:	05432623          	sw	s4,76(t1)
	RV_OP_STOREREG s5, _thread_offset_to_s5(t1)
 160:	05532823          	sw	s5,80(t1)
	RV_OP_STOREREG s6, _thread_offset_to_s6(t1)
 164:	05632a23          	sw	s6,84(t1)
	RV_OP_STOREREG s7, _thread_offset_to_s7(t1)
 168:	05732c23          	sw	s7,88(t1)
	RV_OP_STOREREG s8, _thread_offset_to_s8(t1)
 16c:	05832e23          	sw	s8,92(t1)
	RV_OP_STOREREG s9, _thread_offset_to_s9(t1)
 170:	07932023          	sw	s9,96(t1)
	RV_OP_STOREREG s10, _thread_offset_to_s10(t1)
 174:	07a32223          	sw	s10,100(t1)
	RV_OP_STOREREG s11, _thread_offset_to_s11(t1)
 178:	07b32423          	sw	s11,104(t1)

	/*
	 * Save stack pointer of current thread and set the default return value
	 * of z_swap to _k_neg_eagain for the thread.
	 */
	RV_OP_STOREREG sp, _thread_offset_to_sp(t1)
 17c:	02232c23          	sw	sp,56(t1)
	la t2, _k_neg_eagain
 180:	00007397          	auipc	t2,0x7
 184:	a3438393          	addi	t2,t2,-1484 # 6bb4 <_k_neg_eagain>
	lw t3, 0x00(t2)
 188:	0003ae03          	lw	t3,0(t2)
	sw t3, _thread_offset_to_swap_return_value(t1)
 18c:	07c32e23          	sw	t3,124(t1)

	/* Get next thread to schedule. */
	RV_OP_LOADREG t1, _kernel_offset_to_ready_q_cache(t0)
 190:	0202a303          	lw	t1,32(t0)

	/*
	 * Set _kernel.current to new thread loaded in t1
	 */
	RV_OP_STOREREG t1, _kernel_offset_to_current(t0)
 194:	0062a423          	sw	t1,8(t0)

	/* Switch to new thread stack */
	RV_OP_LOADREG sp, _thread_offset_to_sp(t1)
 198:	03832103          	lw	sp,56(t1)

	/* Restore callee-saved registers of new thread */
	RV_OP_LOADREG s0, _thread_offset_to_s0(t1)
 19c:	03c32403          	lw	s0,60(t1)
	RV_OP_LOADREG s1, _thread_offset_to_s1(t1)
 1a0:	04032483          	lw	s1,64(t1)
	RV_OP_LOADREG s2, _thread_offset_to_s2(t1)
 1a4:	04432903          	lw	s2,68(t1)
	RV_OP_LOADREG s3, _thread_offset_to_s3(t1)
 1a8:	04832983          	lw	s3,72(t1)
	RV_OP_LOADREG s4, _thread_offset_to_s4(t1)
 1ac:	04c32a03          	lw	s4,76(t1)
	RV_OP_LOADREG s5, _thread_offset_to_s5(t1)
 1b0:	05032a83          	lw	s5,80(t1)
	RV_OP_LOADREG s6, _thread_offset_to_s6(t1)
 1b4:	05432b03          	lw	s6,84(t1)
	RV_OP_LOADREG s7, _thread_offset_to_s7(t1)
 1b8:	05832b83          	lw	s7,88(t1)
	RV_OP_LOADREG s8, _thread_offset_to_s8(t1)
 1bc:	05c32c03          	lw	s8,92(t1)
	RV_OP_LOADREG s9, _thread_offset_to_s9(t1)
 1c0:	06032c83          	lw	s9,96(t1)
	RV_OP_LOADREG s10, _thread_offset_to_s10(t1)
 1c4:	06432d03          	lw	s10,100(t1)
	RV_OP_LOADREG s11, _thread_offset_to_s11(t1)
 1c8:	06832d83          	lw	s11,104(t1)

000001cc <no_reschedule>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 1cc:	04812283          	lw	t0,72(sp)
	csrw mepc, t0
 1d0:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 1d4:	04c12283          	lw	t0,76(sp)
	csrw mstatus, t0
 1d8:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved:
#endif

	/* Restore caller-saved registers from thread stack */
	RV_OP_LOADREG ra, __z_arch_esf_t_ra_OFFSET(sp)
 1dc:	00012083          	lw	ra,0(sp)
	RV_OP_LOADREG gp, __z_arch_esf_t_gp_OFFSET(sp)
 1e0:	00412183          	lw	gp,4(sp)
	RV_OP_LOADREG tp, __z_arch_esf_t_tp_OFFSET(sp)
 1e4:	00812203          	lw	tp,8(sp)
	RV_OP_LOADREG t0, __z_arch_esf_t_t0_OFFSET(sp)
 1e8:	00c12283          	lw	t0,12(sp)
	RV_OP_LOADREG t1, __z_arch_esf_t_t1_OFFSET(sp)
 1ec:	01012303          	lw	t1,16(sp)
	RV_OP_LOADREG t2, __z_arch_esf_t_t2_OFFSET(sp)
 1f0:	01412383          	lw	t2,20(sp)
	RV_OP_LOADREG t3, __z_arch_esf_t_t3_OFFSET(sp)
 1f4:	01812e03          	lw	t3,24(sp)
	RV_OP_LOADREG t4, __z_arch_esf_t_t4_OFFSET(sp)
 1f8:	01c12e83          	lw	t4,28(sp)
	RV_OP_LOADREG t5, __z_arch_esf_t_t5_OFFSET(sp)
 1fc:	02012f03          	lw	t5,32(sp)
	RV_OP_LOADREG t6, __z_arch_esf_t_t6_OFFSET(sp)
 200:	02412f83          	lw	t6,36(sp)
	RV_OP_LOADREG a0, __z_arch_esf_t_a0_OFFSET(sp)
 204:	02812503          	lw	a0,40(sp)
	RV_OP_LOADREG a1, __z_arch_esf_t_a1_OFFSET(sp)
 208:	02c12583          	lw	a1,44(sp)
	RV_OP_LOADREG a2, __z_arch_esf_t_a2_OFFSET(sp)
 20c:	03012603          	lw	a2,48(sp)
	RV_OP_LOADREG a3, __z_arch_esf_t_a3_OFFSET(sp)
 210:	03412683          	lw	a3,52(sp)
	RV_OP_LOADREG a4, __z_arch_esf_t_a4_OFFSET(sp)
 214:	03812703          	lw	a4,56(sp)
	RV_OP_LOADREG a5, __z_arch_esf_t_a5_OFFSET(sp)
 218:	03c12783          	lw	a5,60(sp)
	RV_OP_LOADREG a6, __z_arch_esf_t_a6_OFFSET(sp)
 21c:	04012803          	lw	a6,64(sp)
	RV_OP_LOADREG a7, __z_arch_esf_t_a7_OFFSET(sp)
 220:	04412883          	lw	a7,68(sp)

	/* Release stack space */
	addi sp, sp, __z_arch_esf_t_SIZEOF
 224:	05010113          	addi	sp,sp,80

	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 228:	30200073          	mret

0000022c <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
 22c:	00100313          	li	t1,1
	sll t0, t1, a0
 230:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
 234:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	jalr x0, ra
 238:	00008067          	ret

0000023c <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
 23c:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
 240:	80000337          	lui	t1,0x80000
	and t0, t0, t1
 244:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
 248:	00000513          	li	a0,0
	beqz t0, not_interrupt
 24c:	00028463          	beqz	t0,254 <not_interrupt>
	addi a0, a0, 1
 250:	00150513          	addi	a0,a0,1

00000254 <not_interrupt>:

not_interrupt:
	/* return */
	jalr x0, ra
 254:	00008067          	ret

00000258 <arch_swap>:
 * key is stored in a0 register
 */
SECTION_FUNC(exception.other, arch_swap)

	/* Make a system call to perform context switch */
	ecall
 258:	00000073          	ecall
	 * Prior to unlocking irq, load return value of
	 * arch_swap to temp register t2 (from
	 * _thread_offset_to_swap_return_value). Normally, it should be -EAGAIN,
	 * unless someone has previously called arch_thread_return_value_set(..).
	 */
	la t0, _kernel
 25c:	00008297          	auipc	t0,0x8
 260:	97428293          	addi	t0,t0,-1676 # 7bd0 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 264:	0082a303          	lw	t1,8(t0)

	/* Load return value of arch_swap function in temp register t2 */
	lw t2, _thread_offset_to_swap_return_value(t1)
 268:	07c32383          	lw	t2,124(t1) # 8000007c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000007d>

	/*
	 * Unlock irq, following IRQ lock state in a0 register.
	 * Use atomic instruction csrrs to do so.
	 */
	andi a0, a0, MSTATUS_IEN
 26c:	00857513          	andi	a0,a0,8
	csrrs t0, mstatus, a0
 270:	300522f3          	csrrs	t0,mstatus,a0

	/* Set value of return register a0 to value of register t2 */
	addi a0, t2, 0
 274:	00038513          	mv	a0,t2

	/* Return */
	jalr x0, ra
 278:	00008067          	ret

Disassembly of section text:

0000027c <__clzsi2>:
     27c:	000107b7          	lui	a5,0x10
     280:	02f57463          	bgeu	a0,a5,2a8 <__clzsi2+0x2c>
     284:	0ff00793          	li	a5,255
     288:	02000713          	li	a4,32
     28c:	06a7e263          	bltu	a5,a0,2f0 <__clzsi2+0x74>
     290:	000077b7          	lui	a5,0x7
     294:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     298:	00a78533          	add	a0,a5,a0
     29c:	00054503          	lbu	a0,0(a0)
     2a0:	40a70533          	sub	a0,a4,a0
     2a4:	00008067          	ret
     2a8:	010007b7          	lui	a5,0x1000
     2ac:	02f57263          	bgeu	a0,a5,2d0 <__clzsi2+0x54>
     2b0:	000077b7          	lui	a5,0x7
     2b4:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     2b8:	01055513          	srli	a0,a0,0x10
     2bc:	00a78533          	add	a0,a5,a0
     2c0:	00054503          	lbu	a0,0(a0)
     2c4:	01000713          	li	a4,16
     2c8:	40a70533          	sub	a0,a4,a0
     2cc:	00008067          	ret
     2d0:	000077b7          	lui	a5,0x7
     2d4:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     2d8:	01855513          	srli	a0,a0,0x18
     2dc:	00a78533          	add	a0,a5,a0
     2e0:	00054503          	lbu	a0,0(a0)
     2e4:	00800713          	li	a4,8
     2e8:	40a70533          	sub	a0,a4,a0
     2ec:	00008067          	ret
     2f0:	000077b7          	lui	a5,0x7
     2f4:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     2f8:	00855513          	srli	a0,a0,0x8
     2fc:	00a78533          	add	a0,a5,a0
     300:	00054503          	lbu	a0,0(a0)
     304:	01800713          	li	a4,24
     308:	40a70533          	sub	a0,a4,a0
     30c:	00008067          	ret

00000310 <__udivdi3>:
     310:	00068e13          	mv	t3,a3
     314:	00060893          	mv	a7,a2
     318:	00050313          	mv	t1,a0
     31c:	00058813          	mv	a6,a1
     320:	0c069e63          	bnez	a3,3fc <__udivdi3+0xec>
     324:	12c5fa63          	bgeu	a1,a2,458 <CONFIG_MAIN_STACK_SIZE+0x58>
     328:	000107b7          	lui	a5,0x10
     32c:	20f66a63          	bltu	a2,a5,540 <CONFIG_MAIN_STACK_SIZE+0x140>
     330:	010007b7          	lui	a5,0x1000
     334:	42f66663          	bltu	a2,a5,760 <CONFIG_MAIN_STACK_SIZE+0x360>
     338:	01865713          	srli	a4,a2,0x18
     33c:	01800e13          	li	t3,24
     340:	000077b7          	lui	a5,0x7
     344:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     348:	00e787b3          	add	a5,a5,a4
     34c:	0007c783          	lbu	a5,0(a5)
     350:	02000713          	li	a4,32
     354:	01c78e33          	add	t3,a5,t3
     358:	41c707b3          	sub	a5,a4,t3
     35c:	01c70c63          	beq	a4,t3,374 <__udivdi3+0x64>
     360:	00f59833          	sll	a6,a1,a5
     364:	01c55e33          	srl	t3,a0,t3
     368:	00f618b3          	sll	a7,a2,a5
     36c:	010e6833          	or	a6,t3,a6
     370:	00f51333          	sll	t1,a0,a5
     374:	0108d593          	srli	a1,a7,0x10
     378:	02b85533          	divu	a0,a6,a1
     37c:	01089693          	slli	a3,a7,0x10
     380:	0106d693          	srli	a3,a3,0x10
     384:	01035793          	srli	a5,t1,0x10
     388:	02b87733          	remu	a4,a6,a1
     38c:	02a68633          	mul	a2,a3,a0
     390:	01071713          	slli	a4,a4,0x10
     394:	00f76833          	or	a6,a4,a5
     398:	00c87c63          	bgeu	a6,a2,3b0 <__udivdi3+0xa0>
     39c:	01180833          	add	a6,a6,a7
     3a0:	fff50793          	addi	a5,a0,-1
     3a4:	01186463          	bltu	a6,a7,3ac <__udivdi3+0x9c>
     3a8:	3ec86863          	bltu	a6,a2,798 <CONFIG_MAIN_STACK_SIZE+0x398>
     3ac:	00078513          	mv	a0,a5
     3b0:	40c80833          	sub	a6,a6,a2
     3b4:	02b85633          	divu	a2,a6,a1
     3b8:	01031313          	slli	t1,t1,0x10
     3bc:	01035313          	srli	t1,t1,0x10
     3c0:	02b87833          	remu	a6,a6,a1
     3c4:	02c686b3          	mul	a3,a3,a2
     3c8:	01081813          	slli	a6,a6,0x10
     3cc:	00686833          	or	a6,a6,t1
     3d0:	00d87e63          	bgeu	a6,a3,3ec <__udivdi3+0xdc>
     3d4:	01088833          	add	a6,a7,a6
     3d8:	fff60793          	addi	a5,a2,-1
     3dc:	01186663          	bltu	a6,a7,3e8 <__udivdi3+0xd8>
     3e0:	ffe60613          	addi	a2,a2,-2
     3e4:	00d86463          	bltu	a6,a3,3ec <__udivdi3+0xdc>
     3e8:	00078613          	mv	a2,a5
     3ec:	01051513          	slli	a0,a0,0x10
     3f0:	00c56533          	or	a0,a0,a2
     3f4:	00000593          	li	a1,0
     3f8:	00008067          	ret
     3fc:	00d5f863          	bgeu	a1,a3,40c <CONFIG_MAIN_STACK_SIZE+0xc>
     400:	00000593          	li	a1,0
     404:	00000513          	li	a0,0
     408:	00008067          	ret
     40c:	000107b7          	lui	a5,0x10
     410:	14f6e463          	bltu	a3,a5,558 <CONFIG_MAIN_STACK_SIZE+0x158>
     414:	010007b7          	lui	a5,0x1000
     418:	32f6e263          	bltu	a3,a5,73c <CONFIG_MAIN_STACK_SIZE+0x33c>
     41c:	0186d813          	srli	a6,a3,0x18
     420:	01800713          	li	a4,24
     424:	000077b7          	lui	a5,0x7
     428:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     42c:	010787b3          	add	a5,a5,a6
     430:	0007ce03          	lbu	t3,0(a5)
     434:	02000793          	li	a5,32
     438:	00ee0e33          	add	t3,t3,a4
     43c:	41c78eb3          	sub	t4,a5,t3
     440:	1dc79863          	bne	a5,t3,610 <CONFIG_MAIN_STACK_SIZE+0x210>
     444:	32b6e463          	bltu	a3,a1,76c <CONFIG_MAIN_STACK_SIZE+0x36c>
     448:	00c53633          	sltu	a2,a0,a2
     44c:	00164513          	xori	a0,a2,1
     450:	00000593          	li	a1,0
     454:	00008067          	ret
     458:	00061663          	bnez	a2,464 <CONFIG_MAIN_STACK_SIZE+0x64>
     45c:	00100793          	li	a5,1
     460:	02c7d8b3          	divu	a7,a5,a2
     464:	000107b7          	lui	a5,0x10
     468:	0cf8e063          	bltu	a7,a5,528 <CONFIG_MAIN_STACK_SIZE+0x128>
     46c:	010007b7          	lui	a5,0x1000
     470:	2ef8e263          	bltu	a7,a5,754 <CONFIG_MAIN_STACK_SIZE+0x354>
     474:	0188d713          	srli	a4,a7,0x18
     478:	01800e13          	li	t3,24
     47c:	000077b7          	lui	a5,0x7
     480:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     484:	00e787b3          	add	a5,a5,a4
     488:	0007c683          	lbu	a3,0(a5)
     48c:	02000793          	li	a5,32
     490:	01c68e33          	add	t3,a3,t3
     494:	41c782b3          	sub	t0,a5,t3
     498:	0dc79a63          	bne	a5,t3,56c <CONFIG_MAIN_STACK_SIZE+0x16c>
     49c:	01089f13          	slli	t5,a7,0x10
     4a0:	41158733          	sub	a4,a1,a7
     4a4:	0108df93          	srli	t6,a7,0x10
     4a8:	010f5f13          	srli	t5,t5,0x10
     4ac:	00100593          	li	a1,1
     4b0:	01035793          	srli	a5,t1,0x10
     4b4:	03f75533          	divu	a0,a4,t6
     4b8:	03f77733          	remu	a4,a4,t6
     4bc:	03e506b3          	mul	a3,a0,t5
     4c0:	01071713          	slli	a4,a4,0x10
     4c4:	00f767b3          	or	a5,a4,a5
     4c8:	00d7fc63          	bgeu	a5,a3,4e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
     4cc:	011787b3          	add	a5,a5,a7
     4d0:	fff50713          	addi	a4,a0,-1
     4d4:	0117e463          	bltu	a5,a7,4dc <CONFIG_MAIN_STACK_SIZE+0xdc>
     4d8:	2cd7e663          	bltu	a5,a3,7a4 <CONFIG_MAIN_STACK_SIZE+0x3a4>
     4dc:	00070513          	mv	a0,a4
     4e0:	40d787b3          	sub	a5,a5,a3
     4e4:	03f7d633          	divu	a2,a5,t6
     4e8:	01031313          	slli	t1,t1,0x10
     4ec:	01035313          	srli	t1,t1,0x10
     4f0:	03f7f7b3          	remu	a5,a5,t6
     4f4:	03e60f33          	mul	t5,a2,t5
     4f8:	01079793          	slli	a5,a5,0x10
     4fc:	0067e7b3          	or	a5,a5,t1
     500:	01e7fe63          	bgeu	a5,t5,51c <CONFIG_MAIN_STACK_SIZE+0x11c>
     504:	00f887b3          	add	a5,a7,a5
     508:	fff60713          	addi	a4,a2,-1
     50c:	0117e663          	bltu	a5,a7,518 <CONFIG_MAIN_STACK_SIZE+0x118>
     510:	ffe60613          	addi	a2,a2,-2
     514:	01e7e463          	bltu	a5,t5,51c <CONFIG_MAIN_STACK_SIZE+0x11c>
     518:	00070613          	mv	a2,a4
     51c:	01051513          	slli	a0,a0,0x10
     520:	00c56533          	or	a0,a0,a2
     524:	00008067          	ret
     528:	0ff00793          	li	a5,255
     52c:	00088713          	mv	a4,a7
     530:	f517f6e3          	bgeu	a5,a7,47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     534:	0088d713          	srli	a4,a7,0x8
     538:	00800e13          	li	t3,8
     53c:	f41ff06f          	j	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     540:	0ff00793          	li	a5,255
     544:	00060713          	mv	a4,a2
     548:	dec7fce3          	bgeu	a5,a2,340 <__udivdi3+0x30>
     54c:	00865713          	srli	a4,a2,0x8
     550:	00800e13          	li	t3,8
     554:	dedff06f          	j	340 <__udivdi3+0x30>
     558:	0ff00793          	li	a5,255
     55c:	1ed7f663          	bgeu	a5,a3,748 <CONFIG_MAIN_STACK_SIZE+0x348>
     560:	0086d813          	srli	a6,a3,0x8
     564:	00800713          	li	a4,8
     568:	ebdff06f          	j	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     56c:	005898b3          	sll	a7,a7,t0
     570:	01c5d633          	srl	a2,a1,t3
     574:	0108df93          	srli	t6,a7,0x10
     578:	03f65eb3          	divu	t4,a2,t6
     57c:	01089f13          	slli	t5,a7,0x10
     580:	010f5f13          	srli	t5,t5,0x10
     584:	00559733          	sll	a4,a1,t0
     588:	01c55e33          	srl	t3,a0,t3
     58c:	00ee6733          	or	a4,t3,a4
     590:	01075593          	srli	a1,a4,0x10
     594:	00551333          	sll	t1,a0,t0
     598:	03f676b3          	remu	a3,a2,t6
     59c:	03df07b3          	mul	a5,t5,t4
     5a0:	01069693          	slli	a3,a3,0x10
     5a4:	00b6e6b3          	or	a3,a3,a1
     5a8:	00f6fe63          	bgeu	a3,a5,5c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
     5ac:	011686b3          	add	a3,a3,a7
     5b0:	fffe8613          	addi	a2,t4,-1
     5b4:	1d16ee63          	bltu	a3,a7,790 <CONFIG_MAIN_STACK_SIZE+0x390>
     5b8:	1cf6fc63          	bgeu	a3,a5,790 <CONFIG_MAIN_STACK_SIZE+0x390>
     5bc:	ffee8e93          	addi	t4,t4,-2
     5c0:	011686b3          	add	a3,a3,a7
     5c4:	40f686b3          	sub	a3,a3,a5
     5c8:	03f6d7b3          	divu	a5,a3,t6
     5cc:	01071e13          	slli	t3,a4,0x10
     5d0:	010e5e13          	srli	t3,t3,0x10
     5d4:	03f6f6b3          	remu	a3,a3,t6
     5d8:	02ff0633          	mul	a2,t5,a5
     5dc:	01069713          	slli	a4,a3,0x10
     5e0:	01c76733          	or	a4,a4,t3
     5e4:	00c77e63          	bgeu	a4,a2,600 <CONFIG_MAIN_STACK_SIZE+0x200>
     5e8:	01170733          	add	a4,a4,a7
     5ec:	fff78693          	addi	a3,a5,-1
     5f0:	19176863          	bltu	a4,a7,780 <CONFIG_MAIN_STACK_SIZE+0x380>
     5f4:	18c77663          	bgeu	a4,a2,780 <CONFIG_MAIN_STACK_SIZE+0x380>
     5f8:	ffe78793          	addi	a5,a5,-2
     5fc:	01170733          	add	a4,a4,a7
     600:	010e9593          	slli	a1,t4,0x10
     604:	40c70733          	sub	a4,a4,a2
     608:	00f5e5b3          	or	a1,a1,a5
     60c:	ea5ff06f          	j	4b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
     610:	01c657b3          	srl	a5,a2,t3
     614:	01d696b3          	sll	a3,a3,t4
     618:	00d7e6b3          	or	a3,a5,a3
     61c:	01c5d333          	srl	t1,a1,t3
     620:	0106df13          	srli	t5,a3,0x10
     624:	03e358b3          	divu	a7,t1,t5
     628:	01069713          	slli	a4,a3,0x10
     62c:	01075713          	srli	a4,a4,0x10
     630:	01d59833          	sll	a6,a1,t4
     634:	01c55e33          	srl	t3,a0,t3
     638:	010e6833          	or	a6,t3,a6
     63c:	01085793          	srli	a5,a6,0x10
     640:	01d61633          	sll	a2,a2,t4
     644:	03e37333          	remu	t1,t1,t5
     648:	031705b3          	mul	a1,a4,a7
     64c:	01031313          	slli	t1,t1,0x10
     650:	00f367b3          	or	a5,t1,a5
     654:	00b7fe63          	bgeu	a5,a1,670 <CONFIG_MAIN_STACK_SIZE+0x270>
     658:	00d787b3          	add	a5,a5,a3
     65c:	fff88313          	addi	t1,a7,-1
     660:	12d7e463          	bltu	a5,a3,788 <CONFIG_MAIN_STACK_SIZE+0x388>
     664:	12b7f263          	bgeu	a5,a1,788 <CONFIG_MAIN_STACK_SIZE+0x388>
     668:	ffe88893          	addi	a7,a7,-2
     66c:	00d787b3          	add	a5,a5,a3
     670:	40b787b3          	sub	a5,a5,a1
     674:	03e7d333          	divu	t1,a5,t5
     678:	01081813          	slli	a6,a6,0x10
     67c:	01085813          	srli	a6,a6,0x10
     680:	03e7f7b3          	remu	a5,a5,t5
     684:	026705b3          	mul	a1,a4,t1
     688:	01079793          	slli	a5,a5,0x10
     68c:	0107e833          	or	a6,a5,a6
     690:	00b87e63          	bgeu	a6,a1,6ac <CONFIG_MAIN_STACK_SIZE+0x2ac>
     694:	00d80833          	add	a6,a6,a3
     698:	fff30793          	addi	a5,t1,-1
     69c:	0cd86e63          	bltu	a6,a3,778 <CONFIG_MAIN_STACK_SIZE+0x378>
     6a0:	0cb87c63          	bgeu	a6,a1,778 <CONFIG_MAIN_STACK_SIZE+0x378>
     6a4:	ffe30313          	addi	t1,t1,-2
     6a8:	00d80833          	add	a6,a6,a3
     6ac:	01089893          	slli	a7,a7,0x10
     6b0:	00010f37          	lui	t5,0x10
     6b4:	0068e8b3          	or	a7,a7,t1
     6b8:	ffff0793          	addi	a5,t5,-1 # ffff <_end+0x63ef>
     6bc:	00f8f733          	and	a4,a7,a5
     6c0:	0108d313          	srli	t1,a7,0x10
     6c4:	00f677b3          	and	a5,a2,a5
     6c8:	01065613          	srli	a2,a2,0x10
     6cc:	02f70e33          	mul	t3,a4,a5
     6d0:	40b80833          	sub	a6,a6,a1
     6d4:	02c70733          	mul	a4,a4,a2
     6d8:	010e5693          	srli	a3,t3,0x10
     6dc:	02f307b3          	mul	a5,t1,a5
     6e0:	00f70733          	add	a4,a4,a5
     6e4:	00e68733          	add	a4,a3,a4
     6e8:	02c30633          	mul	a2,t1,a2
     6ec:	00f77463          	bgeu	a4,a5,6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
     6f0:	01e60633          	add	a2,a2,t5
     6f4:	01075313          	srli	t1,a4,0x10
     6f8:	00c30633          	add	a2,t1,a2
     6fc:	02c86a63          	bltu	a6,a2,730 <CONFIG_MAIN_STACK_SIZE+0x330>
     700:	00c80863          	beq	a6,a2,710 <CONFIG_MAIN_STACK_SIZE+0x310>
     704:	00088513          	mv	a0,a7
     708:	00000593          	li	a1,0
     70c:	00008067          	ret
     710:	000106b7          	lui	a3,0x10
     714:	fff68693          	addi	a3,a3,-1 # ffff <_end+0x63ef>
     718:	00d77733          	and	a4,a4,a3
     71c:	01071793          	slli	a5,a4,0x10
     720:	00de7e33          	and	t3,t3,a3
     724:	01d51533          	sll	a0,a0,t4
     728:	01c787b3          	add	a5,a5,t3
     72c:	fcf57ce3          	bgeu	a0,a5,704 <CONFIG_MAIN_STACK_SIZE+0x304>
     730:	fff88513          	addi	a0,a7,-1
     734:	00000593          	li	a1,0
     738:	00008067          	ret
     73c:	0106d813          	srli	a6,a3,0x10
     740:	01000713          	li	a4,16
     744:	ce1ff06f          	j	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     748:	00068813          	mv	a6,a3
     74c:	00000713          	li	a4,0
     750:	cd5ff06f          	j	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     754:	0108d713          	srli	a4,a7,0x10
     758:	01000e13          	li	t3,16
     75c:	d21ff06f          	j	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     760:	01065713          	srli	a4,a2,0x10
     764:	01000e13          	li	t3,16
     768:	bd9ff06f          	j	340 <__udivdi3+0x30>
     76c:	00000593          	li	a1,0
     770:	00100513          	li	a0,1
     774:	00008067          	ret
     778:	00078313          	mv	t1,a5
     77c:	f31ff06f          	j	6ac <CONFIG_MAIN_STACK_SIZE+0x2ac>
     780:	00068793          	mv	a5,a3
     784:	e7dff06f          	j	600 <CONFIG_MAIN_STACK_SIZE+0x200>
     788:	00030893          	mv	a7,t1
     78c:	ee5ff06f          	j	670 <CONFIG_MAIN_STACK_SIZE+0x270>
     790:	00060e93          	mv	t4,a2
     794:	e31ff06f          	j	5c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
     798:	ffe50513          	addi	a0,a0,-2
     79c:	01180833          	add	a6,a6,a7
     7a0:	c11ff06f          	j	3b0 <__udivdi3+0xa0>
     7a4:	ffe50513          	addi	a0,a0,-2
     7a8:	011787b3          	add	a5,a5,a7
     7ac:	d35ff06f          	j	4e0 <CONFIG_MAIN_STACK_SIZE+0xe0>

000007b0 <__umoddi3>:
     7b0:	00068793          	mv	a5,a3
     7b4:	00060813          	mv	a6,a2
     7b8:	00050893          	mv	a7,a0
     7bc:	00058713          	mv	a4,a1
     7c0:	00058e13          	mv	t3,a1
     7c4:	0c069063          	bnez	a3,884 <CONFIG_ISR_STACK_SIZE+0x84>
     7c8:	12c5f063          	bgeu	a1,a2,8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     7cc:	00010737          	lui	a4,0x10
     7d0:	1ee66863          	bltu	a2,a4,9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     7d4:	010007b7          	lui	a5,0x1000
     7d8:	40f66463          	bltu	a2,a5,be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     7dc:	01865693          	srli	a3,a2,0x18
     7e0:	01800793          	li	a5,24
     7e4:	00007737          	lui	a4,0x7
     7e8:	bb870713          	addi	a4,a4,-1096 # 6bb8 <__clz_tab>
     7ec:	00d70733          	add	a4,a4,a3
     7f0:	00074703          	lbu	a4,0(a4)
     7f4:	02000693          	li	a3,32
     7f8:	00f707b3          	add	a5,a4,a5
     7fc:	40f68333          	sub	t1,a3,a5
     800:	00f68c63          	beq	a3,a5,818 <CONFIG_ISR_STACK_SIZE+0x18>
     804:	006595b3          	sll	a1,a1,t1
     808:	00f557b3          	srl	a5,a0,a5
     80c:	00661833          	sll	a6,a2,t1
     810:	00b7ee33          	or	t3,a5,a1
     814:	006518b3          	sll	a7,a0,t1
     818:	01085613          	srli	a2,a6,0x10
     81c:	02ce57b3          	divu	a5,t3,a2
     820:	01081513          	slli	a0,a6,0x10
     824:	01055513          	srli	a0,a0,0x10
     828:	0108d693          	srli	a3,a7,0x10
     82c:	02ce7e33          	remu	t3,t3,a2
     830:	02f507b3          	mul	a5,a0,a5
     834:	010e1e13          	slli	t3,t3,0x10
     838:	00de6733          	or	a4,t3,a3
     83c:	00f77a63          	bgeu	a4,a5,850 <CONFIG_ISR_STACK_SIZE+0x50>
     840:	01070733          	add	a4,a4,a6
     844:	01076663          	bltu	a4,a6,850 <CONFIG_ISR_STACK_SIZE+0x50>
     848:	00f77463          	bgeu	a4,a5,850 <CONFIG_ISR_STACK_SIZE+0x50>
     84c:	01070733          	add	a4,a4,a6
     850:	40f70733          	sub	a4,a4,a5
     854:	02c756b3          	divu	a3,a4,a2
     858:	01089793          	slli	a5,a7,0x10
     85c:	0107d793          	srli	a5,a5,0x10
     860:	02c77733          	remu	a4,a4,a2
     864:	02d50533          	mul	a0,a0,a3
     868:	01071713          	slli	a4,a4,0x10
     86c:	00f767b3          	or	a5,a4,a5
     870:	10a7ec63          	bltu	a5,a0,988 <CONFIG_ISR_STACK_SIZE+0x188>
     874:	40a78533          	sub	a0,a5,a0
     878:	00655533          	srl	a0,a0,t1
     87c:	00000593          	li	a1,0
     880:	00008067          	ret
     884:	00050813          	mv	a6,a0
     888:	fed5ece3          	bltu	a1,a3,880 <CONFIG_ISR_STACK_SIZE+0x80>
     88c:	000107b7          	lui	a5,0x10
     890:	14f6e463          	bltu	a3,a5,9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
     894:	010007b7          	lui	a5,0x1000
     898:	32f6ee63          	bltu	a3,a5,bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     89c:	0186d313          	srli	t1,a3,0x18
     8a0:	01800893          	li	a7,24
     8a4:	000077b7          	lui	a5,0x7
     8a8:	bb878793          	addi	a5,a5,-1096 # 6bb8 <__clz_tab>
     8ac:	006787b3          	add	a5,a5,t1
     8b0:	0007ce03          	lbu	t3,0(a5)
     8b4:	02000793          	li	a5,32
     8b8:	011e0e33          	add	t3,t3,a7
     8bc:	41c78333          	sub	t1,a5,t3
     8c0:	1bc79c63          	bne	a5,t3,a78 <CONFIG_ISR_STACK_SIZE+0x278>
     8c4:	00b6e463          	bltu	a3,a1,8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     8c8:	00c56a63          	bltu	a0,a2,8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     8cc:	40c50833          	sub	a6,a0,a2
     8d0:	40d585b3          	sub	a1,a1,a3
     8d4:	01053733          	sltu	a4,a0,a6
     8d8:	40e58733          	sub	a4,a1,a4
     8dc:	00080513          	mv	a0,a6
     8e0:	00070593          	mv	a1,a4
     8e4:	00008067          	ret
     8e8:	00061663          	bnez	a2,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8ec:	00100713          	li	a4,1
     8f0:	02c75833          	divu	a6,a4,a2
     8f4:	00010737          	lui	a4,0x10
     8f8:	0ae86863          	bltu	a6,a4,9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
     8fc:	010007b7          	lui	a5,0x1000
     900:	2cf86463          	bltu	a6,a5,bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
     904:	01885693          	srli	a3,a6,0x18
     908:	01800793          	li	a5,24
     90c:	00007737          	lui	a4,0x7
     910:	bb870713          	addi	a4,a4,-1096 # 6bb8 <__clz_tab>
     914:	00d70733          	add	a4,a4,a3
     918:	00074703          	lbu	a4,0(a4)
     91c:	02000693          	li	a3,32
     920:	00f707b3          	add	a5,a4,a5
     924:	40f68333          	sub	t1,a3,a5
     928:	0cf69263          	bne	a3,a5,9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
     92c:	01081e13          	slli	t3,a6,0x10
     930:	410585b3          	sub	a1,a1,a6
     934:	01085613          	srli	a2,a6,0x10
     938:	010e5e13          	srli	t3,t3,0x10
     93c:	0108d713          	srli	a4,a7,0x10
     940:	02c5d6b3          	divu	a3,a1,a2
     944:	02c5f5b3          	remu	a1,a1,a2
     948:	03c686b3          	mul	a3,a3,t3
     94c:	01059593          	slli	a1,a1,0x10
     950:	00e5e733          	or	a4,a1,a4
     954:	00d77863          	bgeu	a4,a3,964 <CONFIG_ISR_STACK_SIZE+0x164>
     958:	01070733          	add	a4,a4,a6
     95c:	01076463          	bltu	a4,a6,964 <CONFIG_ISR_STACK_SIZE+0x164>
     960:	2ad76463          	bltu	a4,a3,c08 <CONFIG_ISR_STACK_SIZE+0x408>
     964:	40d70733          	sub	a4,a4,a3
     968:	02c75533          	divu	a0,a4,a2
     96c:	01089893          	slli	a7,a7,0x10
     970:	0108d893          	srli	a7,a7,0x10
     974:	02c77733          	remu	a4,a4,a2
     978:	03c50533          	mul	a0,a0,t3
     97c:	01071713          	slli	a4,a4,0x10
     980:	011767b3          	or	a5,a4,a7
     984:	00a7fa63          	bgeu	a5,a0,998 <CONFIG_ISR_STACK_SIZE+0x198>
     988:	010787b3          	add	a5,a5,a6
     98c:	0107e663          	bltu	a5,a6,998 <CONFIG_ISR_STACK_SIZE+0x198>
     990:	00a7f463          	bgeu	a5,a0,998 <CONFIG_ISR_STACK_SIZE+0x198>
     994:	010787b3          	add	a5,a5,a6
     998:	40a78533          	sub	a0,a5,a0
     99c:	00655533          	srl	a0,a0,t1
     9a0:	00000593          	li	a1,0
     9a4:	00008067          	ret
     9a8:	0ff00713          	li	a4,255
     9ac:	00080693          	mv	a3,a6
     9b0:	f5077ee3          	bgeu	a4,a6,90c <CONFIG_ISR_STACK_SIZE+0x10c>
     9b4:	00885693          	srli	a3,a6,0x8
     9b8:	00800793          	li	a5,8
     9bc:	f51ff06f          	j	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     9c0:	0ff00713          	li	a4,255
     9c4:	00060693          	mv	a3,a2
     9c8:	e0c77ee3          	bgeu	a4,a2,7e4 <__umoddi3+0x34>
     9cc:	00865693          	srli	a3,a2,0x8
     9d0:	00800793          	li	a5,8
     9d4:	e11ff06f          	j	7e4 <__umoddi3+0x34>
     9d8:	0ff00793          	li	a5,255
     9dc:	20d7f863          	bgeu	a5,a3,bec <CONFIG_ISR_STACK_SIZE+0x3ec>
     9e0:	0086d313          	srli	t1,a3,0x8
     9e4:	00800893          	li	a7,8
     9e8:	ebdff06f          	j	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     9ec:	00681833          	sll	a6,a6,t1
     9f0:	00f5d733          	srl	a4,a1,a5
     9f4:	01085613          	srli	a2,a6,0x10
     9f8:	02c756b3          	divu	a3,a4,a2
     9fc:	01081e13          	slli	t3,a6,0x10
     a00:	00f557b3          	srl	a5,a0,a5
     a04:	010e5e13          	srli	t3,t3,0x10
     a08:	006595b3          	sll	a1,a1,t1
     a0c:	00b7e5b3          	or	a1,a5,a1
     a10:	0105de93          	srli	t4,a1,0x10
     a14:	006518b3          	sll	a7,a0,t1
     a18:	02c77733          	remu	a4,a4,a2
     a1c:	02de07b3          	mul	a5,t3,a3
     a20:	01071693          	slli	a3,a4,0x10
     a24:	01d6e6b3          	or	a3,a3,t4
     a28:	00f6fa63          	bgeu	a3,a5,a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     a2c:	010686b3          	add	a3,a3,a6
     a30:	0106e663          	bltu	a3,a6,a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     a34:	00f6f463          	bgeu	a3,a5,a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     a38:	010686b3          	add	a3,a3,a6
     a3c:	40f686b3          	sub	a3,a3,a5
     a40:	02c6d733          	divu	a4,a3,a2
     a44:	01059793          	slli	a5,a1,0x10
     a48:	0107d793          	srli	a5,a5,0x10
     a4c:	02c6f6b3          	remu	a3,a3,a2
     a50:	02ee0733          	mul	a4,t3,a4
     a54:	01069593          	slli	a1,a3,0x10
     a58:	00f5e5b3          	or	a1,a1,a5
     a5c:	00e5fa63          	bgeu	a1,a4,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a60:	010585b3          	add	a1,a1,a6
     a64:	0105e663          	bltu	a1,a6,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a68:	00e5f463          	bgeu	a1,a4,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a6c:	010585b3          	add	a1,a1,a6
     a70:	40e585b3          	sub	a1,a1,a4
     a74:	ec9ff06f          	j	93c <CONFIG_ISR_STACK_SIZE+0x13c>
     a78:	01c657b3          	srl	a5,a2,t3
     a7c:	006696b3          	sll	a3,a3,t1
     a80:	00d7e6b3          	or	a3,a5,a3
     a84:	01c5d8b3          	srl	a7,a1,t3
     a88:	0106d713          	srli	a4,a3,0x10
     a8c:	02e8deb3          	divu	t4,a7,a4
     a90:	01069f13          	slli	t5,a3,0x10
     a94:	01c557b3          	srl	a5,a0,t3
     a98:	010f5f13          	srli	t5,t5,0x10
     a9c:	006595b3          	sll	a1,a1,t1
     aa0:	00b7e5b3          	or	a1,a5,a1
     aa4:	0105d813          	srli	a6,a1,0x10
     aa8:	00661633          	sll	a2,a2,t1
     aac:	00651533          	sll	a0,a0,t1
     ab0:	02e8f8b3          	remu	a7,a7,a4
     ab4:	03df07b3          	mul	a5,t5,t4
     ab8:	01089893          	slli	a7,a7,0x10
     abc:	0108e833          	or	a6,a7,a6
     ac0:	00f87e63          	bgeu	a6,a5,adc <CONFIG_ISR_STACK_SIZE+0x2dc>
     ac4:	00d80833          	add	a6,a6,a3
     ac8:	fffe8893          	addi	a7,t4,-1
     acc:	12d86a63          	bltu	a6,a3,c00 <CONFIG_ISR_STACK_SIZE+0x400>
     ad0:	12f87863          	bgeu	a6,a5,c00 <CONFIG_ISR_STACK_SIZE+0x400>
     ad4:	ffee8e93          	addi	t4,t4,-2
     ad8:	00d80833          	add	a6,a6,a3
     adc:	40f80833          	sub	a6,a6,a5
     ae0:	02e857b3          	divu	a5,a6,a4
     ae4:	01059593          	slli	a1,a1,0x10
     ae8:	0105d593          	srli	a1,a1,0x10
     aec:	02e87833          	remu	a6,a6,a4
     af0:	02ff0f33          	mul	t5,t5,a5
     af4:	01081713          	slli	a4,a6,0x10
     af8:	00b76733          	or	a4,a4,a1
     afc:	01e77e63          	bgeu	a4,t5,b18 <CONFIG_ISR_STACK_SIZE+0x318>
     b00:	00d70733          	add	a4,a4,a3
     b04:	fff78593          	addi	a1,a5,-1 # ffffff <_end+0xff63ef>
     b08:	0ed76863          	bltu	a4,a3,bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     b0c:	0fe77663          	bgeu	a4,t5,bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     b10:	ffe78793          	addi	a5,a5,-2
     b14:	00d70733          	add	a4,a4,a3
     b18:	010e9e93          	slli	t4,t4,0x10
     b1c:	000102b7          	lui	t0,0x10
     b20:	00feeeb3          	or	t4,t4,a5
     b24:	fff28813          	addi	a6,t0,-1 # ffff <_end+0x63ef>
     b28:	010ef8b3          	and	a7,t4,a6
     b2c:	01065593          	srli	a1,a2,0x10
     b30:	010ede93          	srli	t4,t4,0x10
     b34:	01067833          	and	a6,a2,a6
     b38:	03088fb3          	mul	t6,a7,a6
     b3c:	41e70733          	sub	a4,a4,t5
     b40:	030e8833          	mul	a6,t4,a6
     b44:	010fd793          	srli	a5,t6,0x10
     b48:	02b888b3          	mul	a7,a7,a1
     b4c:	010888b3          	add	a7,a7,a6
     b50:	011787b3          	add	a5,a5,a7
     b54:	02be8eb3          	mul	t4,t4,a1
     b58:	0107f463          	bgeu	a5,a6,b60 <CONFIG_ISR_STACK_SIZE+0x360>
     b5c:	005e8eb3          	add	t4,t4,t0
     b60:	00010837          	lui	a6,0x10
     b64:	fff80813          	addi	a6,a6,-1 # ffff <_end+0x63ef>
     b68:	0107d593          	srli	a1,a5,0x10
     b6c:	0107f7b3          	and	a5,a5,a6
     b70:	01079793          	slli	a5,a5,0x10
     b74:	010fffb3          	and	t6,t6,a6
     b78:	01d585b3          	add	a1,a1,t4
     b7c:	01f787b3          	add	a5,a5,t6
     b80:	02b76863          	bltu	a4,a1,bb0 <CONFIG_ISR_STACK_SIZE+0x3b0>
     b84:	02b70463          	beq	a4,a1,bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     b88:	40f507b3          	sub	a5,a0,a5
     b8c:	00f53533          	sltu	a0,a0,a5
     b90:	40b705b3          	sub	a1,a4,a1
     b94:	40a585b3          	sub	a1,a1,a0
     b98:	01c59e33          	sll	t3,a1,t3
     b9c:	0067d533          	srl	a0,a5,t1
     ba0:	00ae6533          	or	a0,t3,a0
     ba4:	0065d5b3          	srl	a1,a1,t1
     ba8:	00008067          	ret
     bac:	fcf57ee3          	bgeu	a0,a5,b88 <CONFIG_ISR_STACK_SIZE+0x388>
     bb0:	40c78633          	sub	a2,a5,a2
     bb4:	00c7b7b3          	sltu	a5,a5,a2
     bb8:	00d787b3          	add	a5,a5,a3
     bbc:	40f585b3          	sub	a1,a1,a5
     bc0:	00060793          	mv	a5,a2
     bc4:	fc5ff06f          	j	b88 <CONFIG_ISR_STACK_SIZE+0x388>
     bc8:	01085693          	srli	a3,a6,0x10
     bcc:	01000793          	li	a5,16
     bd0:	d3dff06f          	j	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     bd4:	0106d313          	srli	t1,a3,0x10
     bd8:	01000893          	li	a7,16
     bdc:	cc9ff06f          	j	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     be0:	01065693          	srli	a3,a2,0x10
     be4:	01000793          	li	a5,16
     be8:	bfdff06f          	j	7e4 <__umoddi3+0x34>
     bec:	00068313          	mv	t1,a3
     bf0:	00000893          	li	a7,0
     bf4:	cb1ff06f          	j	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     bf8:	00058793          	mv	a5,a1
     bfc:	f1dff06f          	j	b18 <CONFIG_ISR_STACK_SIZE+0x318>
     c00:	00088e93          	mv	t4,a7
     c04:	ed9ff06f          	j	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
     c08:	01070733          	add	a4,a4,a6
     c0c:	d59ff06f          	j	964 <CONFIG_ISR_STACK_SIZE+0x164>

00000c10 <_OffsetAbsSyms>:
 * point regs
 */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 STACK_ROUND_UP(sizeof(struct k_thread)));

GEN_ABS_SYM_END
     c10:	00008067          	ret

00000c14 <print_phil_state>:
#endif
}

#include <stdarg.h>
static void print_phil_state(int id, const char *fmt, int32_t delay)
{
     c14:	fe010113          	addi	sp,sp,-32
     c18:	00812c23          	sw	s0,24(sp)
     c1c:	00912a23          	sw	s1,20(sp)
     c20:	01212823          	sw	s2,16(sp)
     c24:	00112e23          	sw	ra,28(sp)
     c28:	00050913          	mv	s2,a0
     c2c:	00058493          	mv	s1,a1
     c30:	00060413          	mv	s0,a2
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
     c34:	4f1040ef          	jal	ra,5924 <z_impl_k_current_get>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_PRIORITY_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_priority_get(thread);
     c38:	0c1040ef          	jal	ra,54f8 <z_impl_k_thread_priority_get>
     c3c:	00a12623          	sw	a0,12(sp)
	printk("\x1b[%d;%dH", id + 1, 1);
     c40:	00007537          	lui	a0,0x7
     c44:	00100613          	li	a2,1
     c48:	00190593          	addi	a1,s2,1
     c4c:	cc050513          	addi	a0,a0,-832 # 6cc0 <__clz_tab+0x108>
     c50:	0c1000ef          	jal	ra,1510 <printk>
	int prio = k_thread_priority_get(k_current_get());

	set_phil_state_pos(id);

	printk("Philosopher %d [%s:%s%d] ",
     c54:	00c12703          	lw	a4,12(sp)
     c58:	06074263          	bltz	a4,cbc <print_phil_state+0xa8>
     c5c:	000077b7          	lui	a5,0x7
     c60:	000076b7          	lui	a3,0x7
     c64:	cbc78613          	addi	a2,a5,-836 # 6cbc <__clz_tab+0x104>
     c68:	ce468693          	addi	a3,a3,-796 # 6ce4 <__clz_tab+0x12c>
     c6c:	00007537          	lui	a0,0x7
     c70:	00090593          	mv	a1,s2
     c74:	ccc50513          	addi	a0,a0,-820 # 6ccc <__clz_tab+0x114>
     c78:	099000ef          	jal	ra,1510 <printk>
	       id, prio < 0 ? "C" : "P",
	       prio < 0 ? "" : " ",
	       prio);

	if (delay) {
     c7c:	06040063          	beqz	s0,cdc <print_phil_state+0xc8>
		printk(fmt, delay < 1000 ? " " : "", delay);
     c80:	3e700793          	li	a5,999
     c84:	0487d663          	bge	a5,s0,cd0 <print_phil_state+0xbc>
     c88:	000077b7          	lui	a5,0x7
     c8c:	5b078593          	addi	a1,a5,1456 # 75b0 <levels.0+0x398>
     c90:	00040613          	mv	a2,s0
     c94:	00048513          	mv	a0,s1
     c98:	079000ef          	jal	ra,1510 <printk>
	} else {
		printk(fmt, "");
	}

	printk("\n");
}
     c9c:	01812403          	lw	s0,24(sp)
     ca0:	01c12083          	lw	ra,28(sp)
     ca4:	01412483          	lw	s1,20(sp)
     ca8:	01012903          	lw	s2,16(sp)
	printk("\n");
     cac:	00007537          	lui	a0,0x7
     cb0:	ce850513          	addi	a0,a0,-792 # 6ce8 <__clz_tab+0x130>
}
     cb4:	02010113          	addi	sp,sp,32
	printk("\n");
     cb8:	0590006f          	j	1510 <printk>
	printk("Philosopher %d [%s:%s%d] ",
     cbc:	000077b7          	lui	a5,0x7
     cc0:	000076b7          	lui	a3,0x7
     cc4:	cb878613          	addi	a2,a5,-840 # 6cb8 <__clz_tab+0x100>
     cc8:	5b068693          	addi	a3,a3,1456 # 75b0 <levels.0+0x398>
     ccc:	fa1ff06f          	j	c6c <print_phil_state+0x58>
		printk(fmt, delay < 1000 ? " " : "", delay);
     cd0:	000077b7          	lui	a5,0x7
     cd4:	ce478593          	addi	a1,a5,-796 # 6ce4 <__clz_tab+0x12c>
     cd8:	fb9ff06f          	j	c90 <print_phil_state+0x7c>
		printk(fmt, "");
     cdc:	000075b7          	lui	a1,0x7
     ce0:	5b058593          	addi	a1,a1,1456 # 75b0 <levels.0+0x398>
     ce4:	00048513          	mv	a0,s1
     ce8:	029000ef          	jal	ra,1510 <printk>
     cec:	fb1ff06f          	j	c9c <print_phil_state+0x88>

00000cf0 <k_msleep.isra.0>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
     cf0:	ff010113          	addi	sp,sp,-16
     cf4:	00112623          	sw	ra,12(sp)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     cf8:	00000793          	li	a5,0
     cfc:	00054463          	bltz	a0,d04 <k_msleep.isra.0+0x14>
     d00:	00050793          	mv	a5,a0
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
     d04:	00978513          	addi	a0,a5,9
     d08:	41f7d593          	srai	a1,a5,0x1f
     d0c:	00f537b3          	sltu	a5,a0,a5
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
     d10:	00a00613          	li	a2,10
     d14:	00000693          	li	a3,0
     d18:	00b785b3          	add	a1,a5,a1
     d1c:	df4ff0ef          	jal	ra,310 <__udivdi3>
}
     d20:	00c12083          	lw	ra,12(sp)
     d24:	01010113          	addi	sp,sp,16
	return z_impl_k_sleep(timeout);
     d28:	3410406f          	j	5868 <z_impl_k_sleep>

00000d2c <philosopher>:
{
	return id == (NUM_PHIL - 1);
}

void philosopher(void *id, void *unused1, void *unused2)
{
     d2c:	fc010113          	addi	sp,sp,-64
     d30:	02912a23          	sw	s1,52(sp)
     d34:	03412423          	sw	s4,40(sp)
     d38:	02112e23          	sw	ra,60(sp)
     d3c:	02812c23          	sw	s0,56(sp)
     d40:	03212823          	sw	s2,48(sp)
     d44:	03312623          	sw	s3,44(sp)
     d48:	03512223          	sw	s5,36(sp)
     d4c:	03612023          	sw	s6,32(sp)
     d50:	01712e23          	sw	s7,28(sp)
     d54:	01812c23          	sw	s8,24(sp)
     d58:	01912a23          	sw	s9,20(sp)
     d5c:	01a12823          	sw	s10,16(sp)
     d60:	01b12623          	sw	s11,12(sp)
	fork_t fork2;

	int my_id = POINTER_TO_INT(id);

	/* Djkstra's solution: always pick up the lowest numbered fork first */
	if (is_last_philosopher(my_id)) {
     d64:	00500793          	li	a5,5
{
     d68:	00050493          	mv	s1,a0
		fork1 = fork(0);
		fork2 = fork(my_id);
	} else {
		fork1 = fork(my_id);
		fork2 = fork(my_id + 1);
     d6c:	00150a13          	addi	s4,a0,1
	if (is_last_philosopher(my_id)) {
     d70:	10f50a63          	beq	a0,a5,e84 <philosopher+0x158>
		fork1 = fork(my_id);
     d74:	000077b7          	lui	a5,0x7
     d78:	ebc78793          	addi	a5,a5,-324 # 6ebc <forks>
     d7c:	00251713          	slli	a4,a0,0x2
     d80:	00e78733          	add	a4,a5,a4
     d84:	00072903          	lw	s2,0(a4)
		fork2 = fork(my_id + 1);
     d88:	002a1713          	slli	a4,s4,0x2
     d8c:	00e787b3          	add	a5,a5,a4
     d90:	0007a983          	lw	s3,0(a5)
	}

	while (1) {
		int32_t delay;

		print_phil_state(my_id, "       STARVING       ", 0);
     d94:	000077b7          	lui	a5,0x7
		take(fork1);
		print_phil_state(my_id, "   HOLDING ONE FORK   ", 0);
     d98:	00007db7          	lui	s11,0x7
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
     d9c:	00a00b93          	li	s7,10
	int32_t delay = (k_uptime_get_32()/100 * (id + 1)) & 0x1f;
     da0:	06400b13          	li	s6,100
	int32_t ms = (delay + 1) * period_in_ms;
     da4:	01900a93          	li	s5,25
		take(fork2);

		delay = get_random_delay(my_id, 25);
		print_phil_state(my_id, "  EATING  [ %s%d ms ] ", delay);
     da8:	00007d37          	lui	s10,0x7
		k_msleep(delay);

		drop(fork2);
		print_phil_state(my_id, "   DROPPED ONE FORK   ", 0);
     dac:	00007cb7          	lui	s9,0x7
		drop(fork1);

		delay = get_random_delay(my_id, 25);
		print_phil_state(my_id, " THINKING [ %s%d ms ] ", delay);
     db0:	00007c37          	lui	s8,0x7
		print_phil_state(my_id, "       STARVING       ", 0);
     db4:	00000613          	li	a2,0
     db8:	cec78593          	addi	a1,a5,-788 # 6cec <__clz_tab+0x134>
     dbc:	00048513          	mv	a0,s1
     dc0:	e55ff0ef          	jal	ra,c14 <print_phil_state>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
     dc4:	fff00593          	li	a1,-1
     dc8:	fff00613          	li	a2,-1
     dcc:	00090513          	mv	a0,s2
     dd0:	145020ef          	jal	ra,3714 <z_impl_k_mutex_lock>
		print_phil_state(my_id, "   HOLDING ONE FORK   ", 0);
     dd4:	00000613          	li	a2,0
     dd8:	d04d8593          	addi	a1,s11,-764 # 6d04 <__clz_tab+0x14c>
     ddc:	00048513          	mv	a0,s1
     de0:	e35ff0ef          	jal	ra,c14 <print_phil_state>
     de4:	fff00593          	li	a1,-1
     de8:	fff00613          	li	a2,-1
     dec:	00098513          	mv	a0,s3
     df0:	125020ef          	jal	ra,3714 <z_impl_k_mutex_lock>
	return z_impl_k_uptime_ticks();
     df4:	285050ef          	jal	ra,6878 <z_impl_k_uptime_ticks>
     df8:	02ab8433          	mul	s0,s7,a0
		print_phil_state(my_id, "  EATING  [ %s%d ms ] ", delay);
     dfc:	d1cd0593          	addi	a1,s10,-740 # 6d1c <__clz_tab+0x164>
     e00:	00048513          	mv	a0,s1
	int32_t delay = (k_uptime_get_32()/100 * (id + 1)) & 0x1f;
     e04:	03645433          	divu	s0,s0,s6
     e08:	03440433          	mul	s0,s0,s4
     e0c:	01f47413          	andi	s0,s0,31
	int32_t ms = (delay + 1) * period_in_ms;
     e10:	00140413          	addi	s0,s0,1
     e14:	03540433          	mul	s0,s0,s5
		print_phil_state(my_id, "  EATING  [ %s%d ms ] ", delay);
     e18:	00040613          	mv	a2,s0
     e1c:	df9ff0ef          	jal	ra,c14 <print_phil_state>
		k_msleep(delay);
     e20:	00040513          	mv	a0,s0
     e24:	ecdff0ef          	jal	ra,cf0 <k_msleep.isra.0>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     e28:	00098513          	mv	a0,s3
     e2c:	405020ef          	jal	ra,3a30 <z_impl_k_mutex_unlock>
		print_phil_state(my_id, "   DROPPED ONE FORK   ", 0);
     e30:	00000613          	li	a2,0
     e34:	d34c8593          	addi	a1,s9,-716 # 6d34 <__clz_tab+0x17c>
     e38:	00048513          	mv	a0,s1
     e3c:	dd9ff0ef          	jal	ra,c14 <print_phil_state>
     e40:	00090513          	mv	a0,s2
     e44:	3ed020ef          	jal	ra,3a30 <z_impl_k_mutex_unlock>
	return z_impl_k_uptime_ticks();
     e48:	231050ef          	jal	ra,6878 <z_impl_k_uptime_ticks>
     e4c:	02ab8433          	mul	s0,s7,a0
		print_phil_state(my_id, " THINKING [ %s%d ms ] ", delay);
     e50:	d4cc0593          	addi	a1,s8,-692 # 6d4c <__clz_tab+0x194>
     e54:	00048513          	mv	a0,s1
	int32_t delay = (k_uptime_get_32()/100 * (id + 1)) & 0x1f;
     e58:	03645433          	divu	s0,s0,s6
     e5c:	03440433          	mul	s0,s0,s4
     e60:	01f47413          	andi	s0,s0,31
	int32_t ms = (delay + 1) * period_in_ms;
     e64:	00140413          	addi	s0,s0,1
     e68:	03540433          	mul	s0,s0,s5
		print_phil_state(my_id, " THINKING [ %s%d ms ] ", delay);
     e6c:	00040613          	mv	a2,s0
     e70:	da5ff0ef          	jal	ra,c14 <print_phil_state>
		k_msleep(delay);
     e74:	00040513          	mv	a0,s0
     e78:	e79ff0ef          	jal	ra,cf0 <k_msleep.isra.0>
	while (1) {
     e7c:	000077b7          	lui	a5,0x7
     e80:	f35ff06f          	j	db4 <philosopher+0x88>
		fork2 = fork(my_id);
     e84:	00008937          	lui	s2,0x8
     e88:	b5890993          	addi	s3,s2,-1192 # 7b58 <fork_objs>
     e8c:	06498993          	addi	s3,s3,100
		fork1 = fork(0);
     e90:	b5890913          	addi	s2,s2,-1192
     e94:	f01ff06f          	j	d94 <philosopher+0x68>

00000e98 <main>:
	"well as %s %s and thread sleeping.\n", obj_init_type, fork_type_str

static void display_demo_description(void)
{
#if !DEBUG_PRINTF
	printk(DEMO_DESCRIPTION);
     e98:	00007637          	lui	a2,0x7
     e9c:	000075b7          	lui	a1,0x7
     ea0:	00007537          	lui	a0,0x7
#endif
}

void main(void)
{
     ea4:	fc010113          	addi	sp,sp,-64
	printk(DEMO_DESCRIPTION);
     ea8:	d6460613          	addi	a2,a2,-668 # 6d64 <__clz_tab+0x1ac>
     eac:	d6c58593          	addi	a1,a1,-660 # 6d6c <__clz_tab+0x1b4>
     eb0:	d7450513          	addi	a0,a0,-652 # 6d74 <__clz_tab+0x1bc>
{
     eb4:	02112e23          	sw	ra,60(sp)
     eb8:	02812c23          	sw	s0,56(sp)
     ebc:	02912a23          	sw	s1,52(sp)
     ec0:	03212823          	sw	s2,48(sp)
     ec4:	03312623          	sw	s3,44(sp)
     ec8:	03412423          	sw	s4,40(sp)
     ecc:	03512223          	sw	s5,36(sp)
     ed0:	03612023          	sw	s6,32(sp)
     ed4:	01712e23          	sw	s7,28(sp)
     ed8:	01812c23          	sw	s8,24(sp)
	printk(DEMO_DESCRIPTION);
     edc:	634000ef          	jal	ra,1510 <printk>
	display_demo_description();
#if CONFIG_TIMESLICING
	k_sched_time_slice_set(5000, 0);
     ee0:	00001537          	lui	a0,0x1
     ee4:	00007437          	lui	s0,0x7
     ee8:	00000593          	li	a1,0
     eec:	38850513          	addi	a0,a0,904 # 1388 <z_vprintk+0x234>
     ef0:	ebc40413          	addi	s0,s0,-324 # 6ebc <forks>
     ef4:	695020ef          	jal	ra,3d88 <k_sched_time_slice_set>
	for (int i = 0; i < NUM_PHIL; i++) {
     ef8:	01840493          	addi	s1,s0,24
		fork_init(fork(i));
     efc:	00042503          	lw	a0,0(s0)
	for (int i = 0; i < NUM_PHIL; i++) {
     f00:	00440413          	addi	s0,s0,4
	return z_impl_k_mutex_init(mutex);
     f04:	7f8020ef          	jal	ra,36fc <z_impl_k_mutex_init>
     f08:	fe941ae3          	bne	s0,s1,efc <main+0x64>
     f0c:	00007437          	lui	s0,0x7
     f10:	00008937          	lui	s2,0x8
     f14:	75840413          	addi	s0,s0,1880 # 7758 <threads>
     f18:	c1090913          	addi	s2,s2,-1008 # 7c10 <stacks>
	for (int i = 0; i < NUM_PHIL; i++) {
     f1c:	00000493          	li	s1,0
     f20:	fff00b13          	li	s6,-1
     f24:	fff00b93          	li	s7,-1
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     f28:	00300a93          	li	s5,3
     f2c:	00400c13          	li	s8,4
     f30:	00001a37          	lui	s4,0x1
     f34:	00600993          	li	s3,6
     f38:	00000813          	li	a6,0
     f3c:	01612423          	sw	s6,8(sp)
     f40:	01712623          	sw	s7,12(sp)
     f44:	01812023          	sw	s8,0(sp)
     f48:	409a88b3          	sub	a7,s5,s1
     f4c:	00000793          	li	a5,0
     f50:	00048713          	mv	a4,s1
     f54:	d2ca0693          	addi	a3,s4,-724 # d2c <philosopher>
     f58:	30000613          	li	a2,768
     f5c:	00090593          	mv	a1,s2
     f60:	00040513          	mv	a0,s0
     f64:	311040ef          	jal	ra,5a74 <z_impl_k_thread_create>
		k_object_access_grant(fork((i + 1) % NUM_PHIL), &threads[i]);
     f68:	00148493          	addi	s1,s1,1
	z_impl_k_thread_start(thread);
     f6c:	00040513          	mv	a0,s0
     f70:	1c1040ef          	jal	ra,5930 <z_impl_k_thread_start>
	for (int i = 0; i < NUM_PHIL; i++) {
     f74:	08040413          	addi	s0,s0,128
     f78:	30090913          	addi	s2,s2,768
     f7c:	fb349ee3          	bne	s1,s3,f38 <main+0xa0>
	/* Wait a few seconds before main() exit, giving the sample the
	 * opportunity to dump some output before coverage data gets emitted
	 */
	k_sleep(K_MSEC(5000));
#endif
}
     f80:	03c12083          	lw	ra,60(sp)
     f84:	03812403          	lw	s0,56(sp)
     f88:	03412483          	lw	s1,52(sp)
     f8c:	03012903          	lw	s2,48(sp)
     f90:	02c12983          	lw	s3,44(sp)
     f94:	02812a03          	lw	s4,40(sp)
     f98:	02412a83          	lw	s5,36(sp)
     f9c:	02012b03          	lw	s6,32(sp)
     fa0:	01c12b83          	lw	s7,28(sp)
     fa4:	01812c03          	lw	s8,24(sp)
     fa8:	04010113          	addi	sp,sp,64
     fac:	00008067          	ret

00000fb0 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     fb0:	00000513          	li	a0,0
     fb4:	00008067          	ret

00000fb8 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
     fb8:	fa010113          	addi	sp,sp,-96
     fbc:	03812c23          	sw	s8,56(sp)
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
     fc0:	00007c37          	lui	s8,0x7
{
     fc4:	04812c23          	sw	s0,88(sp)
     fc8:	04912a23          	sw	s1,84(sp)
     fcc:	05212823          	sw	s2,80(sp)
     fd0:	05312623          	sw	s3,76(sp)
     fd4:	05412423          	sw	s4,72(sp)
     fd8:	05512223          	sw	s5,68(sp)
     fdc:	05612023          	sw	s6,64(sp)
     fe0:	03712e23          	sw	s7,60(sp)
     fe4:	03912a23          	sw	s9,52(sp)
     fe8:	03a12823          	sw	s10,48(sp)
     fec:	04112e23          	sw	ra,92(sp)
     ff0:	03b12623          	sw	s11,44(sp)
     ff4:	00050993          	mv	s3,a0
     ff8:	00058a13          	mv	s4,a1
     ffc:	00060b93          	mv	s7,a2
    1000:	00068493          	mv	s1,a3
    1004:	00070d13          	mv	s10,a4
    1008:	00078b13          	mv	s6,a5
    100c:	00080a93          	mv	s5,a6
    1010:	00088913          	mv	s2,a7
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    1014:	01400413          	li	s0,20
		buf[i] = "0123456789abcdef"[num % base];
    1018:	41f75c93          	srai	s9,a4,0x1f
    101c:	ed4c0c13          	addi	s8,s8,-300 # 6ed4 <forks+0x18>
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    1020:	009be7b3          	or	a5,s7,s1
    1024:	08079863          	bnez	a5,10b4 <print_digits+0xfc>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    1028:	01400793          	li	a5,20
    102c:	0cf41a63          	bne	s0,a5,1100 <print_digits+0x148>
		buf[i] = '0';
    1030:	03000793          	li	a5,48
    1034:	00f10e23          	sb	a5,28(sp)
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    1038:	012408b3          	add	a7,s0,s2
    103c:	01500793          	li	a5,21
    1040:	00000493          	li	s1,0
    1044:	00f88863          	beq	a7,a5,1054 <print_digits+0x9c>
    1048:	feb88493          	addi	s1,a7,-21

	for (/**/; pad > 0 && pad_before; pad--) {
    104c:	00905463          	blez	s1,1054 <print_digits+0x9c>
    1050:	0a0b1c63          	bnez	s6,1108 <print_digits+0x150>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
    1054:	01500913          	li	s2,21
		out(buf[i], ctx);
    1058:	00810793          	addi	a5,sp,8
    105c:	008787b3          	add	a5,a5,s0
    1060:	0007c503          	lbu	a0,0(a5) # 7000 <forks+0x144>
    1064:	000a0593          	mv	a1,s4
	for (/**/; i < DIGITS_BUFLEN; i++) {
    1068:	00140413          	addi	s0,s0,1
		out(buf[i], ctx);
    106c:	000980e7          	jalr	s3
	for (/**/; i < DIGITS_BUFLEN; i++) {
    1070:	ff2414e3          	bne	s0,s2,1058 <print_digits+0xa0>
	}
	for (/**/; pad > 0; pad--) {
    1074:	0a904463          	bgtz	s1,111c <print_digits+0x164>
		out(pad_char, ctx);
	}
}
    1078:	05c12083          	lw	ra,92(sp)
    107c:	05812403          	lw	s0,88(sp)
    1080:	05412483          	lw	s1,84(sp)
    1084:	05012903          	lw	s2,80(sp)
    1088:	04c12983          	lw	s3,76(sp)
    108c:	04812a03          	lw	s4,72(sp)
    1090:	04412a83          	lw	s5,68(sp)
    1094:	04012b03          	lw	s6,64(sp)
    1098:	03c12b83          	lw	s7,60(sp)
    109c:	03812c03          	lw	s8,56(sp)
    10a0:	03412c83          	lw	s9,52(sp)
    10a4:	03012d03          	lw	s10,48(sp)
    10a8:	02c12d83          	lw	s11,44(sp)
    10ac:	06010113          	addi	sp,sp,96
    10b0:	00008067          	ret
		buf[i] = "0123456789abcdef"[num % base];
    10b4:	00810793          	addi	a5,sp,8
    10b8:	000d0613          	mv	a2,s10
    10bc:	000c8693          	mv	a3,s9
    10c0:	000b8513          	mv	a0,s7
    10c4:	00048593          	mv	a1,s1
    10c8:	00878db3          	add	s11,a5,s0
    10cc:	ee4ff0ef          	jal	ra,7b0 <__umoddi3>
    10d0:	00ac0533          	add	a0,s8,a0
    10d4:	00054783          	lbu	a5,0(a0)
		num /= base;
    10d8:	00048593          	mv	a1,s1
    10dc:	000b8513          	mv	a0,s7
		buf[i] = "0123456789abcdef"[num % base];
    10e0:	00fd8023          	sb	a5,0(s11)
		num /= base;
    10e4:	000d0613          	mv	a2,s10
    10e8:	000c8693          	mv	a3,s9
    10ec:	a24ff0ef          	jal	ra,310 <__udivdi3>
    10f0:	00058493          	mv	s1,a1
    10f4:	00050b93          	mv	s7,a0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    10f8:	fff40413          	addi	s0,s0,-1
    10fc:	f25ff06f          	j	1020 <print_digits+0x68>
		i++;
    1100:	00140413          	addi	s0,s0,1
    1104:	f35ff06f          	j	1038 <print_digits+0x80>
		out(pad_char, ctx);
    1108:	000a0593          	mv	a1,s4
    110c:	000a8513          	mv	a0,s5
    1110:	000980e7          	jalr	s3
	for (/**/; pad > 0 && pad_before; pad--) {
    1114:	fff48493          	addi	s1,s1,-1
    1118:	f35ff06f          	j	104c <print_digits+0x94>
		out(pad_char, ctx);
    111c:	000a0593          	mv	a1,s4
    1120:	000a8513          	mv	a0,s5
    1124:	000980e7          	jalr	s3
	for (/**/; pad > 0; pad--) {
    1128:	fff48493          	addi	s1,s1,-1
    112c:	f49ff06f          	j	1074 <print_digits+0xbc>

00001130 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1130:	0005a783          	lw	a5,0(a1)
    1134:	00178793          	addi	a5,a5,1
    1138:	00f5a023          	sw	a5,0(a1)
	return _char_out(c);
    113c:	000077b7          	lui	a5,0x7
    1140:	6b87a783          	lw	a5,1720(a5) # 76b8 <_char_out>
    1144:	00078067          	jr	a5

00001148 <__printk_hook_install>:
	_char_out = fn;
    1148:	000077b7          	lui	a5,0x7
    114c:	6aa7ac23          	sw	a0,1720(a5) # 76b8 <_char_out>
}
    1150:	00008067          	ret

00001154 <z_vprintk>:
{
    1154:	fb010113          	addi	sp,sp,-80
    1158:	03512a23          	sw	s5,52(sp)
    115c:	00007ab7          	lui	s5,0x7
    1160:	04812423          	sw	s0,72(sp)
    1164:	04912223          	sw	s1,68(sp)
    1168:	05212023          	sw	s2,64(sp)
    116c:	03312e23          	sw	s3,60(sp)
    1170:	03412c23          	sw	s4,56(sp)
    1174:	03612823          	sw	s6,48(sp)
    1178:	03712623          	sw	s7,44(sp)
    117c:	03812423          	sw	s8,40(sp)
    1180:	03912223          	sw	s9,36(sp)
    1184:	03a12023          	sw	s10,32(sp)
    1188:	01b12e23          	sw	s11,28(sp)
    118c:	04112623          	sw	ra,76(sp)
    1190:	00050413          	mv	s0,a0
    1194:	00058d13          	mv	s10,a1
    1198:	00060a13          	mv	s4,a2
    119c:	00068d93          	mv	s11,a3
	char length_mod = 0;
    11a0:	00000993          	li	s3,0
	int min_width = -1;
    11a4:	fff00913          	li	s2,-1
	enum pad_type padding = PAD_NONE;
    11a8:	00000493          	li	s1,0
	int might_format = 0; /* 1 if encountered a '%' */
    11ac:	00000c93          	li	s9,0
			switch (*fmt) {
    11b0:	07a00b13          	li	s6,122
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    11b4:	00100b93          	li	s7,1
    11b8:	03000c13          	li	s8,48
    11bc:	ee8a8a93          	addi	s5,s5,-280 # 6ee8 <forks+0x2c>
	while (*fmt) {
    11c0:	000a4503          	lbu	a0,0(s4)
    11c4:	04051063          	bnez	a0,1204 <z_vprintk+0xb0>
}
    11c8:	04c12083          	lw	ra,76(sp)
    11cc:	04812403          	lw	s0,72(sp)
    11d0:	04412483          	lw	s1,68(sp)
    11d4:	04012903          	lw	s2,64(sp)
    11d8:	03c12983          	lw	s3,60(sp)
    11dc:	03812a03          	lw	s4,56(sp)
    11e0:	03412a83          	lw	s5,52(sp)
    11e4:	03012b03          	lw	s6,48(sp)
    11e8:	02c12b83          	lw	s7,44(sp)
    11ec:	02812c03          	lw	s8,40(sp)
    11f0:	02412c83          	lw	s9,36(sp)
    11f4:	02012d03          	lw	s10,32(sp)
    11f8:	01c12d83          	lw	s11,28(sp)
    11fc:	05010113          	addi	sp,sp,80
    1200:	00008067          	ret
		if (!might_format) {
    1204:	000c9e63          	bnez	s9,1220 <z_vprintk+0xcc>
			if (*fmt != '%') {
    1208:	02500793          	li	a5,37
    120c:	2af50463          	beq	a0,a5,14b4 <z_vprintk+0x360>
				out((int)*fmt, ctx);
    1210:	000d0593          	mv	a1,s10
    1214:	000400e7          	jalr	s0
		++fmt;
    1218:	001a0a13          	addi	s4,s4,1
    121c:	fa5ff06f          	j	11c0 <z_vprintk+0x6c>
			switch (*fmt) {
    1220:	02ab6263          	bltu	s6,a0,1244 <z_vprintk+0xf0>
    1224:	06200793          	li	a5,98
    1228:	02a7ea63          	bltu	a5,a0,125c <z_vprintk+0x108>
    122c:	07850e63          	beq	a0,s8,12a8 <z_vprintk+0x154>
    1230:	04ac6663          	bltu	s8,a0,127c <z_vprintk+0x128>
    1234:	02500793          	li	a5,37
    1238:	26f50663          	beq	a0,a5,14a4 <z_vprintk+0x350>
    123c:	02d00793          	li	a5,45
    1240:	28f50463          	beq	a0,a5,14c8 <z_vprintk+0x374>
				out((int)'%', ctx);
    1244:	000d0593          	mv	a1,s10
    1248:	02500513          	li	a0,37
    124c:	000400e7          	jalr	s0
				out((int)*fmt, ctx);
    1250:	000a4503          	lbu	a0,0(s4)
    1254:	000d0593          	mv	a1,s10
    1258:	2540006f          	j	14ac <z_vprintk+0x358>
    125c:	f9d50793          	addi	a5,a0,-99
    1260:	0ff7f793          	andi	a5,a5,255
    1264:	01700713          	li	a4,23
    1268:	fcf76ee3          	bltu	a4,a5,1244 <z_vprintk+0xf0>
    126c:	00279793          	slli	a5,a5,0x2
    1270:	015787b3          	add	a5,a5,s5
    1274:	0007a783          	lw	a5,0(a5)
    1278:	00078067          	jr	a5
			switch (*fmt) {
    127c:	03900793          	li	a5,57
    1280:	04a7f063          	bgeu	a5,a0,12c0 <z_vprintk+0x16c>
    1284:	05800793          	li	a5,88
    1288:	faf51ee3          	bne	a0,a5,1244 <z_vprintk+0xf0>
				if (*fmt == 'p') {
    128c:	000a4783          	lbu	a5,0(s4)
    1290:	07000713          	li	a4,112
    1294:	14e79a63          	bne	a5,a4,13e8 <z_vprintk+0x294>
					x = va_arg(ap, unsigned int);
    1298:	000da603          	lw	a2,0(s11)
    129c:	00000693          	li	a3,0
    12a0:	004d8d93          	addi	s11,s11,4
    12a4:	1680006f          	j	140c <z_vprintk+0x2b8>
				if (min_width < 0 && padding == PAD_NONE) {
    12a8:	00095e63          	bgez	s2,12c4 <z_vprintk+0x170>
    12ac:	22048263          	beqz	s1,14d0 <z_vprintk+0x37c>
					min_width = *fmt - '0';
    12b0:	fd050913          	addi	s2,a0,-48
				if (padding == PAD_NONE) {
    12b4:	f60492e3          	bnez	s1,1218 <z_vprintk+0xc4>
					padding = PAD_SPACE_BEFORE;
    12b8:	00200493          	li	s1,2
    12bc:	f5dff06f          	j	1218 <z_vprintk+0xc4>
				if (min_width < 0) {
    12c0:	fe0948e3          	bltz	s2,12b0 <z_vprintk+0x15c>
					min_width = 10 * min_width + *fmt - '0';
    12c4:	00a00793          	li	a5,10
    12c8:	02f90933          	mul	s2,s2,a5
    12cc:	fd090913          	addi	s2,s2,-48
    12d0:	01250933          	add	s2,a0,s2
    12d4:	fe1ff06f          	j	12b4 <z_vprintk+0x160>
				if (*fmt == 'h' && length_mod == 'h') {
    12d8:	06800793          	li	a5,104
    12dc:	00f51863          	bne	a0,a5,12ec <z_vprintk+0x198>
    12e0:	00a99c63          	bne	s3,a0,12f8 <z_vprintk+0x1a4>
					length_mod = 'H';
    12e4:	04800993          	li	s3,72
    12e8:	f31ff06f          	j	1218 <z_vprintk+0xc4>
				} else if (*fmt == 'l' && length_mod == 'l') {
    12ec:	06c00793          	li	a5,108
    12f0:	00f51463          	bne	a0,a5,12f8 <z_vprintk+0x1a4>
    12f4:	1ea98263          	beq	s3,a0,14d8 <z_vprintk+0x384>
				} else if (length_mod == 0) {
    12f8:	f40996e3          	bnez	s3,1244 <z_vprintk+0xf0>
    12fc:	00050993          	mv	s3,a0
    1300:	f19ff06f          	j	1218 <z_vprintk+0xc4>
				if (length_mod == 'z') {
    1304:	05699463          	bne	s3,s6,134c <z_vprintk+0x1f8>
					d = va_arg(ap, long);
    1308:	000da603          	lw	a2,0(s11)
    130c:	004d8c93          	addi	s9,s11,4
    1310:	41f65693          	srai	a3,a2,0x1f
				if (*fmt != 'u' && negative(d)) {
    1314:	07500793          	li	a5,117
    1318:	06f51a63          	bne	a0,a5,138c <z_vprintk+0x238>
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    131c:	ffd48793          	addi	a5,s1,-3
    1320:	00f037b3          	snez	a5,a5
    1324:	03000813          	li	a6,48
    1328:	01748463          	beq	s1,s7,1330 <z_vprintk+0x1dc>
    132c:	02000813          	li	a6,32
    1330:	00090893          	mv	a7,s2
    1334:	00a00713          	li	a4,10
    1338:	000d0593          	mv	a1,s10
    133c:	00040513          	mv	a0,s0
    1340:	c79ff0ef          	jal	ra,fb8 <print_digits>
				char *s = va_arg(ap, char *);
    1344:	000c8d93          	mv	s11,s9
    1348:	0ec0006f          	j	1434 <z_vprintk+0x2e0>
				} else if (length_mod == 'l') {
    134c:	06c00793          	li	a5,108
    1350:	faf98ce3          	beq	s3,a5,1308 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
    1354:	04c00793          	li	a5,76
    1358:	00f99e63          	bne	s3,a5,1374 <z_vprintk+0x220>
					long long lld = va_arg(ap, long long);
    135c:	007d8313          	addi	t1,s11,7
    1360:	ff837313          	andi	t1,t1,-8
					d = (printk_val_t) lld;
    1364:	00032603          	lw	a2,0(t1)
    1368:	00432683          	lw	a3,4(t1)
					long long lld = va_arg(ap, long long);
    136c:	00830c93          	addi	s9,t1,8
					d = (printk_val_t) lld;
    1370:	fa5ff06f          	j	1314 <z_vprintk+0x1c0>
				} else if (*fmt == 'u') {
    1374:	07500793          	li	a5,117
					d = va_arg(ap, unsigned int);
    1378:	000da603          	lw	a2,0(s11)
					d = va_arg(ap, ssize_t);
    137c:	004d8c93          	addi	s9,s11,4
					d = va_arg(ap, unsigned int);
    1380:	00000693          	li	a3,0
				} else if (*fmt == 'u') {
    1384:	f8f50ce3          	beq	a0,a5,131c <z_vprintk+0x1c8>
					d = va_arg(ap, int);
    1388:	41f65693          	srai	a3,a2,0x1f
				if (*fmt != 'u' && negative(d)) {
    138c:	f806d8e3          	bgez	a3,131c <z_vprintk+0x1c8>
					out((int)'-', ctx);
    1390:	000d0593          	mv	a1,s10
    1394:	02d00513          	li	a0,45
    1398:	00d12623          	sw	a3,12(sp)
    139c:	00c12423          	sw	a2,8(sp)
    13a0:	000400e7          	jalr	s0
					d = -d;
    13a4:	00812603          	lw	a2,8(sp)
    13a8:	00c12683          	lw	a3,12(sp)
					min_width--;
    13ac:	fff90913          	addi	s2,s2,-1
					d = -d;
    13b0:	00c037b3          	snez	a5,a2
    13b4:	40d006b3          	neg	a3,a3
    13b8:	40f686b3          	sub	a3,a3,a5
    13bc:	40c00633          	neg	a2,a2
					min_width--;
    13c0:	f5dff06f          	j	131c <z_vprintk+0x1c8>
				out('0', ctx);
    13c4:	000d0593          	mv	a1,s10
    13c8:	03000513          	li	a0,48
    13cc:	000400e7          	jalr	s0
				out('x', ctx);
    13d0:	000d0593          	mv	a1,s10
    13d4:	07800513          	li	a0,120
    13d8:	000400e7          	jalr	s0
				min_width = sizeof(void *) * 2;
    13dc:	00800913          	li	s2,8
				padding = PAD_ZERO_BEFORE;
    13e0:	00100493          	li	s1,1
    13e4:	ea9ff06f          	j	128c <z_vprintk+0x138>
				} else if (length_mod == 'l') {
    13e8:	06c00793          	li	a5,108
    13ec:	eaf986e3          	beq	s3,a5,1298 <z_vprintk+0x144>
				} else if (length_mod == 'L') {
    13f0:	04c00793          	li	a5,76
    13f4:	eaf992e3          	bne	s3,a5,1298 <z_vprintk+0x144>
					x = va_arg(ap, unsigned long long);
    13f8:	007d8693          	addi	a3,s11,7
    13fc:	ff86f693          	andi	a3,a3,-8
    1400:	0006a603          	lw	a2,0(a3)
    1404:	00868d93          	addi	s11,a3,8
    1408:	0046a683          	lw	a3,4(a3)
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    140c:	ffd48793          	addi	a5,s1,-3
    1410:	00f037b3          	snez	a5,a5
    1414:	03000813          	li	a6,48
    1418:	01748463          	beq	s1,s7,1420 <z_vprintk+0x2cc>
    141c:	02000813          	li	a6,32
    1420:	00090893          	mv	a7,s2
    1424:	01000713          	li	a4,16
    1428:	000d0593          	mv	a1,s10
    142c:	00040513          	mv	a0,s0
    1430:	b89ff0ef          	jal	ra,fb8 <print_digits>
			might_format = 0;
    1434:	00000c93          	li	s9,0
    1438:	de1ff06f          	j	1218 <z_vprintk+0xc4>
				char *s = va_arg(ap, char *);
    143c:	004d8c93          	addi	s9,s11,4
    1440:	000dad83          	lw	s11,0(s11)
    1444:	000d8793          	mv	a5,s11
				while (*s) {
    1448:	0007c503          	lbu	a0,0(a5)
    144c:	02051663          	bnez	a0,1478 <z_vprintk+0x324>
				if (padding == PAD_SPACE_AFTER) {
    1450:	00300693          	li	a3,3
    1454:	eed498e3          	bne	s1,a3,1344 <z_vprintk+0x1f0>
					int remaining = min_width - (s - start);
    1458:	41b787b3          	sub	a5,a5,s11
    145c:	40f90db3          	sub	s11,s2,a5
					while (remaining-- > 0) {
    1460:	efb052e3          	blez	s11,1344 <z_vprintk+0x1f0>
						out(' ', ctx);
    1464:	000d0593          	mv	a1,s10
    1468:	02000513          	li	a0,32
    146c:	000400e7          	jalr	s0
    1470:	fffd8d93          	addi	s11,s11,-1
    1474:	fedff06f          	j	1460 <z_vprintk+0x30c>
					out((int)(*s++), ctx);
    1478:	00178793          	addi	a5,a5,1
    147c:	000d0593          	mv	a1,s10
    1480:	00f12423          	sw	a5,8(sp)
    1484:	000400e7          	jalr	s0
    1488:	00812783          	lw	a5,8(sp)
    148c:	fbdff06f          	j	1448 <z_vprintk+0x2f4>
				out(c, ctx);
    1490:	000da503          	lw	a0,0(s11)
    1494:	000d0593          	mv	a1,s10
				int c = va_arg(ap, int);
    1498:	004d8c93          	addi	s9,s11,4
				out(c, ctx);
    149c:	000400e7          	jalr	s0
				break;
    14a0:	ea5ff06f          	j	1344 <z_vprintk+0x1f0>
				out((int)'%', ctx);
    14a4:	000d0593          	mv	a1,s10
    14a8:	02500513          	li	a0,37
				out((int)*fmt, ctx);
    14ac:	000400e7          	jalr	s0
				break;
    14b0:	f85ff06f          	j	1434 <z_vprintk+0x2e0>
				length_mod = 0;
    14b4:	00000993          	li	s3,0
				min_width = -1;
    14b8:	fff00913          	li	s2,-1
				padding = PAD_NONE;
    14bc:	00000493          	li	s1,0
				might_format = 1;
    14c0:	00100c93          	li	s9,1
    14c4:	d55ff06f          	j	1218 <z_vprintk+0xc4>
			switch (*fmt) {
    14c8:	00300493          	li	s1,3
    14cc:	d4dff06f          	j	1218 <z_vprintk+0xc4>
					padding = PAD_ZERO_BEFORE;
    14d0:	00100493          	li	s1,1
    14d4:	d45ff06f          	j	1218 <z_vprintk+0xc4>
					length_mod = 'L';
    14d8:	04c00993          	li	s3,76
    14dc:	d3dff06f          	j	1218 <z_vprintk+0xc4>

000014e0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    14e0:	fe010113          	addi	sp,sp,-32
    14e4:	00050613          	mv	a2,a0
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    14e8:	00001537          	lui	a0,0x1
{
    14ec:	00058693          	mv	a3,a1
	z_vprintk(char_out, &ctx, fmt, ap);
    14f0:	13050513          	addi	a0,a0,304 # 1130 <char_out>
    14f4:	00c10593          	addi	a1,sp,12
{
    14f8:	00112e23          	sw	ra,28(sp)
	struct out_context ctx = { 0 };
    14fc:	00012623          	sw	zero,12(sp)
	z_vprintk(char_out, &ctx, fmt, ap);
    1500:	c55ff0ef          	jal	ra,1154 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1504:	01c12083          	lw	ra,28(sp)
    1508:	02010113          	addi	sp,sp,32
    150c:	00008067          	ret

00001510 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    1510:	fc010113          	addi	sp,sp,-64
    1514:	02b12223          	sw	a1,36(sp)
	va_list ap;

	va_start(ap, fmt);
    1518:	02410593          	addi	a1,sp,36
{
    151c:	00112e23          	sw	ra,28(sp)
    1520:	02c12423          	sw	a2,40(sp)
    1524:	02d12623          	sw	a3,44(sp)
    1528:	02e12823          	sw	a4,48(sp)
    152c:	02f12a23          	sw	a5,52(sp)
    1530:	03012c23          	sw	a6,56(sp)
    1534:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    1538:	00b12623          	sw	a1,12(sp)

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    153c:	fa5ff0ef          	jal	ra,14e0 <vprintk>
	}
	va_end(ap);
}
    1540:	01c12083          	lw	ra,28(sp)
    1544:	04010113          	addi	sp,sp,64
    1548:	00008067          	ret

0000154c <set_child>:
}

static void set_child(struct rbnode *n, int side, void *val)
{
	CHECK(n);
	if (side != 0) {
    154c:	00058663          	beqz	a1,1558 <set_child+0xc>
		n->children[1] = val;
    1550:	00c52223          	sw	a2,4(a0)
    1554:	00008067          	ret
	} else {
		uintptr_t old = (uintptr_t) n->children[0];
		uintptr_t new = (uintptr_t) val;

		n->children[0] = (void *) (new | (old & 1UL));
    1558:	00052783          	lw	a5,0(a0)
    155c:	0017f793          	andi	a5,a5,1
    1560:	00f66633          	or	a2,a2,a5
    1564:	00c52023          	sw	a2,0(a0)
	}
}
    1568:	00008067          	ret

0000156c <find_and_stack>:
static int find_and_stack(struct rbtree *tree, struct rbnode *node,
			  struct rbnode **stack)
{
	int sz = 0;

	stack[sz++] = tree->root;
    156c:	00052783          	lw	a5,0(a0)
{
    1570:	fe010113          	addi	sp,sp,-32
    1574:	00812c23          	sw	s0,24(sp)
    1578:	00912a23          	sw	s1,20(sp)
    157c:	01212823          	sw	s2,16(sp)
    1580:	01312623          	sw	s3,12(sp)
    1584:	00112e23          	sw	ra,28(sp)
    1588:	00050913          	mv	s2,a0
    158c:	00058493          	mv	s1,a1
    1590:	00060413          	mv	s0,a2
	stack[sz++] = tree->root;
    1594:	00f62023          	sw	a5,0(a2)
    1598:	00100993          	li	s3,1

	while (stack[sz - 1] != node) {
    159c:	00042583          	lw	a1,0(s0)
    15a0:	02959263          	bne	a1,s1,15c4 <find_and_stack+0x58>
			break;
		}
	}

	return sz;
}
    15a4:	01c12083          	lw	ra,28(sp)
    15a8:	01812403          	lw	s0,24(sp)
    15ac:	01412483          	lw	s1,20(sp)
    15b0:	01012903          	lw	s2,16(sp)
    15b4:	00098513          	mv	a0,s3
    15b8:	00c12983          	lw	s3,12(sp)
    15bc:	02010113          	addi	sp,sp,32
    15c0:	00008067          	ret
		int side = tree->lessthan_fn(node, stack[sz - 1]) ? 0 : 1;
    15c4:	00492783          	lw	a5,4(s2)
    15c8:	00048513          	mv	a0,s1
    15cc:	000780e7          	jalr	a5
		struct rbnode *ch = get_child(stack[sz - 1], side);
    15d0:	00042783          	lw	a5,0(s0)
	if (side != 0) {
    15d4:	00051e63          	bnez	a0,15f0 <find_and_stack+0x84>
		return n->children[1];
    15d8:	0047a783          	lw	a5,4(a5)
		if (ch != NULL) {
    15dc:	00440413          	addi	s0,s0,4
    15e0:	fc0782e3          	beqz	a5,15a4 <find_and_stack+0x38>
			stack[sz++] = ch;
    15e4:	00198993          	addi	s3,s3,1
    15e8:	00f42023          	sw	a5,0(s0)
    15ec:	fb1ff06f          	j	159c <find_and_stack+0x30>
	uintptr_t l = (uintptr_t) n->children[0];
    15f0:	0007a783          	lw	a5,0(a5)
	l &= ~1UL;
    15f4:	ffe7f793          	andi	a5,a5,-2
	return (struct rbnode *) l;
    15f8:	fe5ff06f          	j	15dc <find_and_stack+0x70>

000015fc <rotate>:
 */
static void rotate(struct rbnode **stack, int stacksz)
{
	CHECK(stacksz >= 2);

	struct rbnode *parent = stack[stacksz - 2];
    15fc:	00259793          	slli	a5,a1,0x2
{
    1600:	fd010113          	addi	sp,sp,-48
	struct rbnode *parent = stack[stacksz - 2];
    1604:	ff878793          	addi	a5,a5,-8
{
    1608:	01612823          	sw	s6,16(sp)
	struct rbnode *parent = stack[stacksz - 2];
    160c:	00f50b33          	add	s6,a0,a5
{
    1610:	01512a23          	sw	s5,20(sp)
	struct rbnode *parent = stack[stacksz - 2];
    1614:	000b2a83          	lw	s5,0(s6)
	struct rbnode *child = stack[stacksz - 1];
    1618:	00478793          	addi	a5,a5,4
{
    161c:	02912223          	sw	s1,36(sp)
	struct rbnode *child = stack[stacksz - 1];
    1620:	00f504b3          	add	s1,a0,a5
{
    1624:	02812423          	sw	s0,40(sp)
		return n->children[1];
    1628:	004aa783          	lw	a5,4(s5)
	struct rbnode *child = stack[stacksz - 1];
    162c:	0004a403          	lw	s0,0(s1)
{
    1630:	01312e23          	sw	s3,28(sp)
    1634:	01712623          	sw	s7,12(sp)
	return get_child(parent, 1) == child ? 1 : 0;
    1638:	40f409b3          	sub	s3,s0,a5
{
    163c:	02112623          	sw	ra,44(sp)
    1640:	03212023          	sw	s2,32(sp)
    1644:	01412c23          	sw	s4,24(sp)
	return get_child(parent, 1) == child ? 1 : 0;
    1648:	0019bb93          	seqz	s7,s3
	if (side != 0) {
    164c:	08f41c63          	bne	s0,a5,16e4 <rotate+0xe8>
		return n->children[1];
    1650:	00442a03          	lw	s4,4(s0)
	int side = get_side(parent, child);
	struct rbnode *a = get_child(child, side);
	struct rbnode *b = get_child(child, side == 0 ? 1 : 0);
    1654:	013039b3          	snez	s3,s3
	if (side != 0) {
    1658:	08f40c63          	beq	s0,a5,16f0 <rotate+0xf4>
		return n->children[1];
    165c:	00442903          	lw	s2,4(s0)

	if (stacksz >= 3) {
    1660:	00200793          	li	a5,2
    1664:	00b7de63          	bge	a5,a1,1680 <rotate+0x84>
		struct rbnode *grandparent = stack[stacksz - 3];
    1668:	ffcb2503          	lw	a0,-4(s6)

		set_child(grandparent, get_side(grandparent, parent), child);
    166c:	00040613          	mv	a2,s0
	return get_child(parent, 1) == child ? 1 : 0;
    1670:	00452583          	lw	a1,4(a0)
    1674:	415585b3          	sub	a1,a1,s5
		set_child(grandparent, get_side(grandparent, parent), child);
    1678:	0015b593          	seqz	a1,a1
    167c:	ed1ff0ef          	jal	ra,154c <set_child>
	}

	set_child(child, side, a);
    1680:	000a0613          	mv	a2,s4
    1684:	000b8593          	mv	a1,s7
    1688:	00040513          	mv	a0,s0
    168c:	ec1ff0ef          	jal	ra,154c <set_child>
	set_child(child, side == 0 ? 1 : 0, parent);
    1690:	000a8613          	mv	a2,s5
    1694:	00098593          	mv	a1,s3
    1698:	00040513          	mv	a0,s0
    169c:	eb1ff0ef          	jal	ra,154c <set_child>
	set_child(parent, side, b);
    16a0:	00090613          	mv	a2,s2
    16a4:	000b8593          	mv	a1,s7
    16a8:	000a8513          	mv	a0,s5
    16ac:	ea1ff0ef          	jal	ra,154c <set_child>
	stack[stacksz - 2] = child;
	stack[stacksz - 1] = parent;
}
    16b0:	02c12083          	lw	ra,44(sp)
	stack[stacksz - 2] = child;
    16b4:	008b2023          	sw	s0,0(s6)
}
    16b8:	02812403          	lw	s0,40(sp)
	stack[stacksz - 1] = parent;
    16bc:	0154a023          	sw	s5,0(s1)
}
    16c0:	02012903          	lw	s2,32(sp)
    16c4:	02412483          	lw	s1,36(sp)
    16c8:	01c12983          	lw	s3,28(sp)
    16cc:	01812a03          	lw	s4,24(sp)
    16d0:	01412a83          	lw	s5,20(sp)
    16d4:	01012b03          	lw	s6,16(sp)
    16d8:	00c12b83          	lw	s7,12(sp)
    16dc:	03010113          	addi	sp,sp,48
    16e0:	00008067          	ret
	uintptr_t l = (uintptr_t) n->children[0];
    16e4:	00042a03          	lw	s4,0(s0)
	l &= ~1UL;
    16e8:	ffea7a13          	andi	s4,s4,-2
	return (struct rbnode *) l;
    16ec:	f69ff06f          	j	1654 <rotate+0x58>
	uintptr_t l = (uintptr_t) n->children[0];
    16f0:	00042903          	lw	s2,0(s0)
	l &= ~1UL;
    16f4:	ffe97913          	andi	s2,s2,-2
	return (struct rbnode *) l;
    16f8:	f69ff06f          	j	1660 <rotate+0x64>

000016fc <fix_missing_black>:
 * then clean it up (replace it with a simple NULL child in the
 * parent) when finished.
 */
static void fix_missing_black(struct rbnode **stack, int stacksz,
			      struct rbnode *null_node)
{
    16fc:	fd010113          	addi	sp,sp,-48
    1700:	01712623          	sw	s7,12(sp)
	/* Loop upward until we reach the root */
	while (stacksz > 1) {
		struct rbnode *c0, *c1, *inner, *outer;
		struct rbnode *n = stack[stacksz - 1];
    1704:	40000bb7          	lui	s7,0x40000
{
    1708:	03212023          	sw	s2,32(sp)
    170c:	01612823          	sw	s6,16(sp)
    1710:	01812423          	sw	s8,8(sp)
    1714:	01a12023          	sw	s10,0(sp)
    1718:	02112623          	sw	ra,44(sp)
    171c:	02812423          	sw	s0,40(sp)
    1720:	02912223          	sw	s1,36(sp)
    1724:	01312e23          	sw	s3,28(sp)
    1728:	01412c23          	sw	s4,24(sp)
    172c:	01512a23          	sw	s5,20(sp)
    1730:	01912223          	sw	s9,4(sp)
    1734:	00050d13          	mv	s10,a0
    1738:	00058913          	mv	s2,a1
    173c:	00060b13          	mv	s6,a2
	while (stacksz > 1) {
    1740:	00100c13          	li	s8,1
		struct rbnode *n = stack[stacksz - 1];
    1744:	fffb8b93          	addi	s7,s7,-1 # 3fffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d050f7f>
	while (stacksz > 1) {
    1748:	0f2c5863          	bge	s8,s2,1838 <fix_missing_black+0x13c>
		struct rbnode *n = stack[stacksz - 1];
    174c:	01790a33          	add	s4,s2,s7
    1750:	002a1a13          	slli	s4,s4,0x2
    1754:	014d0a33          	add	s4,s10,s4
		struct rbnode *parent = stack[stacksz - 2];
    1758:	ffca2483          	lw	s1,-4(s4)
		struct rbnode *n = stack[stacksz - 1];
    175c:	000a2983          	lw	s3,0(s4)
		return n->children[1];
    1760:	0044ac83          	lw	s9,4(s1)
	return get_child(parent, 1) == child ? 1 : 0;
    1764:	41998ab3          	sub	s5,s3,s9
    1768:	001aba93          	seqz	s5,s5
	if (side != 0) {
    176c:	000c8413          	mv	s0,s9
    1770:	01999663          	bne	s3,s9,177c <fix_missing_black+0x80>
	uintptr_t l = (uintptr_t) n->children[0];
    1774:	0004a403          	lw	s0,0(s1)
	l &= ~1UL;
    1778:	ffe47413          	andi	s0,s0,-2
	return get_color(n) == BLACK;
    177c:	00042783          	lw	a5,0(s0)
		/* Guarantee the sibling is black, rotating N down a
		 * level if needed (after rotate() our parent is the
		 * child of our previous-sibling, so N is lower in the
		 * tree)
		 */
		if (!is_black(sib)) {
    1780:	0017f793          	andi	a5,a5,1
    1784:	04079063          	bnez	a5,17c4 <fix_missing_black+0xc8>
			stack[stacksz - 1] = sib;
			rotate(stack, stacksz);
    1788:	00090593          	mv	a1,s2
			stack[stacksz - 1] = sib;
    178c:	008a2023          	sw	s0,0(s4)
			rotate(stack, stacksz);
    1790:	000d0513          	mv	a0,s10
    1794:	e69ff0ef          	jal	ra,15fc <rotate>
	*p = (*p & ~1UL) | (uint8_t)color;
    1798:	0004a783          	lw	a5,0(s1)
			set_color(parent, RED);
			set_color(sib, BLACK);
			stack[stacksz++] = n;
    179c:	00190913          	addi	s2,s2,1
	*p = (*p & ~1UL) | (uint8_t)color;
    17a0:	ffe7f793          	andi	a5,a5,-2
    17a4:	00f4a023          	sw	a5,0(s1)
    17a8:	00042783          	lw	a5,0(s0)

			parent = stack[stacksz - 2];
    17ac:	000a2483          	lw	s1,0(s4)
	*p = (*p & ~1UL) | (uint8_t)color;
    17b0:	0017e793          	ori	a5,a5,1
    17b4:	00f42023          	sw	a5,0(s0)
			stack[stacksz++] = n;
    17b8:	013a2223          	sw	s3,4(s4)
	if (side != 0) {
    17bc:	07998463          	beq	s3,s9,1824 <fix_missing_black+0x128>
		return n->children[1];
    17c0:	0044a403          	lw	s0,4(s1)
	uintptr_t l = (uintptr_t) n->children[0];
    17c4:	00042a03          	lw	s4,0(s0)
		return n->children[1];
    17c8:	00442703          	lw	a4,4(s0)
	l &= ~1UL;
    17cc:	ffea7a13          	andi	s4,s4,-2
		/* Cases where the sibling has only black children
		 * have simple resolutions
		 */
		c0 = get_child(sib, 0);
		c1 = get_child(sib, 1);
		if ((c0 == NULL || is_black(c0)) && (c1 == NULL ||
    17d0:	000a0863          	beqz	s4,17e0 <fix_missing_black+0xe4>
	return get_color(n) == BLACK;
    17d4:	000a2783          	lw	a5,0(s4)
		if ((c0 == NULL || is_black(c0)) && (c1 == NULL ||
    17d8:	0017f793          	andi	a5,a5,1
    17dc:	0a078063          	beqz	a5,187c <fix_missing_black+0x180>
    17e0:	00070863          	beqz	a4,17f0 <fix_missing_black+0xf4>
	return get_color(n) == BLACK;
    17e4:	00072783          	lw	a5,0(a4)
		if ((c0 == NULL || is_black(c0)) && (c1 == NULL ||
    17e8:	0017f793          	andi	a5,a5,1
    17ec:	0e078a63          	beqz	a5,18e0 <fix_missing_black+0x1e4>
					is_black(c1))) {
			if (n == null_node) {
    17f0:	01699a63          	bne	s3,s6,1804 <fix_missing_black+0x108>
				set_child(parent, n_side, NULL);
    17f4:	00000613          	li	a2,0
    17f8:	000a8593          	mv	a1,s5
    17fc:	00048513          	mv	a0,s1
    1800:	d4dff0ef          	jal	ra,154c <set_child>
	*p = (*p & ~1UL) | (uint8_t)color;
    1804:	00042783          	lw	a5,0(s0)
    1808:	ffe7f793          	andi	a5,a5,-2
    180c:	00f42023          	sw	a5,0(s0)
	return get_color(n) == BLACK;
    1810:	0004a783          	lw	a5,0(s1)
			}

			set_color(sib, RED);
			if (is_black(parent)) {
    1814:	0017f713          	andi	a4,a5,1
    1818:	00070c63          	beqz	a4,1830 <fix_missing_black+0x134>
				/* Balance the sibling's subtree by
				 * coloring it red, then our parent
				 * has a missing black so iterate
				 * upward
				 */
				stacksz--;
    181c:	fff90913          	addi	s2,s2,-1
				continue;
    1820:	f29ff06f          	j	1748 <fix_missing_black+0x4c>
	uintptr_t l = (uintptr_t) n->children[0];
    1824:	0004a403          	lw	s0,0(s1)
	l &= ~1UL;
    1828:	ffe47413          	andi	s0,s0,-2
	return (struct rbnode *) l;
    182c:	f99ff06f          	j	17c4 <fix_missing_black+0xc8>
	*p = (*p & ~1UL) | (uint8_t)color;
    1830:	0017e793          	ori	a5,a5,1
    1834:	00f4a023          	sw	a5,0(s1)
		if (n == null_node) {
			set_child(parent, n_side, NULL);
		}
		return;
	}
}
    1838:	02c12083          	lw	ra,44(sp)
    183c:	02812403          	lw	s0,40(sp)
    1840:	02412483          	lw	s1,36(sp)
    1844:	02012903          	lw	s2,32(sp)
    1848:	01c12983          	lw	s3,28(sp)
    184c:	01812a03          	lw	s4,24(sp)
    1850:	01412a83          	lw	s5,20(sp)
    1854:	01012b03          	lw	s6,16(sp)
    1858:	00c12b83          	lw	s7,12(sp)
    185c:	00812c03          	lw	s8,8(sp)
    1860:	00412c83          	lw	s9,4(sp)
    1864:	00012d03          	lw	s10,0(sp)
    1868:	03010113          	addi	sp,sp,48
    186c:	00008067          	ret
	uintptr_t l = (uintptr_t) n->children[0];
    1870:	00042783          	lw	a5,0(s0)
	l &= ~1UL;
    1874:	ffe7f793          	andi	a5,a5,-2
	return (struct rbnode *) l;
    1878:	0600006f          	j	18d8 <fix_missing_black+0x1dc>
    187c:	000a0793          	mv	a5,s4
	if (side != 0) {
    1880:	07998663          	beq	s3,s9,18ec <fix_missing_black+0x1f0>
		return n->children[1];
    1884:	00070793          	mv	a5,a4
		if (!(outer != NULL && is_red(outer))) {
    1888:	06079263          	bnez	a5,18ec <fix_missing_black+0x1f0>
	if (side != 0) {
    188c:	01999463          	bne	s3,s9,1894 <fix_missing_black+0x198>
    1890:	00070a13          	mv	s4,a4
			stack[stacksz - 1] = sib;
    1894:	00291b93          	slli	s7,s2,0x2
    1898:	ffcb8b93          	addi	s7,s7,-4
    189c:	017d0bb3          	add	s7,s10,s7
    18a0:	008ba023          	sw	s0,0(s7)
			stack[stacksz++] = inner;
    18a4:	014ba223          	sw	s4,4(s7)
			rotate(stack, stacksz);
    18a8:	00190593          	addi	a1,s2,1
    18ac:	000d0513          	mv	a0,s10
    18b0:	d4dff0ef          	jal	ra,15fc <rotate>
	*p = (*p & ~1UL) | (uint8_t)color;
    18b4:	00042783          	lw	a5,0(s0)
    18b8:	ffe7f793          	andi	a5,a5,-2
    18bc:	00f42023          	sw	a5,0(s0)
    18c0:	000a2783          	lw	a5,0(s4)
			sib = stack[stacksz - 2];
    18c4:	000ba403          	lw	s0,0(s7)
	*p = (*p & ~1UL) | (uint8_t)color;
    18c8:	0017e793          	ori	a5,a5,1
    18cc:	00fa2023          	sw	a5,0(s4)
	if (side != 0) {
    18d0:	fb9980e3          	beq	s3,s9,1870 <fix_missing_black+0x174>
		return n->children[1];
    18d4:	00442783          	lw	a5,4(s0)
			stack[stacksz - 2] = n;
    18d8:	013ba023          	sw	s3,0(s7)
			stacksz--;
    18dc:	01c0006f          	j	18f8 <fix_missing_black+0x1fc>
	return (struct rbnode *) l;
    18e0:	000a0793          	mv	a5,s4
	if (side != 0) {
    18e4:	fb9982e3          	beq	s3,s9,1888 <fix_missing_black+0x18c>
		return n->children[1];
    18e8:	00070793          	mv	a5,a4
	return get_color(n) == RED;
    18ec:	0007a683          	lw	a3,0(a5)
		if (!(outer != NULL && is_red(outer))) {
    18f0:	0016f693          	andi	a3,a3,1
    18f4:	f8069ce3          	bnez	a3,188c <fix_missing_black+0x190>
	return ((uintptr_t)n->children[0]) & 1UL;
    18f8:	0004a703          	lw	a4,0(s1)
	*p = (*p & ~1UL) | (uint8_t)color;
    18fc:	00042683          	lw	a3,0(s0)
		rotate(stack, stacksz);
    1900:	00090593          	mv	a1,s2
	return ((uintptr_t)n->children[0]) & 1UL;
    1904:	00177713          	andi	a4,a4,1
	*p = (*p & ~1UL) | (uint8_t)color;
    1908:	ffe6f693          	andi	a3,a3,-2
    190c:	00d76733          	or	a4,a4,a3
    1910:	00e42023          	sw	a4,0(s0)
    1914:	0004a703          	lw	a4,0(s1)
		rotate(stack, stacksz);
    1918:	000d0513          	mv	a0,s10
	*p = (*p & ~1UL) | (uint8_t)color;
    191c:	00176713          	ori	a4,a4,1
    1920:	00e4a023          	sw	a4,0(s1)
    1924:	0007a703          	lw	a4,0(a5)
    1928:	00176713          	ori	a4,a4,1
    192c:	00e7a023          	sw	a4,0(a5)
		stack[stacksz - 1] = sib;
    1930:	00291793          	slli	a5,s2,0x2
    1934:	00fd07b3          	add	a5,s10,a5
    1938:	fe87ae23          	sw	s0,-4(a5)
		rotate(stack, stacksz);
    193c:	cc1ff0ef          	jal	ra,15fc <rotate>
		if (n == null_node) {
    1940:	ef699ce3          	bne	s3,s6,1838 <fix_missing_black+0x13c>
}
    1944:	02812403          	lw	s0,40(sp)
    1948:	02c12083          	lw	ra,44(sp)
    194c:	02012903          	lw	s2,32(sp)
    1950:	01c12983          	lw	s3,28(sp)
    1954:	01812a03          	lw	s4,24(sp)
    1958:	01012b03          	lw	s6,16(sp)
    195c:	00c12b83          	lw	s7,12(sp)
    1960:	00812c03          	lw	s8,8(sp)
    1964:	00412c83          	lw	s9,4(sp)
    1968:	00012d03          	lw	s10,0(sp)
			set_child(parent, n_side, NULL);
    196c:	000a8593          	mv	a1,s5
    1970:	00048513          	mv	a0,s1
}
    1974:	01412a83          	lw	s5,20(sp)
    1978:	02412483          	lw	s1,36(sp)
			set_child(parent, n_side, NULL);
    197c:	00000613          	li	a2,0
}
    1980:	03010113          	addi	sp,sp,48
			set_child(parent, n_side, NULL);
    1984:	bc9ff06f          	j	154c <set_child>

00001988 <stack_left_limb>:
 * or the root, so is_left must be false.
 */
static inline struct rbnode *stack_left_limb(struct rbnode *n,
					     struct _rb_foreach *f)
{
	f->top++;
    1988:	0085a783          	lw	a5,8(a1)
	f->stack[f->top] = n;
    198c:	0005a703          	lw	a4,0(a1)
	f->top++;
    1990:	00178793          	addi	a5,a5,1
	f->stack[f->top] = n;
    1994:	00279693          	slli	a3,a5,0x2
	f->top++;
    1998:	00f5a423          	sw	a5,8(a1)
	f->stack[f->top] = n;
    199c:	00d70733          	add	a4,a4,a3
    19a0:	00a72023          	sw	a0,0(a4)
	f->is_left[f->top] = 0;
    19a4:	0045a703          	lw	a4,4(a1)

	while ((n = get_child(n, 0)) != NULL) {
		f->top++;
		f->stack[f->top] = n;
		f->is_left[f->top] = 1;
    19a8:	00100693          	li	a3,1
	f->is_left[f->top] = 0;
    19ac:	00f707b3          	add	a5,a4,a5
    19b0:	00078023          	sb	zero,0(a5)
	uintptr_t l = (uintptr_t) n->children[0];
    19b4:	00052503          	lw	a0,0(a0)
		f->top++;
    19b8:	0085a783          	lw	a5,8(a1)
		f->stack[f->top] = n;
    19bc:	0005a703          	lw	a4,0(a1)
	l &= ~1UL;
    19c0:	ffe57513          	andi	a0,a0,-2
	while ((n = get_child(n, 0)) != NULL) {
    19c4:	00051a63          	bnez	a0,19d8 <stack_left_limb+0x50>
	}

	return f->stack[f->top];
    19c8:	00279793          	slli	a5,a5,0x2
    19cc:	00f707b3          	add	a5,a4,a5
}
    19d0:	0007a503          	lw	a0,0(a5)
    19d4:	00008067          	ret
		f->top++;
    19d8:	00178793          	addi	a5,a5,1
		f->stack[f->top] = n;
    19dc:	00279613          	slli	a2,a5,0x2
		f->top++;
    19e0:	00f5a423          	sw	a5,8(a1)
		f->stack[f->top] = n;
    19e4:	00c70733          	add	a4,a4,a2
    19e8:	00a72023          	sw	a0,0(a4)
		f->is_left[f->top] = 1;
    19ec:	0045a703          	lw	a4,4(a1)
    19f0:	00f707b3          	add	a5,a4,a5
    19f4:	00d78023          	sb	a3,0(a5)
    19f8:	fbdff06f          	j	19b4 <stack_left_limb+0x2c>

000019fc <z_rb_get_minmax>:
	for (n = tree->root; n != NULL && get_child(n, side) != NULL;
    19fc:	00052503          	lw	a0,0(a0)
    1a00:	00050863          	beqz	a0,1a10 <z_rb_get_minmax+0x14>
	if (side != 0) {
    1a04:	00058c63          	beqz	a1,1a1c <z_rb_get_minmax+0x20>
		return n->children[1];
    1a08:	00452783          	lw	a5,4(a0)
	for (n = tree->root; n != NULL && get_child(n, side) != NULL;
    1a0c:	00079463          	bnez	a5,1a14 <z_rb_get_minmax+0x18>
}
    1a10:	00008067          	ret
    1a14:	00078513          	mv	a0,a5
    1a18:	fe9ff06f          	j	1a00 <z_rb_get_minmax+0x4>
	uintptr_t l = (uintptr_t) n->children[0];
    1a1c:	00052783          	lw	a5,0(a0)
	l &= ~1UL;
    1a20:	ffe7f793          	andi	a5,a5,-2
	return (struct rbnode *) l;
    1a24:	fe9ff06f          	j	1a0c <z_rb_get_minmax+0x10>

00001a28 <rb_insert>:
{
    1a28:	fd010113          	addi	sp,sp,-48
    1a2c:	02812423          	sw	s0,40(sp)
    1a30:	03212023          	sw	s2,32(sp)
    1a34:	01312e23          	sw	s3,28(sp)
    1a38:	02112623          	sw	ra,44(sp)
    1a3c:	02912223          	sw	s1,36(sp)
    1a40:	01412c23          	sw	s4,24(sp)
    1a44:	01512a23          	sw	s5,20(sp)
    1a48:	01612823          	sw	s6,16(sp)
    1a4c:	01712623          	sw	s7,12(sp)
    1a50:	03010413          	addi	s0,sp,48
		n->children[0] = (void *) (new | (old & 1UL));
    1a54:	0005a783          	lw	a5,0(a1)
		n->children[1] = val;
    1a58:	0005a223          	sw	zero,4(a1)
{
    1a5c:	00050993          	mv	s3,a0
		n->children[0] = (void *) (new | (old & 1UL));
    1a60:	0017f793          	andi	a5,a5,1
    1a64:	00f5a023          	sw	a5,0(a1)
	if (tree->root == NULL) {
    1a68:	00052783          	lw	a5,0(a0)
{
    1a6c:	00058913          	mv	s2,a1
	if (tree->root == NULL) {
    1a70:	04079263          	bnez	a5,1ab4 <rb_insert+0x8c>
		tree->root = node;
    1a74:	00b9a023          	sw	a1,0(s3)
		tree->max_depth = 1;
    1a78:	00100793          	li	a5,1
    1a7c:	00f52423          	sw	a5,8(a0)
	*p = (*p & ~1UL) | (uint8_t)color;
    1a80:	00f5a023          	sw	a5,0(a1)
}
    1a84:	fd040113          	addi	sp,s0,-48
    1a88:	02c12083          	lw	ra,44(sp)
    1a8c:	02812403          	lw	s0,40(sp)
    1a90:	02412483          	lw	s1,36(sp)
    1a94:	02012903          	lw	s2,32(sp)
    1a98:	01c12983          	lw	s3,28(sp)
    1a9c:	01812a03          	lw	s4,24(sp)
    1aa0:	01412a83          	lw	s5,20(sp)
    1aa4:	01012b03          	lw	s6,16(sp)
    1aa8:	00c12b83          	lw	s7,12(sp)
    1aac:	03010113          	addi	sp,sp,48
    1ab0:	00008067          	ret
	struct rbnode *stack[tree->max_depth + 1];
    1ab4:	00852783          	lw	a5,8(a0)
    1ab8:	00010a93          	mv	s5,sp
    1abc:	00279793          	slli	a5,a5,0x2
    1ac0:	01378793          	addi	a5,a5,19
    1ac4:	ff07f793          	andi	a5,a5,-16
    1ac8:	40f10133          	sub	sp,sp,a5
    1acc:	00010a13          	mv	s4,sp
	int stacksz = find_and_stack(tree, node, stack);
    1ad0:	000a0613          	mv	a2,s4
    1ad4:	a99ff0ef          	jal	ra,156c <find_and_stack>
    1ad8:	00251b13          	slli	s6,a0,0x2
    1adc:	016a0b33          	add	s6,s4,s6
	struct rbnode *parent = stack[stacksz - 1];
    1ae0:	ffcb2b83          	lw	s7,-4(s6)
	int side = tree->lessthan_fn(node, parent) ? 0 : 1;
    1ae4:	0049a783          	lw	a5,4(s3)
	int stacksz = find_and_stack(tree, node, stack);
    1ae8:	00050493          	mv	s1,a0
	int side = tree->lessthan_fn(node, parent) ? 0 : 1;
    1aec:	000b8593          	mv	a1,s7
    1af0:	00090513          	mv	a0,s2
    1af4:	000780e7          	jalr	a5
    1af8:	00154593          	xori	a1,a0,1
	set_child(parent, side, node);
    1afc:	00090613          	mv	a2,s2
    1b00:	000b8513          	mv	a0,s7
    1b04:	0ff5f593          	andi	a1,a1,255
    1b08:	a45ff0ef          	jal	ra,154c <set_child>
	*p = (*p & ~1UL) | (uint8_t)color;
    1b0c:	00092783          	lw	a5,0(s2)
	stack[stacksz++] = node;
    1b10:	00148b93          	addi	s7,s1,1
    1b14:	012b2023          	sw	s2,0(s6)
	*p = (*p & ~1UL) | (uint8_t)color;
    1b18:	ffe7f793          	andi	a5,a5,-2
    1b1c:	00f92023          	sw	a5,0(s2)
	while (stacksz > 1) {
    1b20:	00249793          	slli	a5,s1,0x2
    1b24:	ffc78793          	addi	a5,a5,-4
    1b28:	00fa07b3          	add	a5,s4,a5
	stack[stacksz++] = node;
    1b2c:	000b8b13          	mv	s6,s7
	while (stacksz > 1) {
    1b30:	00100813          	li	a6,1
    1b34:	01684a63          	blt	a6,s6,1b48 <rb_insert+0x120>
	set_color(stack[0], BLACK);
    1b38:	000a2703          	lw	a4,0(s4)
	*p = (*p & ~1UL) | (uint8_t)color;
    1b3c:	00072783          	lw	a5,0(a4)
    1b40:	0017e793          	ori	a5,a5,1
    1b44:	0cc0006f          	j	1c10 <rb_insert+0x1e8>
		struct rbnode *parent = stack[stacksz - 2];
    1b48:	0007a603          	lw	a2,0(a5)
    1b4c:	00078493          	mv	s1,a5
	return get_color(n) == BLACK;
    1b50:	00062703          	lw	a4,0(a2)
		if (is_black(parent)) {
    1b54:	00177713          	andi	a4,a4,1
    1b58:	0a071e63          	bnez	a4,1c14 <rb_insert+0x1ec>
		struct rbnode *grandparent = stack[stacksz - 3];
    1b5c:	ffc7a583          	lw	a1,-4(a5)
		return n->children[1];
    1b60:	ffc78913          	addi	s2,a5,-4
    1b64:	0045a703          	lw	a4,4(a1)
	if (side != 0) {
    1b68:	00070693          	mv	a3,a4
    1b6c:	00e61663          	bne	a2,a4,1b78 <rb_insert+0x150>
	uintptr_t l = (uintptr_t) n->children[0];
    1b70:	0005a683          	lw	a3,0(a1)
	l &= ~1UL;
    1b74:	ffe6f693          	andi	a3,a3,-2
		if ((aunt != NULL) && is_red(aunt)) {
    1b78:	04068063          	beqz	a3,1bb8 <rb_insert+0x190>
	return get_color(n) == RED;
    1b7c:	0006a503          	lw	a0,0(a3)
		if ((aunt != NULL) && is_red(aunt)) {
    1b80:	ff878793          	addi	a5,a5,-8
    1b84:	00157513          	andi	a0,a0,1
    1b88:	02051863          	bnez	a0,1bb8 <rb_insert+0x190>
	*p = (*p & ~1UL) | (uint8_t)color;
    1b8c:	0005a703          	lw	a4,0(a1)
			stacksz -= 2;
    1b90:	ffeb0b13          	addi	s6,s6,-2
	*p = (*p & ~1UL) | (uint8_t)color;
    1b94:	ffe77713          	andi	a4,a4,-2
    1b98:	00e5a023          	sw	a4,0(a1)
    1b9c:	00062703          	lw	a4,0(a2)
    1ba0:	00176713          	ori	a4,a4,1
    1ba4:	00e62023          	sw	a4,0(a2)
    1ba8:	0006a703          	lw	a4,0(a3)
    1bac:	00176713          	ori	a4,a4,1
    1bb0:	00e6a023          	sw	a4,0(a3)
			continue;
    1bb4:	f81ff06f          	j	1b34 <rb_insert+0x10c>
		struct rbnode *node = stack[stacksz - 1];
    1bb8:	002b1793          	slli	a5,s6,0x2
    1bbc:	00fa07b3          	add	a5,s4,a5
	return get_child(parent, 1) == child ? 1 : 0;
    1bc0:	ffc7a783          	lw	a5,-4(a5)
    1bc4:	00462683          	lw	a3,4(a2)
    1bc8:	40e60733          	sub	a4,a2,a4
		if (parent_side != side) {
    1bcc:	00173713          	seqz	a4,a4
	return get_child(parent, 1) == child ? 1 : 0;
    1bd0:	40d787b3          	sub	a5,a5,a3
		if (parent_side != side) {
    1bd4:	0017b793          	seqz	a5,a5
    1bd8:	00f70863          	beq	a4,a5,1be8 <rb_insert+0x1c0>
			rotate(stack, stacksz);
    1bdc:	000b0593          	mv	a1,s6
    1be0:	000a0513          	mv	a0,s4
    1be4:	a19ff0ef          	jal	ra,15fc <rotate>
		rotate(stack, stacksz - 1);
    1be8:	fffb0593          	addi	a1,s6,-1
    1bec:	000a0513          	mv	a0,s4
    1bf0:	a0dff0ef          	jal	ra,15fc <rotate>
		set_color(stack[stacksz - 3], BLACK);
    1bf4:	00092703          	lw	a4,0(s2)
	*p = (*p & ~1UL) | (uint8_t)color;
    1bf8:	00072783          	lw	a5,0(a4)
    1bfc:	0017e793          	ori	a5,a5,1
    1c00:	00f72023          	sw	a5,0(a4)
		set_color(stack[stacksz - 2], RED);
    1c04:	0004a703          	lw	a4,0(s1)
	*p = (*p & ~1UL) | (uint8_t)color;
    1c08:	00072783          	lw	a5,0(a4)
    1c0c:	ffe7f793          	andi	a5,a5,-2
    1c10:	00f72023          	sw	a5,0(a4)
	if (stacksz > tree->max_depth) {
    1c14:	0089a783          	lw	a5,8(s3)
    1c18:	0177d463          	bge	a5,s7,1c20 <rb_insert+0x1f8>
		tree->max_depth = stacksz;
    1c1c:	0179a423          	sw	s7,8(s3)
	tree->root = stack[0];
    1c20:	000a2783          	lw	a5,0(s4)
    1c24:	00f9a023          	sw	a5,0(s3)
	CHECK(is_black(tree->root));
    1c28:	000a8113          	mv	sp,s5
    1c2c:	e59ff06f          	j	1a84 <rb_insert+0x5c>

00001c30 <rb_remove>:
{
    1c30:	fd010113          	addi	sp,sp,-48
    1c34:	02812423          	sw	s0,40(sp)
    1c38:	02912223          	sw	s1,36(sp)
    1c3c:	01412c23          	sw	s4,24(sp)
    1c40:	01612823          	sw	s6,16(sp)
    1c44:	01712623          	sw	s7,12(sp)
    1c48:	01812423          	sw	s8,8(sp)
    1c4c:	02112623          	sw	ra,44(sp)
    1c50:	03212023          	sw	s2,32(sp)
    1c54:	01312e23          	sw	s3,28(sp)
    1c58:	01512a23          	sw	s5,20(sp)
    1c5c:	01912223          	sw	s9,4(sp)
    1c60:	03010413          	addi	s0,sp,48
	struct rbnode *stack[tree->max_depth + 1];
    1c64:	00852783          	lw	a5,8(a0)
{
    1c68:	00010b93          	mv	s7,sp
    1c6c:	00050b13          	mv	s6,a0
	struct rbnode *stack[tree->max_depth + 1];
    1c70:	00279793          	slli	a5,a5,0x2
    1c74:	01378793          	addi	a5,a5,19
    1c78:	ff07f793          	andi	a5,a5,-16
    1c7c:	40f10133          	sub	sp,sp,a5
    1c80:	00010a13          	mv	s4,sp
	int stacksz = find_and_stack(tree, node, stack);
    1c84:	000a0613          	mv	a2,s4
{
    1c88:	00058493          	mv	s1,a1
	int stacksz = find_and_stack(tree, node, stack);
    1c8c:	8e1ff0ef          	jal	ra,156c <find_and_stack>
	if (node != stack[stacksz - 1]) {
    1c90:	00251c13          	slli	s8,a0,0x2
    1c94:	018a0c33          	add	s8,s4,s8
    1c98:	ffcc2783          	lw	a5,-4(s8)
    1c9c:	10979263          	bne	a5,s1,1da0 <rb_remove+0x170>
	uintptr_t l = (uintptr_t) n->children[0];
    1ca0:	0004a903          	lw	s2,0(s1)
    1ca4:	00050993          	mv	s3,a0
	l &= ~1UL;
    1ca8:	ffe97913          	andi	s2,s2,-2
	if (get_child(node, 0) != NULL && get_child(node, 1) != NULL) {
    1cac:	0c090463          	beqz	s2,1d74 <rb_remove+0x144>
    1cb0:	0044a783          	lw	a5,4(s1)
    1cb4:	0c078063          	beqz	a5,1d74 <rb_remove+0x144>
		hiparent = stacksz > 1 ? stack[stacksz - 2] : NULL;
    1cb8:	00100793          	li	a5,1
    1cbc:	00000513          	li	a0,0
    1cc0:	0137d463          	bge	a5,s3,1cc8 <rb_remove+0x98>
    1cc4:	ff8c2503          	lw	a0,-8(s8)
		stack[stacksz++] = node2;
    1cc8:	012c2023          	sw	s2,0(s8)
    1ccc:	00198713          	addi	a4,s3,1
		return n->children[1];
    1cd0:	00492783          	lw	a5,4(s2)
    1cd4:	00271a93          	slli	s5,a4,0x2
    1cd8:	00070993          	mv	s3,a4
			stack[stacksz++] = node2;
    1cdc:	015a0ab3          	add	s5,s4,s5
		while (get_child(node2, 1)) {
    1ce0:	0e079e63          	bnez	a5,1ddc <rb_remove+0x1ac>
		loparent = stack[stacksz - 2];
    1ce4:	ff8aac83          	lw	s9,-8(s5)
		if (hiparent != NULL) {
    1ce8:	10050263          	beqz	a0,1dec <rb_remove+0x1bc>
	return get_child(parent, 1) == child ? 1 : 0;
    1cec:	00452583          	lw	a1,4(a0)
			set_child(hiparent, get_side(hiparent, node), node2);
    1cf0:	00090613          	mv	a2,s2
	return get_child(parent, 1) == child ? 1 : 0;
    1cf4:	409585b3          	sub	a1,a1,s1
			set_child(hiparent, get_side(hiparent, node), node2);
    1cf8:	0015b593          	seqz	a1,a1
    1cfc:	851ff0ef          	jal	ra,154c <set_child>
		if (loparent == node) {
    1d00:	0f949a63          	bne	s1,s9,1df4 <rb_remove+0x1c4>
	uintptr_t l = (uintptr_t) n->children[0];
    1d04:	00092703          	lw	a4,0(s2)
		n->children[0] = (void *) (new | (old & 1UL));
    1d08:	0004a783          	lw	a5,0(s1)
	l &= ~1UL;
    1d0c:	ffe77713          	andi	a4,a4,-2
		n->children[0] = (void *) (new | (old & 1UL));
    1d10:	0017f793          	andi	a5,a5,1
    1d14:	00e7e7b3          	or	a5,a5,a4
    1d18:	00f4a023          	sw	a5,0(s1)
    1d1c:	00092783          	lw	a5,0(s2)
    1d20:	0017f793          	andi	a5,a5,1
    1d24:	00f4e7b3          	or	a5,s1,a5
    1d28:	00f92023          	sw	a5,0(s2)
		return n->children[1];
    1d2c:	0044a783          	lw	a5,4(s1)
	return ((uintptr_t)n->children[0]) & 1UL;
    1d30:	0004a683          	lw	a3,0(s1)
		n->children[1] = val;
    1d34:	00f92223          	sw	a5,4(s2)
		stack[stacksz0 - 1] = stack[stacksz - 1];
    1d38:	ffcaa703          	lw	a4,-4(s5)
		tmp = stack[stacksz0 - 1];
    1d3c:	ffcc2783          	lw	a5,-4(s8)
		n->children[1] = val;
    1d40:	0004a223          	sw	zero,4(s1)
		stack[stacksz0 - 1] = stack[stacksz - 1];
    1d44:	feec2e23          	sw	a4,-4(s8)
		stack[stacksz - 1] = tmp;
    1d48:	fefaae23          	sw	a5,-4(s5)
	return ((uintptr_t)n->children[0]) & 1UL;
    1d4c:	00092703          	lw	a4,0(s2)
	*p = (*p & ~1UL) | (uint8_t)color;
    1d50:	ffe6f793          	andi	a5,a3,-2
	return ((uintptr_t)n->children[0]) & 1UL;
    1d54:	0016f693          	andi	a3,a3,1
    1d58:	00177713          	andi	a4,a4,1
	*p = (*p & ~1UL) | (uint8_t)color;
    1d5c:	00f76733          	or	a4,a4,a5
    1d60:	00e4a023          	sw	a4,0(s1)
    1d64:	00092783          	lw	a5,0(s2)
    1d68:	ffe7f793          	andi	a5,a5,-2
    1d6c:	00d7e7b3          	or	a5,a5,a3
    1d70:	00f92023          	sw	a5,0(s2)
	uintptr_t l = (uintptr_t) n->children[0];
    1d74:	0004a783          	lw	a5,0(s1)
	l &= ~1UL;
    1d78:	ffe7f913          	andi	s2,a5,-2
	if (child == NULL) {
    1d7c:	00091463          	bnez	s2,1d84 <rb_remove+0x154>
		return n->children[1];
    1d80:	0044a903          	lw	s2,4(s1)
	if (stacksz < 2) {
    1d84:	00100713          	li	a4,1
    1d88:	0b374c63          	blt	a4,s3,1e40 <rb_remove+0x210>
		tree->root = child;
    1d8c:	012b2023          	sw	s2,0(s6)
		if (child != NULL) {
    1d90:	0a090463          	beqz	s2,1e38 <rb_remove+0x208>
	*p = (*p & ~1UL) | (uint8_t)color;
    1d94:	00092783          	lw	a5,0(s2)
    1d98:	0017e793          	ori	a5,a5,1
    1d9c:	00f92023          	sw	a5,0(s2)
    1da0:	000b8113          	mv	sp,s7
}
    1da4:	fd040113          	addi	sp,s0,-48
    1da8:	02c12083          	lw	ra,44(sp)
    1dac:	02812403          	lw	s0,40(sp)
    1db0:	02412483          	lw	s1,36(sp)
    1db4:	02012903          	lw	s2,32(sp)
    1db8:	01c12983          	lw	s3,28(sp)
    1dbc:	01812a03          	lw	s4,24(sp)
    1dc0:	01412a83          	lw	s5,20(sp)
    1dc4:	01012b03          	lw	s6,16(sp)
    1dc8:	00c12b83          	lw	s7,12(sp)
    1dcc:	00812c03          	lw	s8,8(sp)
    1dd0:	00412c83          	lw	s9,4(sp)
    1dd4:	03010113          	addi	sp,sp,48
    1dd8:	00008067          	ret
			stack[stacksz++] = node2;
    1ddc:	00faa023          	sw	a5,0(s5)
    1de0:	00170713          	addi	a4,a4,1
    1de4:	00078913          	mv	s2,a5
    1de8:	ee9ff06f          	j	1cd0 <rb_remove+0xa0>
			tree->root = node2;
    1dec:	012b2023          	sw	s2,0(s6)
    1df0:	f11ff06f          	j	1d00 <rb_remove+0xd0>
	return get_child(parent, 1) == child ? 1 : 0;
    1df4:	004ca583          	lw	a1,4(s9)
			set_child(loparent, get_side(loparent, node2), node);
    1df8:	00048613          	mv	a2,s1
    1dfc:	000c8513          	mv	a0,s9
	return get_child(parent, 1) == child ? 1 : 0;
    1e00:	412585b3          	sub	a1,a1,s2
			set_child(loparent, get_side(loparent, node2), node);
    1e04:	0015b593          	seqz	a1,a1
    1e08:	f44ff0ef          	jal	ra,154c <set_child>
	uintptr_t l = (uintptr_t) n->children[0];
    1e0c:	0004a703          	lw	a4,0(s1)
    1e10:	00092683          	lw	a3,0(s2)
		n->children[0] = (void *) (new | (old & 1UL));
    1e14:	00177793          	andi	a5,a4,1
	l &= ~1UL;
    1e18:	ffe6f693          	andi	a3,a3,-2
		n->children[0] = (void *) (new | (old & 1UL));
    1e1c:	00d7e7b3          	or	a5,a5,a3
    1e20:	00f4a023          	sw	a5,0(s1)
    1e24:	00092783          	lw	a5,0(s2)
	l &= ~1UL;
    1e28:	ffe77713          	andi	a4,a4,-2
		n->children[0] = (void *) (new | (old & 1UL));
    1e2c:	0017f793          	andi	a5,a5,1
    1e30:	00e7e7b3          	or	a5,a5,a4
    1e34:	ef5ff06f          	j	1d28 <rb_remove+0xf8>
			tree->max_depth = 0;
    1e38:	000b2423          	sw	zero,8(s6)
    1e3c:	f65ff06f          	j	1da0 <rb_remove+0x170>
	struct rbnode *parent = stack[stacksz - 2];
    1e40:	00299a93          	slli	s5,s3,0x2
    1e44:	015a0ab3          	add	s5,s4,s5
    1e48:	ff8aa503          	lw	a0,-8(s5)
	if (child == NULL) {
    1e4c:	02091863          	bnez	s2,1e7c <rb_remove+0x24c>
		if (is_black(node)) {
    1e50:	0017f793          	andi	a5,a5,1
			fix_missing_black(stack, stacksz, node);
    1e54:	00048613          	mv	a2,s1
		if (is_black(node)) {
    1e58:	06079463          	bnez	a5,1ec0 <rb_remove+0x290>
	return get_child(parent, 1) == child ? 1 : 0;
    1e5c:	00452583          	lw	a1,4(a0)
			set_child(parent, get_side(parent, node), NULL);
    1e60:	00000613          	li	a2,0
	return get_child(parent, 1) == child ? 1 : 0;
    1e64:	409585b3          	sub	a1,a1,s1
			set_child(parent, get_side(parent, node), NULL);
    1e68:	0015b593          	seqz	a1,a1
    1e6c:	ee0ff0ef          	jal	ra,154c <set_child>
	tree->root = stack[0];
    1e70:	000a2783          	lw	a5,0(s4)
    1e74:	00fb2023          	sw	a5,0(s6)
    1e78:	f29ff06f          	j	1da0 <rb_remove+0x170>
	return get_child(parent, 1) == child ? 1 : 0;
    1e7c:	00452583          	lw	a1,4(a0)
		set_child(parent, get_side(parent, node), child);
    1e80:	00090613          	mv	a2,s2
	return get_child(parent, 1) == child ? 1 : 0;
    1e84:	409585b3          	sub	a1,a1,s1
		set_child(parent, get_side(parent, node), child);
    1e88:	0015b593          	seqz	a1,a1
    1e8c:	ec0ff0ef          	jal	ra,154c <set_child>
	return get_color(n) == RED;
    1e90:	0004a783          	lw	a5,0(s1)
		if (is_red(node) || is_red(child)) {
    1e94:	0017f793          	andi	a5,a5,1
    1e98:	00078863          	beqz	a5,1ea8 <rb_remove+0x278>
	return get_color(n) == RED;
    1e9c:	00092783          	lw	a5,0(s2)
		if (is_red(node) || is_red(child)) {
    1ea0:	0017f793          	andi	a5,a5,1
    1ea4:	00079a63          	bnez	a5,1eb8 <rb_remove+0x288>
	*p = (*p & ~1UL) | (uint8_t)color;
    1ea8:	00092783          	lw	a5,0(s2)
    1eac:	0017e793          	ori	a5,a5,1
    1eb0:	00f92023          	sw	a5,0(s2)
}
    1eb4:	fbdff06f          	j	1e70 <rb_remove+0x240>
			stack[stacksz - 1] = child;
    1eb8:	ff2aae23          	sw	s2,-4(s5)
			fix_missing_black(stack, stacksz, NULL);
    1ebc:	00000613          	li	a2,0
    1ec0:	00098593          	mv	a1,s3
    1ec4:	000a0513          	mv	a0,s4
    1ec8:	835ff0ef          	jal	ra,16fc <fix_missing_black>
    1ecc:	fa5ff06f          	j	1e70 <rb_remove+0x240>

00001ed0 <z_rb_foreach_next>:
 */
struct rbnode *z_rb_foreach_next(struct rbtree *tree, struct _rb_foreach *f)
{
	struct rbnode *n;

	if (tree->root == NULL) {
    1ed0:	00052503          	lw	a0,0(a0)
{
    1ed4:	00058793          	mv	a5,a1
	if (tree->root == NULL) {
    1ed8:	00051663          	bnez	a0,1ee4 <z_rb_foreach_next+0x14>
		return NULL;
    1edc:	00000513          	li	a0,0
    1ee0:	00008067          	ret
	}

	/* Initialization condition, pick the leftmost child of the
	 * root as our first node, initializing the stack on the way.
	 */
	if (f->top == -1) {
    1ee4:	0085a683          	lw	a3,8(a1)
    1ee8:	fff00713          	li	a4,-1
    1eec:	00e69463          	bne	a3,a4,1ef4 <z_rb_foreach_next+0x24>
	/* The next child from a given node is the leftmost child of
	 * it's right subtree if it has a right child
	 */
	n = get_child(f->stack[f->top], 1);
	if (n != NULL) {
		return stack_left_limb(n, f);
    1ef0:	a99ff06f          	j	1988 <stack_left_limb>
	n = get_child(f->stack[f->top], 1);
    1ef4:	0005a603          	lw	a2,0(a1)
    1ef8:	00269713          	slli	a4,a3,0x2
    1efc:	00e60733          	add	a4,a2,a4
		return n->children[1];
    1f00:	00072503          	lw	a0,0(a4)
    1f04:	00452503          	lw	a0,4(a0)
	if (n != NULL) {
    1f08:	fe0514e3          	bnez	a0,1ef0 <z_rb_foreach_next+0x20>
	/* Otherwise if the node is a left child of its parent, the
	 * next node is the parent (note that the root is stacked
	 * above with is_left set to 0, so this condition still works
	 * even if node has no parent).
	 */
	if (f->is_left[f->top] != 0) {
    1f0c:	0045a583          	lw	a1,4(a1)
    1f10:	00d58533          	add	a0,a1,a3
    1f14:	00054503          	lbu	a0,0(a0)
    1f18:	00050c63          	beqz	a0,1f30 <z_rb_foreach_next+0x60>
		return f->stack[--f->top];
    1f1c:	fff68693          	addi	a3,a3,-1
    1f20:	ffc72503          	lw	a0,-4(a4)
    1f24:	00d7a423          	sw	a3,8(a5)
    1f28:	00008067          	ret
	/* If we had no left tree and are a right child then our
	 * parent was already walked, so walk up the stack looking for
	 * a left child (whose parent is unwalked, and thus next).
	 */
	while ((f->top > 0) && (f->is_left[f->top] == 0)) {
		f->top--;
    1f2c:	00e7a423          	sw	a4,8(a5)
	while ((f->top > 0) && (f->is_left[f->top] == 0)) {
    1f30:	0087a683          	lw	a3,8(a5)
		f->top--;
    1f34:	fff68713          	addi	a4,a3,-1
	while ((f->top > 0) && (f->is_left[f->top] == 0)) {
    1f38:	00d05863          	blez	a3,1f48 <z_rb_foreach_next+0x78>
    1f3c:	00d586b3          	add	a3,a1,a3
    1f40:	0006c683          	lbu	a3,0(a3)
    1f44:	fe0684e3          	beqz	a3,1f2c <z_rb_foreach_next+0x5c>
	}

	f->top--;
    1f48:	00e7a423          	sw	a4,8(a5)
	return f->top >= 0 ? f->stack[f->top] : NULL;
    1f4c:	f80748e3          	bltz	a4,1edc <z_rb_foreach_next+0xc>
    1f50:	00271713          	slli	a4,a4,0x2
    1f54:	00e60733          	add	a4,a2,a4
    1f58:	00072503          	lw	a0,0(a4)
}
    1f5c:	00008067          	ret

00001f60 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    1f60:	ff010113          	addi	sp,sp,-16
    1f64:	00050793          	mv	a5,a0
    1f68:	00058513          	mv	a0,a1
    1f6c:	00060593          	mv	a1,a2
	entry(p1, p2, p3);
    1f70:	00068613          	mv	a2,a3
{
    1f74:	00112623          	sw	ra,12(sp)
	entry(p1, p2, p3);
    1f78:	000780e7          	jalr	a5
	return z_impl_k_current_get();
    1f7c:	1a9030ef          	jal	ra,5924 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    1f80:	639030ef          	jal	ra,5db8 <z_impl_k_thread_abort>

00001f84 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    1f84:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    1f88:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    1f8c:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    1f90:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    1f94:	00f76a63          	bltu	a4,a5,1fa8 <chunk_field+0x24>
		return ((uint32_t *)cmem)[f];
    1f98:	00261613          	slli	a2,a2,0x2
    1f9c:	00c585b3          	add	a1,a1,a2
    1fa0:	0005a503          	lw	a0,0(a1)
    1fa4:	00008067          	ret
	} else {
		return ((uint16_t *)cmem)[f];
    1fa8:	00161613          	slli	a2,a2,0x1
    1fac:	00c585b3          	add	a1,a1,a2
    1fb0:	0005d503          	lhu	a0,0(a1)
	}
}
    1fb4:	00008067          	ret

00001fb8 <chunk_set>:
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    1fb8:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    1fbc:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    1fc0:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    1fc4:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    1fc8:	00f76a63          	bltu	a4,a5,1fdc <chunk_set+0x24>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    1fcc:	00261613          	slli	a2,a2,0x2
    1fd0:	00c585b3          	add	a1,a1,a2
    1fd4:	00d5a023          	sw	a3,0(a1)
    1fd8:	00008067          	ret
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    1fdc:	00161613          	slli	a2,a2,0x1
    1fe0:	00c585b3          	add	a1,a1,a2
    1fe4:	00d59023          	sh	a3,0(a1)
	}
}
    1fe8:	00008067          	ret

00001fec <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    1fec:	ff010113          	addi	sp,sp,-16
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    1ff0:	00100613          	li	a2,1
{
    1ff4:	00112623          	sw	ra,12(sp)
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    1ff8:	f8dff0ef          	jal	ra,1f84 <chunk_field>
}
    1ffc:	00c12083          	lw	ra,12(sp)
    2000:	00155513          	srli	a0,a0,0x1
    2004:	01010113          	addi	sp,sp,16
    2008:	00008067          	ret

0000200c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    200c:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    2010:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    2014:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    2018:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    201c:	02f76063          	bltu	a4,a5,203c <set_chunk_used+0x30>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    2020:	0045a783          	lw	a5,4(a1)
		if (used) {
    2024:	00060863          	beqz	a2,2034 <set_chunk_used+0x28>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    2028:	0017e793          	ori	a5,a5,1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    202c:	00f5a223          	sw	a5,4(a1)
    2030:	00008067          	ret
    2034:	ffe7f793          	andi	a5,a5,-2
    2038:	ff5ff06f          	j	202c <set_chunk_used+0x20>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    203c:	0025d783          	lhu	a5,2(a1)
		if (used) {
    2040:	00060863          	beqz	a2,2050 <set_chunk_used+0x44>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    2044:	0017e793          	ori	a5,a5,1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    2048:	00f59123          	sh	a5,2(a1)
		}
	}
}
    204c:	00008067          	ret
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    2050:	ffe7f793          	andi	a5,a5,-2
    2054:	ff5ff06f          	j	2048 <set_chunk_used+0x3c>

00002058 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2058:	00161693          	slli	a3,a2,0x1
    205c:	00100613          	li	a2,1
    2060:	f59ff06f          	j	1fb8 <chunk_set>

00002064 <bytes_to_chunksz.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    2064:	000087b7          	lui	a5,0x8
    2068:	00f57c63          	bgeu	a0,a5,2080 <bytes_to_chunksz.isra.0+0x1c>
    206c:	00400513          	li	a0,4
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    2070:	00758593          	addi	a1,a1,7
    2074:	00a58533          	add	a0,a1,a0
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
    2078:	00355513          	srli	a0,a0,0x3
    207c:	00008067          	ret
	return big_heap(h) ? 8 : 4;
    2080:	00800513          	li	a0,8
    2084:	fedff06f          	j	2070 <bytes_to_chunksz.isra.0+0xc>

00002088 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
    2088:	ff010113          	addi	sp,sp,-16
    208c:	00812423          	sw	s0,8(sp)
    2090:	00058413          	mv	s0,a1
    2094:	00100593          	li	a1,1
    2098:	00112623          	sw	ra,12(sp)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    209c:	00140413          	addi	s0,s0,1
    20a0:	fc5ff0ef          	jal	ra,2064 <bytes_to_chunksz.isra.0>
	return 31 - __builtin_clz(usable_sz);
    20a4:	40a40533          	sub	a0,s0,a0
    20a8:	9d4fe0ef          	jal	ra,27c <__clzsi2>
}
    20ac:	00c12083          	lw	ra,12(sp)
    20b0:	00812403          	lw	s0,8(sp)
    20b4:	01f00793          	li	a5,31
    20b8:	40a78533          	sub	a0,a5,a0
    20bc:	01010113          	addi	sp,sp,16
    20c0:	00008067          	ret

000020c4 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    20c4:	fe010113          	addi	sp,sp,-32
    20c8:	01212823          	sw	s2,16(sp)
	return big_heap_chunks(h->len);
    20cc:	00852903          	lw	s2,8(a0)
    20d0:	00812c23          	sw	s0,24(sp)
    20d4:	00912a23          	sw	s1,20(sp)
    20d8:	00112e23          	sw	ra,28(sp)
    20dc:	00058493          	mv	s1,a1
    20e0:	01312623          	sw	s3,12(sp)
    20e4:	00050413          	mv	s0,a0
	return big_heap(h) && chunk_size(h, c) == 1;
    20e8:	f05ff0ef          	jal	ra,1fec <chunk_size>
    20ec:	000087b7          	lui	a5,0x8
    20f0:	00050593          	mv	a1,a0
    20f4:	00f96663          	bltu	s2,a5,2100 <free_list_add+0x3c>
	if (!solo_free_header(h, c)) {
    20f8:	00100793          	li	a5,1
    20fc:	0cf50a63          	beq	a0,a5,21d0 <free_list_add+0x10c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    2100:	00090513          	mv	a0,s2
    2104:	f85ff0ef          	jal	ra,2088 <bucket_idx.isra.0>
	if (b->next == 0) {
    2108:	00251793          	slli	a5,a0,0x2
    210c:	00f407b3          	add	a5,s0,a5
    2110:	0107a903          	lw	s2,16(a5) # 8010 <stacks+0x400>
    2114:	04091e63          	bnez	s2,2170 <free_list_add+0xac>
		h->avail_buckets |= (1 << bidx);
    2118:	00100713          	li	a4,1
    211c:	00a71733          	sll	a4,a4,a0
    2120:	00c42503          	lw	a0,12(s0)
	chunk_set(h, c, FREE_PREV, prev);
    2124:	00048693          	mv	a3,s1
    2128:	00200613          	li	a2,2
    212c:	00e56533          	or	a0,a0,a4
    2130:	00a42623          	sw	a0,12(s0)
    2134:	00048593          	mv	a1,s1
		b->next = c;
    2138:	0097a823          	sw	s1,16(a5)
    213c:	00040513          	mv	a0,s0
    2140:	e79ff0ef          	jal	ra,1fb8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    2144:	00048693          	mv	a3,s1
    2148:	00300613          	li	a2,3
    214c:	00048593          	mv	a1,s1
	chunk_set(h, c, FREE_PREV, prev);
    2150:	00040513          	mv	a0,s0
		free_list_add_bidx(h, c, bidx);
	}
}
    2154:	01812403          	lw	s0,24(sp)
    2158:	01c12083          	lw	ra,28(sp)
    215c:	01412483          	lw	s1,20(sp)
    2160:	01012903          	lw	s2,16(sp)
    2164:	00c12983          	lw	s3,12(sp)
    2168:	02010113          	addi	sp,sp,32
    216c:	e4dff06f          	j	1fb8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    2170:	00200613          	li	a2,2
    2174:	00090593          	mv	a1,s2
    2178:	00040513          	mv	a0,s0
    217c:	e09ff0ef          	jal	ra,1f84 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    2180:	00050693          	mv	a3,a0
	return chunk_field(h, c, FREE_PREV);
    2184:	00050993          	mv	s3,a0
	chunk_set(h, c, FREE_PREV, prev);
    2188:	00200613          	li	a2,2
    218c:	00048593          	mv	a1,s1
    2190:	00040513          	mv	a0,s0
    2194:	e25ff0ef          	jal	ra,1fb8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    2198:	00090693          	mv	a3,s2
    219c:	00300613          	li	a2,3
    21a0:	00048593          	mv	a1,s1
    21a4:	00040513          	mv	a0,s0
    21a8:	e11ff0ef          	jal	ra,1fb8 <chunk_set>
    21ac:	00048693          	mv	a3,s1
    21b0:	00300613          	li	a2,3
    21b4:	00098593          	mv	a1,s3
    21b8:	00040513          	mv	a0,s0
    21bc:	dfdff0ef          	jal	ra,1fb8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    21c0:	00048693          	mv	a3,s1
    21c4:	00200613          	li	a2,2
    21c8:	00090593          	mv	a1,s2
    21cc:	f85ff06f          	j	2150 <free_list_add+0x8c>
    21d0:	01c12083          	lw	ra,28(sp)
    21d4:	01812403          	lw	s0,24(sp)
    21d8:	01412483          	lw	s1,20(sp)
    21dc:	01012903          	lw	s2,16(sp)
    21e0:	00c12983          	lw	s3,12(sp)
    21e4:	02010113          	addi	sp,sp,32
    21e8:	00008067          	ret

000021ec <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    21ec:	fe010113          	addi	sp,sp,-32
    21f0:	00912a23          	sw	s1,20(sp)
    21f4:	01212823          	sw	s2,16(sp)
    21f8:	01312623          	sw	s3,12(sp)
    21fc:	00060913          	mv	s2,a2
    2200:	00112e23          	sw	ra,28(sp)
    2204:	00812c23          	sw	s0,24(sp)
    2208:	01412423          	sw	s4,8(sp)
	return big_heap_bytes(size) ? 8 : 4;
    220c:	000407b7          	lui	a5,0x40
    2210:	00050993          	mv	s3,a0
    2214:	00058493          	mv	s1,a1
    2218:	00800613          	li	a2,8
    221c:	04f97663          	bgeu	s2,a5,2268 <sys_heap_init+0x7c>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2220:	00400793          	li	a5,4
    2224:	00400613          	li	a2,4
    2228:	0527e063          	bltu	a5,s2,2268 <sys_heap_init+0x7c>
    222c:	00007437          	lui	s0,0x7
    2230:	000075b7          	lui	a1,0x7
    2234:	00007537          	lui	a0,0x7
    2238:	f4840613          	addi	a2,s0,-184 # 6f48 <forks+0x8c>
    223c:	12e00693          	li	a3,302
    2240:	03c58593          	addi	a1,a1,60 # 703c <forks+0x180>
    2244:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    2248:	ac8ff0ef          	jal	ra,1510 <printk>
    224c:	00007537          	lui	a0,0x7
    2250:	06050513          	addi	a0,a0,96 # 7060 <forks+0x1a4>
    2254:	abcff0ef          	jal	ra,1510 <printk>
    2258:	12e00593          	li	a1,302
    225c:	f4840513          	addi	a0,s0,-184
    2260:	1a8000ef          	jal	ra,2408 <assert_post_action>
    2264:	00400613          	li	a2,4
	bytes -= heap_footer_bytes(bytes);
    2268:	40c90933          	sub	s2,s2,a2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    226c:	00748413          	addi	s0,s1,7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2270:	012484b3          	add	s1,s1,s2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2274:	ff847413          	andi	s0,s0,-8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2278:	ff84f493          	andi	s1,s1,-8
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    227c:	408484b3          	sub	s1,s1,s0

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2280:	01700793          	li	a5,23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    2284:	0034d913          	srli	s2,s1,0x3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2288:	0297ee63          	bltu	a5,s1,22c4 <sys_heap_init+0xd8>
    228c:	000074b7          	lui	s1,0x7
    2290:	000075b7          	lui	a1,0x7
    2294:	00007537          	lui	a0,0x7
    2298:	07c58593          	addi	a1,a1,124 # 707c <forks+0x1c0>
    229c:	13700693          	li	a3,311
    22a0:	f4848613          	addi	a2,s1,-184 # 6f48 <forks+0x8c>
    22a4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    22a8:	a68ff0ef          	jal	ra,1510 <printk>
    22ac:	00007537          	lui	a0,0x7
    22b0:	06050513          	addi	a0,a0,96 # 7060 <forks+0x1a4>
    22b4:	a5cff0ef          	jal	ra,1510 <printk>
    22b8:	13700593          	li	a1,311
    22bc:	f4848513          	addi	a0,s1,-184
    22c0:	148000ef          	jal	ra,2408 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    22c4:	0089a023          	sw	s0,0(s3)
	h->chunk0_hdr_area = 0;
    22c8:	00000793          	li	a5,0
    22cc:	00000813          	li	a6,0
    22d0:	00f42023          	sw	a5,0(s0)
    22d4:	01042223          	sw	a6,4(s0)
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    22d8:	00090593          	mv	a1,s2
	h->len = buf_sz;
    22dc:	01242423          	sw	s2,8(s0)
	h->avail_buckets = 0;
    22e0:	00042623          	sw	zero,12(s0)
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    22e4:	00090513          	mv	a0,s2
    22e8:	da1ff0ef          	jal	ra,2088 <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    22ec:	00251493          	slli	s1,a0,0x2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    22f0:	00150a13          	addi	s4,a0,1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    22f4:	01b48493          	addi	s1,s1,27
    22f8:	00100593          	li	a1,1
    22fc:	00090513          	mv	a0,s2
    2300:	0034d493          	srli	s1,s1,0x3
	return bytes_to_chunksz(h, 1);
    2304:	d61ff0ef          	jal	ra,2064 <bytes_to_chunksz.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    2308:	00a48533          	add	a0,s1,a0
    230c:	03256e63          	bltu	a0,s2,2348 <sys_heap_init+0x15c>
    2310:	000079b7          	lui	s3,0x7
    2314:	000075b7          	lui	a1,0x7
    2318:	00007537          	lui	a0,0x7
    231c:	0a458593          	addi	a1,a1,164 # 70a4 <forks+0x1e8>
    2320:	14300693          	li	a3,323
    2324:	f4898613          	addi	a2,s3,-184 # 6f48 <forks+0x8c>
    2328:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    232c:	9e4ff0ef          	jal	ra,1510 <printk>
    2330:	00007537          	lui	a0,0x7
    2334:	06050513          	addi	a0,a0,96 # 7060 <forks+0x1a4>
    2338:	9d8ff0ef          	jal	ra,1510 <printk>
    233c:	14300593          	li	a1,323
    2340:	f4898513          	addi	a0,s3,-184
    2344:	0c4000ef          	jal	ra,2408 <assert_post_action>
    2348:	01040713          	addi	a4,s0,16
	return big_heap_bytes(size) ? 8 : 4;
    234c:	00000793          	li	a5,0

	for (int i = 0; i < nb_buckets; i++) {
    2350:	0b47c463          	blt	a5,s4,23f8 <sys_heap_init+0x20c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    2354:	00048613          	mv	a2,s1
    2358:	00040513          	mv	a0,s0
    235c:	00000593          	li	a1,0
    2360:	cf9ff0ef          	jal	ra,2058 <set_chunk_size>
	set_chunk_used(h, 0, true);
    2364:	00040513          	mv	a0,s0
    2368:	00100613          	li	a2,1
    236c:	00000593          	li	a1,0
    2370:	c9dff0ef          	jal	ra,200c <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    2374:	409909b3          	sub	s3,s2,s1
    2378:	00098613          	mv	a2,s3
    237c:	00048593          	mv	a1,s1
    2380:	00040513          	mv	a0,s0
    2384:	cd5ff0ef          	jal	ra,2058 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    2388:	00048693          	mv	a3,s1
    238c:	00048593          	mv	a1,s1
    2390:	00040513          	mv	a0,s0
    2394:	00000613          	li	a2,0
    2398:	c21ff0ef          	jal	ra,1fb8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    239c:	00090593          	mv	a1,s2
    23a0:	00040513          	mv	a0,s0
    23a4:	00000613          	li	a2,0
    23a8:	cb1ff0ef          	jal	ra,2058 <set_chunk_size>
    23ac:	00098693          	mv	a3,s3
    23b0:	00090593          	mv	a1,s2
    23b4:	00040513          	mv	a0,s0
    23b8:	00000613          	li	a2,0
    23bc:	bfdff0ef          	jal	ra,1fb8 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    23c0:	00090593          	mv	a1,s2
    23c4:	00040513          	mv	a0,s0
    23c8:	00100613          	li	a2,1
    23cc:	c41ff0ef          	jal	ra,200c <set_chunk_used>

	free_list_add(h, chunk0_size);
    23d0:	00040513          	mv	a0,s0
}
    23d4:	01812403          	lw	s0,24(sp)
    23d8:	01c12083          	lw	ra,28(sp)
    23dc:	01012903          	lw	s2,16(sp)
    23e0:	00c12983          	lw	s3,12(sp)
    23e4:	00812a03          	lw	s4,8(sp)
	free_list_add(h, chunk0_size);
    23e8:	00048593          	mv	a1,s1
}
    23ec:	01412483          	lw	s1,20(sp)
    23f0:	02010113          	addi	sp,sp,32
	free_list_add(h, chunk0_size);
    23f4:	cd1ff06f          	j	20c4 <free_list_add>
		h->buckets[i].next = 0;
    23f8:	00072023          	sw	zero,0(a4)
	for (int i = 0; i < nb_buckets; i++) {
    23fc:	00178793          	addi	a5,a5,1 # 40001 <_end+0x363f1>
    2400:	00470713          	addi	a4,a4,4
    2404:	f4dff06f          	j	2350 <sys_heap_init+0x164>

00002408 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    2408:	000075b7          	lui	a1,0x7
    240c:	00007537          	lui	a0,0x7
{
    2410:	ff010113          	addi	sp,sp,-16
	k_panic();
    2414:	0d058593          	addi	a1,a1,208 # 70d0 <forks+0x214>
    2418:	f9450513          	addi	a0,a0,-108 # 6f94 <forks+0xd8>
    241c:	02d00613          	li	a2,45
{
    2420:	00112623          	sw	ra,12(sp)
	k_panic();
    2424:	8ecff0ef          	jal	ra,1510 <printk>
}
    2428:	00c12083          	lw	ra,12(sp)
	k_panic();
    242c:	00000593          	li	a1,0
    2430:	00400513          	li	a0,4
}
    2434:	01010113          	addi	sp,sp,16
	k_panic();
    2438:	06c0106f          	j	34a4 <z_fatal_error>

0000243c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    243c:	00008067          	ret

00002440 <soc_interrupt_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;
	ulong_t mstatus;

	__asm__ volatile ("csrrc %0, mstatus, %1"
    2440:	00800793          	li	a5,8
    2444:	3007b7f3          	csrrc	a5,mstatus,a5
void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
    2448:	30405073          	csrwi	mie,0
    244c:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
    2450:	00008067          	ret

00002454 <fix_baud_rate>:
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    2454:	800017b7          	lui	a5,0x80001
    2458:	03c7a783          	lw	a5,60(a5) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>

	/*
	 * calculate baud rate divisor. a variant of
	 * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)
	 */
	divisor = ((sys_clk_freq + (baud_rate << 3))
    245c:	000e1737          	lui	a4,0xe1
	return *(volatile uint8_t *)addr;
    2460:	800026b7          	lui	a3,0x80002
    2464:	00e787b3          	add	a5,a5,a4
		   / baud_rate) >> 4;
    2468:	0001c737          	lui	a4,0x1c
    246c:	20070713          	addi	a4,a4,512 # 1c200 <_end+0x125f0>
    2470:	02e7d7b3          	divu	a5,a5,a4
    2474:	00c6c703          	lbu	a4,12(a3) # 8000200c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000200d>
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);

	sys_write8(lcr_cache, REG_LCR);

	return 0;
}
    2478:	00000513          	li	a0,0
    247c:	0ff77613          	andi	a2,a4,255
	sys_write8(lcr_cache | LCR_DLAB, REG_LCR);
    2480:	f8076713          	ori	a4,a4,-128
    2484:	0ff77713          	andi	a4,a4,255
	*(volatile uint8_t *)addr = data;
    2488:	00e68623          	sb	a4,12(a3)
	divisor = ((sys_clk_freq + (baud_rate << 3))
    248c:	0047d713          	srli	a4,a5,0x4
	sys_write8( divisor       & 0xff, REG_BRDL);
    2490:	0ff77713          	andi	a4,a4,255
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);
    2494:	00c7d793          	srli	a5,a5,0xc
    2498:	00e68023          	sb	a4,0(a3)
    249c:	0ff7f793          	andi	a5,a5,255
    24a0:	00f68223          	sb	a5,4(a3)
    24a4:	00c68623          	sb	a2,12(a3)
}
    24a8:	00008067          	ret

000024ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    24ac:	ff010113          	addi	sp,sp,-16
    24b0:	00112623          	sw	ra,12(sp)
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    24b4:	00007537          	lui	a0,0x7
    24b8:	10850513          	addi	a0,a0,264 # 7108 <led0_dev_cfg+0xc>
    24bc:	72d000ef          	jal	ra,33e8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    24c0:	000077b7          	lui	a5,0x7
    24c4:	72a7a423          	sw	a0,1832(a5) # 7728 <uart_console_dev>
	__printk_hook_install(console_out);
    24c8:	00002537          	lui	a0,0x2
    24cc:	4e450513          	addi	a0,a0,1252 # 24e4 <console_out>
    24d0:	c79fe0ef          	jal	ra,1148 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    24d4:	00c12083          	lw	ra,12(sp)
    24d8:	00000513          	li	a0,0
    24dc:	01010113          	addi	sp,sp,16
    24e0:	00008067          	ret

000024e4 <console_out>:
{
    24e4:	ff010113          	addi	sp,sp,-16
    24e8:	00812423          	sw	s0,8(sp)
    24ec:	00912223          	sw	s1,4(sp)
    24f0:	00112623          	sw	ra,12(sp)
    24f4:	000074b7          	lui	s1,0x7
	if ('\n' == c) {
    24f8:	00a00793          	li	a5,10
{
    24fc:	00050413          	mv	s0,a0
    2500:	72848493          	addi	s1,s1,1832 # 7728 <uart_console_dev>
	if ('\n' == c) {
    2504:	00f51c63          	bne	a0,a5,251c <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
    2508:	0004a503          	lw	a0,0(s1)
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    250c:	00852783          	lw	a5,8(a0)
    2510:	00d00593          	li	a1,13
    2514:	0047a783          	lw	a5,4(a5)
    2518:	000780e7          	jalr	a5
	uart_poll_out(uart_console_dev, c);
    251c:	0004a503          	lw	a0,0(s1)
    2520:	00852783          	lw	a5,8(a0)
    2524:	0ff47593          	andi	a1,s0,255
    2528:	0047a783          	lw	a5,4(a5)
    252c:	000780e7          	jalr	a5
}
    2530:	00c12083          	lw	ra,12(sp)
    2534:	00040513          	mv	a0,s0
    2538:	00812403          	lw	s0,8(sp)
    253c:	00412483          	lw	s1,4(sp)
    2540:	01010113          	addi	sp,sp,16
    2544:	00008067          	ret

00002548 <swerv_pic_init>:
	return *(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg);
}

static void swerv_pic_write(uint32_t reg, uint32_t val)
{
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    2548:	f00c37b7          	lui	a5,0xf00c3
    254c:	0007a023          	sw	zero,0(a5) # f00c3000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c3001>
    2550:	f00c27b7          	lui	a5,0xf00c2
    2554:	00478713          	addi	a4,a5,4 # f00c2004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c2005>

	/* Init priority order to 0, 0=lowest to 15=highest */
	swerv_pic_write(SWERV_PIC_mpiccfg, 0);

	/* Ensure that all interrupts are disabled initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    2558:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    255c:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    2560:	00470713          	addi	a4,a4,4
    2564:	fef71ce3          	bne	a4,a5,255c <swerv_pic_init+0x14>
    2568:	f00c07b7          	lui	a5,0xf00c0
    256c:	00478713          	addi	a4,a5,4 # f00c0004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0005>
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    2570:	00f00693          	li	a3,15
		swerv_pic_write(SWERV_PIC_meie(i), 0);
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    2574:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    2578:	00d72023          	sw	a3,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    257c:	00470713          	addi	a4,a4,4
    2580:	fef71ce3          	bne	a4,a5,2578 <swerv_pic_init+0x30>
    2584:	f00c47b7          	lui	a5,0xf00c4
    2588:	00478713          	addi	a4,a5,4 # f00c4004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c4005>
		swerv_pic_write(SWERV_PIC_meipl(i), 15);
	}

	/* Set property of each interrupt line to level-triggered/high */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    258c:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    2590:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    2594:	00470713          	addi	a4,a4,4
    2598:	fef71ce3          	bne	a4,a5,2590 <swerv_pic_init+0x48>
    259c:	f00c57b7          	lui	a5,0xf00c5
    25a0:	00478713          	addi	a4,a5,4 # f00c5004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c5005>
		swerv_pic_write(SWERV_PIC_meigwctrl(i), (0<<1)|(0<<0));
	}

	/* clear pending of each interrupt line */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    25a4:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    25a8:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    25ac:	00470713          	addi	a4,a4,4
    25b0:	fef71ce3          	bne	a4,a5,25a8 <swerv_pic_init+0x60>
		swerv_pic_write(SWERV_PIC_meigwclr(i), 0);
	}

	/* No interrupts masked */
	__asm__ swerv_pic_writecsr(meipt, 0);
    25b4:	bc905073          	csrwi	0xbc9,0
	__asm__ swerv_pic_writecsr(meicidpl, 0);
    25b8:	bcb05073          	csrwi	0xbcb,0
	__asm__ swerv_pic_writecsr(meicurpl, 0);
    25bc:	bcc05073          	csrwi	0xbcc,0

	/*
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
    25c0:	000017b7          	lui	a5,0x1
    25c4:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
    25c8:	3047a7f3          	csrrs	a5,mie,a5
}
    25cc:	00000513          	li	a0,0
    25d0:	00008067          	ret

000025d4 <swerv_pic_irq_handler>:
{
    25d4:	ff010113          	addi	sp,sp,-16
    25d8:	00112623          	sw	ra,12(sp)
    25dc:	00812423          	sw	s0,8(sp)
	__asm__ swerv_pic_writecsr(meicpct, 0);
    25e0:	bca05073          	csrwi	0xbca,0
	__asm__ swerv_pic_readcsr(meihap, tmp);
    25e4:	fc802473          	csrr	s0,0xfc8
	irq = (tmp >> 2) & 0xff;
    25e8:	00245413          	srli	s0,s0,0x2
    25ec:	0ff47413          	andi	s0,s0,255
	save_irq = irq;
    25f0:	000077b7          	lui	a5,0x7
    25f4:	7287a623          	sw	s0,1836(a5) # 772c <save_irq>
	if (irq == 0U || irq >= 64) {
    25f8:	fff40713          	addi	a4,s0,-1
    25fc:	03e00793          	li	a5,62
    2600:	00e7f663          	bgeu	a5,a4,260c <swerv_pic_irq_handler+0x38>
		z_irq_spurious(NULL);
    2604:	00000513          	li	a0,0
    2608:	394000ef          	jal	ra,299c <z_irq_spurious>
	irq += RISCV_MAX_GENERIC_IRQ;
    260c:	00b40713          	addi	a4,s0,11
	if (ite->isr)
    2610:	000077b7          	lui	a5,0x7
    2614:	00371713          	slli	a4,a4,0x3
    2618:	9ac78793          	addi	a5,a5,-1620 # 69ac <_sw_isr_table>
    261c:	00e787b3          	add	a5,a5,a4
    2620:	0047a703          	lw	a4,4(a5)
    2624:	00070663          	beqz	a4,2630 <swerv_pic_irq_handler+0x5c>
		ite->isr(ite->arg);
    2628:	0007a503          	lw	a0,0(a5)
    262c:	000700e7          	jalr	a4
	swerv_pic_write(SWERV_PIC_meigwclr(irq), 0);
    2630:	000017b7          	lui	a5,0x1
    2634:	40b78793          	addi	a5,a5,1035 # 140b <z_vprintk+0x2b7>
    2638:	00f40433          	add	s0,s0,a5
    263c:	00241413          	slli	s0,s0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    2640:	f00c07b7          	lui	a5,0xf00c0
    2644:	00f40433          	add	s0,s0,a5
}
    2648:	00c12083          	lw	ra,12(sp)
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    264c:	00042023          	sw	zero,0(s0)
}
    2650:	00812403          	lw	s0,8(sp)
    2654:	01010113          	addi	sp,sp,16
    2658:	00008067          	ret

0000265c <swerv_pic_irq_enable>:
	if ((irq >= SWERV_PIC_MAX_ID) || (irq < RISCV_MAX_GENERIC_IRQ)) {
    265c:	ff550713          	addi	a4,a0,-11
    2660:	03f00793          	li	a5,63
    2664:	02e7e663          	bltu	a5,a4,2690 <swerv_pic_irq_enable+0x34>
    2668:	00800793          	li	a5,8
    266c:	3007b7f3          	csrrc	a5,mstatus,a5
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    2670:	7f550513          	addi	a0,a0,2037
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    2674:	f00c0737          	lui	a4,0xf00c0
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    2678:	00251513          	slli	a0,a0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    267c:	00e50533          	add	a0,a0,a4
    2680:	00100713          	li	a4,1
    2684:	00e52023          	sw	a4,0(a0)
			  : "=r" (mstatus)
			  : "r" (MSTATUS_IEN)
			  : "memory");

	key = (mstatus & MSTATUS_IEN);
    2688:	0087f793          	andi	a5,a5,8
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	ulong_t mstatus;

	__asm__ volatile ("csrrs %0, mstatus, %1"
    268c:	3007a7f3          	csrrs	a5,mstatus,a5
}
    2690:	00008067          	ret

00002694 <arch_irq_enable>:
	if (irq > RISCV_MAX_GENERIC_IRQ) {
    2694:	00b00793          	li	a5,11
    2698:	00a7f463          	bgeu	a5,a0,26a0 <arch_irq_enable+0xc>
		swerv_pic_irq_enable(irq);
    269c:	fc1ff06f          	j	265c <swerv_pic_irq_enable>
			  : "=r" (mie)
			  : "r" (1 << irq));
    26a0:	00100793          	li	a5,1
    26a4:	00a79533          	sll	a0,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
    26a8:	30452573          	csrrs	a0,mie,a0
}
    26ac:	00008067          	ret

000026b0 <mtime>:
	volatile uint32_t *r = (uint32_t *)RISCV_MTIME_BASE;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
    26b0:	800017b7          	lui	a5,0x80001
    26b4:	0247a703          	lw	a4,36(a5) # 80001024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001025>
		lo = r[0];
    26b8:	0207a503          	lw	a0,32(a5)
	} while (r[1] != hi);
    26bc:	0247a583          	lw	a1,36(a5)
    26c0:	fee59ae3          	bne	a1,a4,26b4 <mtime+0x4>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
    26c4:	00008067          	ret

000026c8 <timer_isr>:

static void timer_isr(const void *arg)
{
    26c8:	fd010113          	addi	sp,sp,-48
    26cc:	01312e23          	sw	s3,28(sp)
    26d0:	02112623          	sw	ra,44(sp)
    26d4:	02812423          	sw	s0,40(sp)
    26d8:	02912223          	sw	s1,36(sp)
    26dc:	03212023          	sw	s2,32(sp)
    26e0:	01412c23          	sw	s4,24(sp)
    26e4:	01512a23          	sw	s5,20(sp)
    26e8:	01612823          	sw	s6,16(sp)
    26ec:	01712623          	sw	s7,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    26f0:	00800993          	li	s3,8
    26f4:	3009b9f3          	csrrc	s3,mstatus,s3
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    26f8:	00007937          	lui	s2,0x7
    26fc:	73090513          	addi	a0,s2,1840 # 7730 <lock>
	key = (mstatus & MSTATUS_IEN);
    2700:	0089f993          	andi	s3,s3,8
    2704:	640030ef          	jal	ra,5d44 <z_spin_lock_valid>
    2708:	04051063          	bnez	a0,2748 <timer_isr+0x80>
    270c:	00007437          	lui	s0,0x7
    2710:	000075b7          	lui	a1,0x7
    2714:	00007537          	lui	a0,0x7
    2718:	05c00693          	li	a3,92
    271c:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    2720:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    2724:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    2728:	de9fe0ef          	jal	ra,1510 <printk>
    272c:	00007537          	lui	a0,0x7
    2730:	73090593          	addi	a1,s2,1840
    2734:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    2738:	dd9fe0ef          	jal	ra,1510 <printk>
    273c:	05c00593          	li	a1,92
    2740:	11c40513          	addi	a0,s0,284
    2744:	cc5ff0ef          	jal	ra,2408 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    2748:	73090513          	addi	a0,s2,1840
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint64_t now = mtime();
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    274c:	00007437          	lui	s0,0x7
    2750:	64c030ef          	jal	ra,5d9c <z_spin_lock_set_owner>
    2754:	71040413          	addi	s0,s0,1808 # 7710 <last_count>
	uint64_t now = mtime();
    2758:	f59ff0ef          	jal	ra,26b0 <mtime>
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    275c:	00042b83          	lw	s7,0(s0)
    2760:	00442483          	lw	s1,4(s0)
	uint64_t now = mtime();
    2764:	00050a93          	mv	s5,a0
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    2768:	41750bb3          	sub	s7,a0,s7
    276c:	017537b3          	sltu	a5,a0,s7
    2770:	409584b3          	sub	s1,a1,s1
	uint64_t now = mtime();
    2774:	00058a13          	mv	s4,a1
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    2778:	40f484b3          	sub	s1,s1,a5
	return z_clock_hw_cycles_per_sec;
    277c:	00007b37          	lui	s6,0x7
    2780:	6c4b2503          	lw	a0,1732(s6) # 76c4 <z_clock_hw_cycles_per_sec>
    2784:	06400613          	li	a2,100
    2788:	00000693          	li	a3,0
    278c:	41f55593          	srai	a1,a0,0x1f
    2790:	b81fd0ef          	jal	ra,310 <__udivdi3>
    2794:	00050613          	mv	a2,a0
    2798:	00000693          	li	a3,0
    279c:	000b8513          	mv	a0,s7
    27a0:	00048593          	mv	a1,s1
    27a4:	b6dfd0ef          	jal	ra,310 <__udivdi3>
    27a8:	00050493          	mv	s1,a0

	last_count += dticks * CYC_PER_TICK;
    27ac:	6c4b2503          	lw	a0,1732(s6)
    27b0:	06400613          	li	a2,100
    27b4:	00000693          	li	a3,0
    27b8:	41f55593          	srai	a1,a0,0x1f
    27bc:	b55fd0ef          	jal	ra,310 <__udivdi3>
    27c0:	02a487b3          	mul	a5,s1,a0
    27c4:	00042703          	lw	a4,0(s0)
    27c8:	00442503          	lw	a0,4(s0)
    27cc:	00e78733          	add	a4,a5,a4
    27d0:	00f737b3          	sltu	a5,a4,a5
    27d4:	00a787b3          	add	a5,a5,a0
    27d8:	00e42023          	sw	a4,0(s0)
    27dc:	00f42223          	sw	a5,4(s0)

	if (!TICKLESS) {
		uint64_t next = last_count + CYC_PER_TICK;
    27e0:	6c4b2503          	lw	a0,1732(s6)
    27e4:	06400613          	li	a2,100
    27e8:	00000693          	li	a3,0
    27ec:	41f55593          	srai	a1,a0,0x1f
    27f0:	b21fd0ef          	jal	ra,310 <__udivdi3>
    27f4:	00042483          	lw	s1,0(s0)
    27f8:	00442783          	lw	a5,4(s0)
    27fc:	009504b3          	add	s1,a0,s1
    2800:	00a4b433          	sltu	s0,s1,a0
    2804:	00f40433          	add	s0,s0,a5

		if ((int64_t)(next - now) < MIN_DELAY) {
    2808:	41548ab3          	sub	s5,s1,s5
    280c:	0154b5b3          	sltu	a1,s1,s5
    2810:	41440a33          	sub	s4,s0,s4
    2814:	40ba0a33          	sub	s4,s4,a1
		uint64_t next = last_count + CYC_PER_TICK;
    2818:	00048513          	mv	a0,s1
    281c:	00040713          	mv	a4,s0
		if ((int64_t)(next - now) < MIN_DELAY) {
    2820:	000b0793          	mv	a5,s6
    2824:	03404863          	bgtz	s4,2854 <timer_isr+0x18c>
    2828:	000a1663          	bnez	s4,2834 <timer_isr+0x16c>
    282c:	3e700693          	li	a3,999
    2830:	0356e263          	bltu	a3,s5,2854 <timer_isr+0x18c>
			next += CYC_PER_TICK;
    2834:	6c47a503          	lw	a0,1732(a5)
    2838:	06400613          	li	a2,100
    283c:	00000693          	li	a3,0
    2840:	41f55593          	srai	a1,a0,0x1f
    2844:	acdfd0ef          	jal	ra,310 <__udivdi3>
    2848:	00a48533          	add	a0,s1,a0
    284c:	009534b3          	sltu	s1,a0,s1
    2850:	00848733          	add	a4,s1,s0
	r[1] = 0xffffffff;
    2854:	800017b7          	lui	a5,0x80001
    2858:	fff00693          	li	a3,-1
    285c:	02d7a623          	sw	a3,44(a5) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    2860:	02a7a423          	sw	a0,40(a5)
	r[1] = (uint32_t)(time >> 32);
    2864:	02e7a623          	sw	a4,44(a5)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2868:	73090513          	addi	a0,s2,1840
    286c:	500030ef          	jal	ra,5d6c <z_spin_unlock_valid>
    2870:	04051063          	bnez	a0,28b0 <timer_isr+0x1e8>
    2874:	00007437          	lui	s0,0x7
    2878:	000075b7          	lui	a1,0x7
    287c:	00007537          	lui	a0,0x7
    2880:	08400693          	li	a3,132
    2884:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    2888:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    288c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    2890:	c81fe0ef          	jal	ra,1510 <printk>
    2894:	00007537          	lui	a0,0x7
    2898:	73090593          	addi	a1,s2,1840
    289c:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    28a0:	c71fe0ef          	jal	ra,1510 <printk>
    28a4:	08400593          	li	a1,132
    28a8:	11c40513          	addi	a0,s0,284
    28ac:	b5dff0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    28b0:	3009a9f3          	csrrs	s3,mstatus,s3
		set_mtimecmp(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    28b4:	02812403          	lw	s0,40(sp)
    28b8:	02c12083          	lw	ra,44(sp)
    28bc:	02412483          	lw	s1,36(sp)
    28c0:	02012903          	lw	s2,32(sp)
    28c4:	01c12983          	lw	s3,28(sp)
    28c8:	01812a03          	lw	s4,24(sp)
    28cc:	01412a83          	lw	s5,20(sp)
    28d0:	01012b03          	lw	s6,16(sp)
    28d4:	00c12b83          	lw	s7,12(sp)
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    28d8:	00100513          	li	a0,1
}
    28dc:	03010113          	addi	sp,sp,48
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    28e0:	3e50306f          	j	64c4 <z_clock_announce>

000028e4 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
    28e4:	ff010113          	addi	sp,sp,-16
    28e8:	00812423          	sw	s0,8(sp)
	ARG_UNUSED(device);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
	last_count = mtime();
    28ec:	00007437          	lui	s0,0x7
{
    28f0:	00112623          	sw	ra,12(sp)
	last_count = mtime();
    28f4:	71040413          	addi	s0,s0,1808 # 7710 <last_count>
    28f8:	db9ff0ef          	jal	ra,26b0 <mtime>
    28fc:	00a42023          	sw	a0,0(s0)
    2900:	00b42223          	sw	a1,4(s0)
    2904:	000077b7          	lui	a5,0x7
	set_mtimecmp(last_count + CYC_PER_TICK);
    2908:	6c47a503          	lw	a0,1732(a5) # 76c4 <z_clock_hw_cycles_per_sec>
    290c:	06400613          	li	a2,100
    2910:	00000693          	li	a3,0
    2914:	41f55593          	srai	a1,a0,0x1f
    2918:	9f9fd0ef          	jal	ra,310 <__udivdi3>
    291c:	00042783          	lw	a5,0(s0)
    2920:	00442703          	lw	a4,4(s0)
	r[1] = 0xffffffff;
    2924:	fff00693          	li	a3,-1
	set_mtimecmp(last_count + CYC_PER_TICK);
    2928:	00f507b3          	add	a5,a0,a5
    292c:	00a7b533          	sltu	a0,a5,a0
    2930:	00e50533          	add	a0,a0,a4
	r[1] = 0xffffffff;
    2934:	80001737          	lui	a4,0x80001
    2938:	02d72623          	sw	a3,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    293c:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    2940:	02a72623          	sw	a0,44(a4)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    2944:	00700513          	li	a0,7
    2948:	d4dff0ef          	jal	ra,2694 <arch_irq_enable>
	return 0;
}
    294c:	00c12083          	lw	ra,12(sp)
    2950:	00812403          	lw	s0,8(sp)
    2954:	00000513          	li	a0,0
    2958:	01010113          	addi	sp,sp,16
    295c:	00008067          	ret

00002960 <z_clock_set_timeout>:
	}

	set_mtimecmp(cyc + last_count);
	k_spin_unlock(&lock, key);
#endif
}
    2960:	00008067          	ret

00002964 <z_clock_elapsed>:
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;

	k_spin_unlock(&lock, key);
	return ret;
}
    2964:	00000513          	li	a0,0
    2968:	00008067          	ret

0000296c <arch_cpu_idle>:
    296c:	00800793          	li	a5,8
    2970:	3007a7f3          	csrrs	a5,mstatus,a5
 */

void __weak arch_cpu_idle(void)
{
	irq_unlock(MSTATUS_IEN);
}
    2974:	00008067          	ret

00002978 <z_riscv_fatal_error>:
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf)
{
    2978:	ff010113          	addi	sp,sp,-16
    297c:	00112623          	sw	ra,12(sp)
			esf->a2, esf->a3, esf->a4, esf->a5);
		LOG_ERR("  a6: 0x%08lx  a7: 0x%08lx\n",
			esf->a6, esf->a7);
	}

	z_fatal_error(reason, esf);
    2980:	325000ef          	jal	ra,34a4 <z_fatal_error>

00002984 <_Fault>:
		return "unknown";
	}
}

FUNC_NORETURN void _Fault(const z_arch_esf_t *esf)
{
    2984:	ff010113          	addi	sp,sp,-16
    2988:	00112623          	sw	ra,12(sp)
    298c:	00050593          	mv	a1,a0
	ulong_t mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    2990:	342027f3          	csrr	a5,mcause
	z_fatal_error(reason, esf);
    2994:	00000513          	li	a0,0
    2998:	30d000ef          	jal	ra,34a4 <z_fatal_error>

0000299c <z_irq_spurious>:
#include <kernel_internal.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
    299c:	ff010113          	addi	sp,sp,-16
    29a0:	00112623          	sw	ra,12(sp)
	ulong_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    29a4:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    29a8:	00000593          	li	a1,0
    29ac:	00100513          	li	a0,1
    29b0:	fc9ff0ef          	jal	ra,2978 <z_riscv_fatal_error>

000029b4 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    29b4:	ff010113          	addi	sp,sp,-16
    29b8:	00112623          	sw	ra,12(sp)
	z_bss_zero();
    29bc:	385000ef          	jal	ra,3540 <z_bss_zero>
#ifdef CONFIG_XIP
	z_data_copy();
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
    29c0:	a81ff0ef          	jal	ra,2440 <soc_interrupt_init>
#endif
	z_cstart();
    29c4:	405000ef          	jal	ra,35c8 <z_cstart>

000029c8 <__initialize>:
SECTION_FUNC(TEXT, __initialize)
	/*
	 * This will boot master core, just halt other cores.
	 * Note: need to be updated for complete SMP support
	 */
	csrr a0, mhartid
    29c8:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_master_core
    29cc:	00050663          	beqz	a0,29d8 <boot_master_core>

000029d0 <loop_slave_core>:

loop_slave_core:
	wfi
    29d0:	10500073          	wfi
	j loop_slave_core
    29d4:	ffdff06f          	j	29d0 <loop_slave_core>

000029d8 <boot_master_core>:

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + CONFIG_ISR_STACK_SIZE
	 */
	la sp, z_interrupt_stacks
    29d8:	00007117          	auipc	sp,0x7
    29dc:	a3810113          	addi	sp,sp,-1480 # 9410 <z_interrupt_stacks>
	li t0, CONFIG_ISR_STACK_SIZE
    29e0:	000012b7          	lui	t0,0x1
    29e4:	80028293          	addi	t0,t0,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
	add sp, sp, t0
    29e8:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
    29ec:	fc9ff0ef          	jal	ra,29b4 <_PrepC>

000029f0 <z_thread_entry_wrapper>:
	 * in registers a0, a1, a2 and a3. These registers are used as arguments
	 * to function z_thread_entry. Hence, just call z_thread_entry with
	 * return address set to 0 to indicate a non-returning function call.
	 */

	jal x0, z_thread_entry
    29f0:	d70ff06f          	j	1f60 <z_thread_entry>

000029f4 <arch_new_thread>:
	stack_init = Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr);

	/* Setup the initial stack frame */
	stack_init->a0 = (ulong_t)entry;
	stack_init->a1 = (ulong_t)p1;
	stack_init->a2 = (ulong_t)p2;
    29f4:	fef62023          	sw	a5,-32(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry_wrapper, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
    29f8:	000027b7          	lui	a5,0x2
    29fc:	88078793          	addi	a5,a5,-1920 # 1880 <fix_missing_black+0x184>
    2a00:	fef62e23          	sw	a5,-4(a2)
	if ((thread->base.user_options & K_FP_REGS) != 0) {
		stack_init->mstatus |= MSTATUS_FS_INIT;
	}
	stack_init->fp_state = 0;
#endif
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    2a04:	000037b7          	lui	a5,0x3
    2a08:	9f078793          	addi	a5,a5,-1552 # 29f0 <z_thread_entry_wrapper>
	stack_init->a0 = (ulong_t)entry;
    2a0c:	fcd62c23          	sw	a3,-40(a2)
	stack_init->a1 = (ulong_t)p1;
    2a10:	fce62e23          	sw	a4,-36(a2)
	stack_init->a3 = (ulong_t)p3;
    2a14:	ff062223          	sw	a6,-28(a2)
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    2a18:	fef62c23          	sw	a5,-8(a2)
	stack_init = Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr);
    2a1c:	fb060613          	addi	a2,a2,-80

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (ulong_t)stack_init;
    2a20:	02c52c23          	sw	a2,56(a0)
}
    2a24:	00008067          	ret

00002a28 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    2a28:	00054783          	lbu	a5,0(a0)
    2a2c:	0005c703          	lbu	a4,0(a1)
    2a30:	00e79463          	bne	a5,a4,2a38 <strcmp+0x10>
    2a34:	00079663          	bnez	a5,2a40 <strcmp+0x18>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    2a38:	40e78533          	sub	a0,a5,a4
    2a3c:	00008067          	ret
		s1++;
    2a40:	00150513          	addi	a0,a0,1
		s2++;
    2a44:	00158593          	addi	a1,a1,1
    2a48:	fe1ff06f          	j	2a28 <strcmp>

00002a4c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2a4c:	0ff5f693          	andi	a3,a1,255
	unsigned char *d_byte = (unsigned char *)buf;
    2a50:	00050793          	mv	a5,a0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    2a54:	0037f713          	andi	a4,a5,3
    2a58:	04071863          	bnez	a4,2aa8 <memset+0x5c>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    2a5c:	0ff5f593          	andi	a1,a1,255

	c_word |= c_word << 8;
    2a60:	00859713          	slli	a4,a1,0x8
    2a64:	00b765b3          	or	a1,a4,a1
	c_word |= c_word << 16;
    2a68:	01059713          	slli	a4,a1,0x10
    2a6c:	00b765b3          	or	a1,a4,a1
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    2a70:	00c78333          	add	t1,a5,a2
    2a74:	00078713          	mv	a4,a5
    2a78:	00300813          	li	a6,3
    2a7c:	40e308b3          	sub	a7,t1,a4
    2a80:	03186e63          	bltu	a6,a7,2abc <memset+0x70>
    2a84:	ffc67593          	andi	a1,a2,-4
    2a88:	00265713          	srli	a4,a2,0x2
    2a8c:	00b787b3          	add	a5,a5,a1
    2a90:	ffc00593          	li	a1,-4
    2a94:	02b70733          	mul	a4,a4,a1
    2a98:	00c70633          	add	a2,a4,a2
    2a9c:	00c78633          	add	a2,a5,a2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    2aa0:	02c79463          	bne	a5,a2,2ac8 <memset+0x7c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2aa4:	00008067          	ret
		if (n == 0) {
    2aa8:	fe060ee3          	beqz	a2,2aa4 <memset+0x58>
		*(d_byte++) = c_byte;
    2aac:	00178793          	addi	a5,a5,1
		n--;
    2ab0:	fff60613          	addi	a2,a2,-1
		*(d_byte++) = c_byte;
    2ab4:	fed78fa3          	sb	a3,-1(a5)
		n--;
    2ab8:	f9dff06f          	j	2a54 <memset+0x8>
		*(d_word++) = c_word;
    2abc:	00470713          	addi	a4,a4,4
    2ac0:	feb72e23          	sw	a1,-4(a4)
		n -= sizeof(mem_word_t);
    2ac4:	fb9ff06f          	j	2a7c <memset+0x30>
		*(d_byte++) = c_byte;
    2ac8:	00178793          	addi	a5,a5,1
    2acc:	fed78fa3          	sb	a3,-1(a5)
		n--;
    2ad0:	fd1ff06f          	j	2aa0 <memset+0x54>

00002ad4 <gpio_mmio32_config>:

static int gpio_mmio32_config(const struct device *dev,
			      gpio_pin_t pin, gpio_flags_t flags)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    2ad4:	00c52783          	lw	a5,12(a0)
    2ad8:	0047a683          	lw	a3,4(a5)

	if ((config->mask & (1 << pin)) == 0) {
    2adc:	00100793          	li	a5,1
    2ae0:	00b795b3          	sll	a1,a5,a1
    2ae4:	0086a783          	lw	a5,8(a3)
    2ae8:	00f5f7b3          	and	a5,a1,a5
    2aec:	06078c63          	beqz	a5,2b64 <gpio_mmio32_config+0x90>
		return -EINVAL; /* Pin not in our validity mask */
	}

	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    2af0:	fffff7b7          	lui	a5,0xfffff
    2af4:	0fe78793          	addi	a5,a5,254 # fffff0fe <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff0ff>
    2af8:	00f677b3          	and	a5,a2,a5
		      GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH |
		      GPIO_ACTIVE_LOW)) {
		/* We ignore direction and fake polarity, rest is unsupported */
		return -ENOTSUP;
    2afc:	fdd00513          	li	a0,-35
	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    2b00:	06079463          	bnez	a5,2b68 <gpio_mmio32_config+0x94>
	}

	if ((flags & GPIO_OUTPUT) != 0) {
    2b04:	20067793          	andi	a5,a2,512
			*reg = (*reg & (config->mask & ~(1 << pin)));
		}
		irq_unlock(key);
	}

	return 0;
    2b08:	00000513          	li	a0,0
	if ((flags & GPIO_OUTPUT) != 0) {
    2b0c:	04078e63          	beqz	a5,2b68 <gpio_mmio32_config+0x94>
		volatile uint32_t *reg = config->reg;
    2b10:	0046a703          	lw	a4,4(a3)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2b14:	00800793          	li	a5,8
    2b18:	3007b7f3          	csrrc	a5,mstatus,a5
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2b1c:	00b65513          	srli	a0,a2,0xb
    2b20:	00157513          	andi	a0,a0,1
	key = (mstatus & MSTATUS_IEN);
    2b24:	0087f793          	andi	a5,a5,8
    2b28:	00050e63          	beqz	a0,2b44 <gpio_mmio32_config+0x70>
			*reg = (*reg | (1 << pin));
    2b2c:	00072683          	lw	a3,0(a4)
    2b30:	00d5e5b3          	or	a1,a1,a3
			*reg = (*reg & (config->mask & ~(1 << pin)));
    2b34:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2b38:	3007a7f3          	csrrs	a5,mstatus,a5
	return 0;
    2b3c:	00000513          	li	a0,0
			  : "=r" (mstatus)
			  : "r" (key & MSTATUS_IEN)
			  : "memory");
}
    2b40:	00008067          	ret
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2b44:	40067613          	andi	a2,a2,1024
    2b48:	fe0608e3          	beqz	a2,2b38 <gpio_mmio32_config+0x64>
			*reg = (*reg & (config->mask & ~(1 << pin)));
    2b4c:	0086a683          	lw	a3,8(a3)
    2b50:	00072603          	lw	a2,0(a4)
    2b54:	fff5c593          	not	a1,a1
    2b58:	00d5f5b3          	and	a1,a1,a3
    2b5c:	00c5f5b3          	and	a1,a1,a2
    2b60:	fd5ff06f          	j	2b34 <gpio_mmio32_config+0x60>
		return -EINVAL; /* Pin not in our validity mask */
    2b64:	fea00513          	li	a0,-22
}
    2b68:	00008067          	ret

00002b6c <gpio_mmio32_port_get_raw>:

static int gpio_mmio32_port_get_raw(const struct device *dev, uint32_t *value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    2b6c:	00c52783          	lw	a5,12(a0)

	*value = *config->reg & config->mask;

	return 0;
}
    2b70:	00000513          	li	a0,0
	const struct gpio_mmio32_config *config = context->config;
    2b74:	0047a703          	lw	a4,4(a5)
	*value = *config->reg & config->mask;
    2b78:	00472783          	lw	a5,4(a4)
    2b7c:	0007a683          	lw	a3,0(a5)
    2b80:	00872783          	lw	a5,8(a4)
    2b84:	00d7f7b3          	and	a5,a5,a3
    2b88:	00f5a023          	sw	a5,0(a1)
}
    2b8c:	00008067          	ret

00002b90 <gpio_mmio32_port_set_masked_raw>:
static int gpio_mmio32_port_set_masked_raw(const struct device *dev,
					   uint32_t mask,
					   uint32_t value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    2b90:	00c52783          	lw	a5,12(a0)
    2b94:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    2b98:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    2b9c:	0087a783          	lw	a5,8(a5)
    2ba0:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2ba4:	00800793          	li	a5,8
    2ba8:	3007b7f3          	csrrc	a5,mstatus,a5
	value &= mask;

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask) | value;
    2bac:	00072683          	lw	a3,0(a4)
	key = (mstatus & MSTATUS_IEN);
    2bb0:	0087f793          	andi	a5,a5,8
    2bb4:	00c6c633          	xor	a2,a3,a2
    2bb8:	00b67633          	and	a2,a2,a1
    2bbc:	00d64633          	xor	a2,a2,a3
    2bc0:	00c72023          	sw	a2,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2bc4:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    2bc8:	00000513          	li	a0,0
    2bcc:	00008067          	ret

00002bd0 <gpio_mmio32_port_set_bits_raw>:

static int gpio_mmio32_port_set_bits_raw(const struct device *dev,
					 uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    2bd0:	00c52783          	lw	a5,12(a0)
    2bd4:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    2bd8:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    2bdc:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2be0:	00800793          	li	a5,8
	mask &= config->mask;
    2be4:	00e5f733          	and	a4,a1,a4
    2be8:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg | mask);
    2bec:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    2bf0:	0087f793          	andi	a5,a5,8
    2bf4:	00e5e5b3          	or	a1,a1,a4
    2bf8:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2bfc:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    2c00:	00000513          	li	a0,0
    2c04:	00008067          	ret

00002c08 <gpio_mmio32_port_clear_bits_raw>:

static int gpio_mmio32_port_clear_bits_raw(const struct device *dev,
					   uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    2c08:	00c52783          	lw	a5,12(a0)
    2c0c:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    2c10:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    2c14:	0087a783          	lw	a5,8(a5)
    2c18:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2c1c:	00800793          	li	a5,8
    2c20:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask);
    2c24:	00072683          	lw	a3,0(a4)
    2c28:	fff5c593          	not	a1,a1
	key = (mstatus & MSTATUS_IEN);
    2c2c:	0087f793          	andi	a5,a5,8
    2c30:	00d5f5b3          	and	a1,a1,a3
    2c34:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2c38:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    2c3c:	00000513          	li	a0,0
    2c40:	00008067          	ret

00002c44 <gpio_mmio32_port_toggle_bits>:

static int gpio_mmio32_port_toggle_bits(const struct device *dev,
					uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    2c44:	00c52783          	lw	a5,12(a0)
    2c48:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    2c4c:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    2c50:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2c54:	00800793          	li	a5,8
	mask &= config->mask;
    2c58:	00e5f733          	and	a4,a1,a4
    2c5c:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg ^ mask);
    2c60:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    2c64:	0087f793          	andi	a5,a5,8
    2c68:	00e5c5b3          	xor	a1,a1,a4
    2c6c:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2c70:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    2c74:	00000513          	li	a0,0
    2c78:	00008067          	ret

00002c7c <gpio_mmio32_pin_interrupt_configure>:
static int gpio_mmio32_pin_interrupt_configure(const struct device *dev,
					       gpio_pin_t pin,
					       enum gpio_int_mode mode,
					       enum gpio_int_trig trig)
{
	if (mode != GPIO_INT_MODE_DISABLED) {
    2c7c:	000027b7          	lui	a5,0x2
		return -ENOTSUP;
	}

	return 0;
    2c80:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    2c84:	00f60463          	beq	a2,a5,2c8c <gpio_mmio32_pin_interrupt_configure+0x10>
		return -ENOTSUP;
    2c88:	fdd00513          	li	a0,-35
}
    2c8c:	00008067          	ret

00002c90 <gpio_mmio32_init>:
int gpio_mmio32_init(const struct device *dev)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = dev->config;

	context->config = config;
    2c90:	00c52783          	lw	a5,12(a0)
    2c94:	00452703          	lw	a4,4(a0)

	return 0;
}
    2c98:	00000513          	li	a0,0
	context->config = config;
    2c9c:	00e7a223          	sw	a4,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
}
    2ca0:	00008067          	ret

00002ca4 <gpio_swervolf_init>:
/* Driver functions */

static int gpio_swervolf_init(const struct device *dev)
{
	return 0;
}
    2ca4:	00000513          	li	a0,0
    2ca8:	00008067          	ret

00002cac <gpio_swervolf_configure>:

static int gpio_swervolf_configure(const struct device *dev,
				gpio_pin_t pin, gpio_flags_t flags)
{
	return 0;
}
    2cac:	00000513          	li	a0,0
    2cb0:	00008067          	ret

00002cb4 <gpio_swervolf_port_get_raw>:

static int gpio_swervolf_port_get_raw(const struct device *dev,
				   gpio_port_value_t *value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2cb4:	00452783          	lw	a5,4(a0)

	*value = sys_read32(addr);
	return 0;
}
    2cb8:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2cbc:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    2cc0:	0007a783          	lw	a5,0(a5)
	*value = sys_read32(addr);
    2cc4:	00f5a023          	sw	a5,0(a1)
}
    2cc8:	00008067          	ret

00002ccc <gpio_swervolf_port_set_masked_raw>:

static int gpio_swervolf_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2ccc:	00452783          	lw	a5,4(a0)
	port_val = sys_read32(addr);
	port_val = (port_val & ~mask) | (value & mask);
	sys_write32(port_val, addr);

	return 0;
}
    2cd0:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2cd4:	0007a783          	lw	a5,0(a5)
    2cd8:	0007a703          	lw	a4,0(a5)
	port_val = (port_val & ~mask) | (value & mask);
    2cdc:	00e64633          	xor	a2,a2,a4
    2ce0:	00b67633          	and	a2,a2,a1
    2ce4:	00e64633          	xor	a2,a2,a4
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    2ce8:	00c7a023          	sw	a2,0(a5)
}
    2cec:	00008067          	ret

00002cf0 <gpio_swervolf_port_set_bits_raw>:

static int gpio_swervolf_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2cf0:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) | pins;
	sys_write32(port_val, addr);

	return 0;
}
    2cf4:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2cf8:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    2cfc:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) | pins;
    2d00:	00e5e5b3          	or	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    2d04:	00b7a023          	sw	a1,0(a5)
}
    2d08:	00008067          	ret

00002d0c <gpio_swervolf_port_clear_bits_raw>:

static int gpio_swervolf_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2d0c:	00452783          	lw	a5,4(a0)
	uint32_t port_val;

	port_val = sys_read32(addr) & ~pins;
    2d10:	fff5c593          	not	a1,a1
	sys_write32(port_val, addr);

	return 0;
}
    2d14:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2d18:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    2d1c:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) & ~pins;
    2d20:	00e5f5b3          	and	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    2d24:	00b7a023          	sw	a1,0(a5)
}
    2d28:	00008067          	ret

00002d2c <gpio_swervolf_port_toggle_bits>:

static int gpio_swervolf_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2d2c:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) ^ pins;
	sys_write32(port_val, addr);

	return 0;
}
    2d30:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    2d34:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    2d38:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) ^ pins;
    2d3c:	00e5c5b3          	xor	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    2d40:	00b7a023          	sw	a1,0(a5)
}
    2d44:	00008067          	ret

00002d48 <gpio_swervolf_pin_interrupt_configure>:
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
	int ret = 0;

	if (mode != GPIO_INT_MODE_DISABLED) {
    2d48:	000027b7          	lui	a5,0x2
	int ret = 0;
    2d4c:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    2d50:	00f60463          	beq	a2,a5,2d58 <gpio_swervolf_pin_interrupt_configure+0x10>
		ret = -ENOTSUP;
    2d54:	fdd00513          	li	a0,-35
	}
	return ret;
}
    2d58:	00008067          	ret

00002d5c <uart_ns16550_config_get>:
};

static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data_t *data = DEV_DATA(dev);
    2d5c:	00c52783          	lw	a5,12(a0)
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
    2d60:	00000513          	li	a0,0
	cfg->baudrate = data->uart_config.baudrate;
    2d64:	0007a703          	lw	a4,0(a5) # 2000 <CONFIG_SRAM_SIZE>
    2d68:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
    2d6c:	0047c703          	lbu	a4,4(a5)
    2d70:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
    2d74:	0057c703          	lbu	a4,5(a5)
    2d78:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
    2d7c:	0067c703          	lbu	a4,6(a5)
    2d80:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
    2d84:	0077c783          	lbu	a5,7(a5)
    2d88:	00f583a3          	sb	a5,7(a1)
}
    2d8c:	00008067          	ret

00002d90 <uart_ns16550_configure>:
{
    2d90:	fe010113          	addi	sp,sp,-32
    2d94:	01412423          	sw	s4,8(sp)
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
    2d98:	00c52a03          	lw	s4,12(a0)
{
    2d9c:	00812c23          	sw	s0,24(sp)
    2da0:	00912a23          	sw	s1,20(sp)
    2da4:	01212823          	sw	s2,16(sp)
    2da8:	01312623          	sw	s3,12(sp)
    2dac:	00112e23          	sw	ra,28(sp)
    2db0:	01512223          	sw	s5,4(sp)
    2db4:	00050413          	mv	s0,a0
    2db8:	00058493          	mv	s1,a1
	k_spinlock_key_t key = k_spin_lock(&dev_data->lock);
    2dbc:	008a0993          	addi	s3,s4,8
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2dc0:	00800913          	li	s2,8
    2dc4:	30093973          	csrrc	s2,mstatus,s2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2dc8:	00098513          	mv	a0,s3
	key = (mstatus & MSTATUS_IEN);
    2dcc:	00897913          	andi	s2,s2,8
    2dd0:	775020ef          	jal	ra,5d44 <z_spin_lock_valid>
    2dd4:	04051063          	bnez	a0,2e14 <uart_ns16550_configure+0x84>
    2dd8:	00007ab7          	lui	s5,0x7
    2ddc:	000075b7          	lui	a1,0x7
    2de0:	00007537          	lui	a0,0x7
    2de4:	05c00693          	li	a3,92
    2de8:	11ca8613          	addi	a2,s5,284 # 711c <led0_dev_cfg+0x20>
    2dec:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    2df0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    2df4:	f1cfe0ef          	jal	ra,1510 <printk>
    2df8:	00007537          	lui	a0,0x7
    2dfc:	00098593          	mv	a1,s3
    2e00:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    2e04:	f0cfe0ef          	jal	ra,1510 <printk>
    2e08:	05c00593          	li	a1,92
    2e0c:	11ca8513          	addi	a0,s5,284
    2e10:	df8ff0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    2e14:	00098513          	mv	a0,s3
    2e18:	785020ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	set_baud_rate(dev, cfg->baudrate);
    2e1c:	0004a683          	lw	a3,0(s1)
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    2e20:	06068863          	beqz	a3,2e90 <uart_ns16550_configure+0x100>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
    2e24:	00442703          	lw	a4,4(s0)
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    2e28:	00472603          	lw	a2,4(a4)
    2e2c:	06060263          	beqz	a2,2e90 <uart_ns16550_configure+0x100>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    2e30:	00369793          	slli	a5,a3,0x3
    2e34:	00c787b3          	add	a5,a5,a2
					/ baud_rate) >> 4;
    2e38:	02d7d7b3          	divu	a5,a5,a3
		lcr_cache = INBYTE(LCR(dev));
    2e3c:	00072603          	lw	a2,0(a4)
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
    2e40:	00c42583          	lw	a1,12(s0)
	return *(volatile uint8_t *)addr;
    2e44:	00c64703          	lbu	a4,12(a2)
    2e48:	0ff77513          	andi	a0,a4,255
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
    2e4c:	f8076713          	ori	a4,a4,-128
    2e50:	0ff77713          	andi	a4,a4,255
	*(volatile uint8_t *)addr = data;
    2e54:	00e60623          	sb	a4,12(a2)
	return DEVICE_MMIO_GET(dev);
    2e58:	00442603          	lw	a2,4(s0)
    2e5c:	00062603          	lw	a2,0(a2)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    2e60:	0047d713          	srli	a4,a5,0x4
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
    2e64:	0ff77713          	andi	a4,a4,255
    2e68:	00e60023          	sb	a4,0(a2)
	return DEVICE_MMIO_GET(dev);
    2e6c:	00442703          	lw	a4,4(s0)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    2e70:	00c7d793          	srli	a5,a5,0xc
    2e74:	0ff7f793          	andi	a5,a5,255
    2e78:	00072703          	lw	a4,0(a4)
    2e7c:	00f70223          	sb	a5,4(a4)
	return DEVICE_MMIO_GET(dev);
    2e80:	00442783          	lw	a5,4(s0)
		OUTBYTE(LCR(dev), lcr_cache);
    2e84:	0007a783          	lw	a5,0(a5)
    2e88:	00a78623          	sb	a0,12(a5)
		dev_data->uart_config.baudrate = baud_rate;
    2e8c:	00d5a023          	sw	a3,0(a1)
	switch (cfg->data_bits) {
    2e90:	0064c703          	lbu	a4,6(s1)
    2e94:	00300793          	li	a5,3
		ret = -ENOTSUP;
    2e98:	fdd00a93          	li	s5,-35
    2e9c:	08e7e463          	bltu	a5,a4,2f24 <uart_ns16550_configure+0x194>
	switch (cfg->stop_bits) {
    2ea0:	0054c683          	lbu	a3,5(s1)
    2ea4:	00100613          	li	a2,1
    2ea8:	0ec68863          	beq	a3,a2,2f98 <uart_ns16550_configure+0x208>
    2eac:	06f69c63          	bne	a3,a5,2f24 <uart_ns16550_configure+0x194>
    2eb0:	00400693          	li	a3,4
	switch (cfg->parity) {
    2eb4:	0044c783          	lbu	a5,4(s1)
    2eb8:	00078a63          	beqz	a5,2ecc <uart_ns16550_configure+0x13c>
    2ebc:	00200613          	li	a2,2
    2ec0:	fdd00a93          	li	s5,-35
    2ec4:	06c79063          	bne	a5,a2,2f24 <uart_ns16550_configure+0x194>
    2ec8:	01000793          	li	a5,16
	dev_data->uart_config = *cfg;
    2ecc:	0004a603          	lw	a2,0(s1)
	OUTBYTE(LCR(dev),
    2ed0:	00d76733          	or	a4,a4,a3
    2ed4:	00e7e7b3          	or	a5,a5,a4
	return DEVICE_MMIO_GET(dev);
    2ed8:	00442703          	lw	a4,4(s0)
	dev_data->uart_config = *cfg;
    2edc:	00ca2023          	sw	a2,0(s4)
    2ee0:	0044a603          	lw	a2,4(s1)
	OUTBYTE(LCR(dev),
    2ee4:	00072703          	lw	a4,0(a4)
	int ret = 0;
    2ee8:	00000a93          	li	s5,0
	dev_data->uart_config = *cfg;
    2eec:	00ca2223          	sw	a2,4(s4)
    2ef0:	00f70623          	sb	a5,12(a4)
	return DEVICE_MMIO_GET(dev);
    2ef4:	00442783          	lw	a5,4(s0)
    2ef8:	00b00713          	li	a4,11
	OUTBYTE(MDC(dev), mdc);
    2efc:	0007a783          	lw	a5,0(a5)
    2f00:	00e78823          	sb	a4,16(a5)
	return DEVICE_MMIO_GET(dev);
    2f04:	00442783          	lw	a5,4(s0)
    2f08:	f8700713          	li	a4,-121
	OUTBYTE(FCR(dev),
    2f0c:	0007a783          	lw	a5,0(a5)
    2f10:	00e78423          	sb	a4,8(a5)
	return DEVICE_MMIO_GET(dev);
    2f14:	00442783          	lw	a5,4(s0)
    2f18:	0007a783          	lw	a5,0(a5)
	return *(volatile uint8_t *)addr;
    2f1c:	0007c703          	lbu	a4,0(a5)
	*(volatile uint8_t *)addr = data;
    2f20:	00078223          	sb	zero,4(a5)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2f24:	00098513          	mv	a0,s3
    2f28:	645020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    2f2c:	04051063          	bnez	a0,2f6c <uart_ns16550_configure+0x1dc>
    2f30:	00007437          	lui	s0,0x7
    2f34:	000075b7          	lui	a1,0x7
    2f38:	00007537          	lui	a0,0x7
    2f3c:	08400693          	li	a3,132
    2f40:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    2f44:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    2f48:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    2f4c:	dc4fe0ef          	jal	ra,1510 <printk>
    2f50:	00007537          	lui	a0,0x7
    2f54:	00098593          	mv	a1,s3
    2f58:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    2f5c:	db4fe0ef          	jal	ra,1510 <printk>
    2f60:	08400593          	li	a1,132
    2f64:	11c40513          	addi	a0,s0,284
    2f68:	ca0ff0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2f6c:	30092973          	csrrs	s2,mstatus,s2
};
    2f70:	01c12083          	lw	ra,28(sp)
    2f74:	01812403          	lw	s0,24(sp)
    2f78:	01412483          	lw	s1,20(sp)
    2f7c:	01012903          	lw	s2,16(sp)
    2f80:	00c12983          	lw	s3,12(sp)
    2f84:	00812a03          	lw	s4,8(sp)
    2f88:	000a8513          	mv	a0,s5
    2f8c:	00412a83          	lw	s5,4(sp)
    2f90:	02010113          	addi	sp,sp,32
    2f94:	00008067          	ret
		uart_cfg.stop_bits = LCR_1_STB;
    2f98:	00000693          	li	a3,0
    2f9c:	f19ff06f          	j	2eb4 <uart_ns16550_configure+0x124>

00002fa0 <uart_ns16550_init>:
 */
static int uart_ns16550_init(const struct device *dev)
{
	int ret;

	ret = uart_ns16550_configure(dev, &DEV_DATA(dev)->uart_config);
    2fa0:	00c52583          	lw	a1,12(a0)
    2fa4:	dedff06f          	j	2d90 <uart_ns16550_configure>

00002fa8 <uart_ns16550_poll_in>:
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
    2fa8:	fe010113          	addi	sp,sp,-32
    2fac:	01212823          	sw	s2,16(sp)
	int ret = -1;
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
    2fb0:	00c52903          	lw	s2,12(a0)
{
    2fb4:	00812c23          	sw	s0,24(sp)
    2fb8:	00912a23          	sw	s1,20(sp)
    2fbc:	01312623          	sw	s3,12(sp)
    2fc0:	00112e23          	sw	ra,28(sp)
    2fc4:	01412423          	sw	s4,8(sp)
    2fc8:	00050493          	mv	s1,a0
    2fcc:	00058993          	mv	s3,a1
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
    2fd0:	00890913          	addi	s2,s2,8
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2fd4:	00800413          	li	s0,8
    2fd8:	30043473          	csrrc	s0,mstatus,s0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2fdc:	00090513          	mv	a0,s2
	key = (mstatus & MSTATUS_IEN);
    2fe0:	00847413          	andi	s0,s0,8
    2fe4:	561020ef          	jal	ra,5d44 <z_spin_lock_valid>
    2fe8:	04051063          	bnez	a0,3028 <uart_ns16550_poll_in+0x80>
    2fec:	00007a37          	lui	s4,0x7
    2ff0:	000075b7          	lui	a1,0x7
    2ff4:	00007537          	lui	a0,0x7
    2ff8:	05c00693          	li	a3,92
    2ffc:	11ca0613          	addi	a2,s4,284 # 711c <led0_dev_cfg+0x20>
    3000:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    3004:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3008:	d08fe0ef          	jal	ra,1510 <printk>
    300c:	00007537          	lui	a0,0x7
    3010:	00090593          	mv	a1,s2
    3014:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    3018:	cf8fe0ef          	jal	ra,1510 <printk>
    301c:	05c00593          	li	a1,92
    3020:	11ca0513          	addi	a0,s4,284
    3024:	be4ff0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    3028:	00090513          	mv	a0,s2
    302c:	571020ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return DEVICE_MMIO_GET(dev);
    3030:	0044a783          	lw	a5,4(s1)
	int ret = -1;
    3034:	fff00913          	li	s2,-1
	return DEVICE_MMIO_GET(dev);
    3038:	0007a703          	lw	a4,0(a5)
	return *(volatile uint8_t *)addr;
    303c:	01474783          	lbu	a5,20(a4)

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
    3040:	0017f793          	andi	a5,a5,1
    3044:	00078863          	beqz	a5,3054 <uart_ns16550_poll_in+0xac>
    3048:	00074783          	lbu	a5,0(a4)
		/* got a character */
		*c = INBYTE(RDR(dev));
		ret = 0;
    304c:	00000913          	li	s2,0
		*c = INBYTE(RDR(dev));
    3050:	00f98023          	sb	a5,0(s3)
	}

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
    3054:	00c4a483          	lw	s1,12(s1)
    3058:	00848493          	addi	s1,s1,8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    305c:	00048513          	mv	a0,s1
    3060:	50d020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3064:	04051063          	bnez	a0,30a4 <uart_ns16550_poll_in+0xfc>
    3068:	000079b7          	lui	s3,0x7
    306c:	000075b7          	lui	a1,0x7
    3070:	00007537          	lui	a0,0x7
    3074:	08400693          	li	a3,132
    3078:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    307c:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    3080:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3084:	c8cfe0ef          	jal	ra,1510 <printk>
    3088:	00007537          	lui	a0,0x7
    308c:	00048593          	mv	a1,s1
    3090:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3094:	c7cfe0ef          	jal	ra,1510 <printk>
    3098:	08400593          	li	a1,132
    309c:	11c98513          	addi	a0,s3,284
    30a0:	b68ff0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    30a4:	30042473          	csrrs	s0,mstatus,s0

	return ret;
}
    30a8:	01c12083          	lw	ra,28(sp)
    30ac:	01812403          	lw	s0,24(sp)
    30b0:	01412483          	lw	s1,20(sp)
    30b4:	00c12983          	lw	s3,12(sp)
    30b8:	00812a03          	lw	s4,8(sp)
    30bc:	00090513          	mv	a0,s2
    30c0:	01012903          	lw	s2,16(sp)
    30c4:	02010113          	addi	sp,sp,32
    30c8:	00008067          	ret

000030cc <uart_ns16550_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
    30cc:	fe010113          	addi	sp,sp,-32
    30d0:	01212823          	sw	s2,16(sp)
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
    30d4:	00c52903          	lw	s2,12(a0)
{
    30d8:	00812c23          	sw	s0,24(sp)
    30dc:	00912a23          	sw	s1,20(sp)
    30e0:	01312623          	sw	s3,12(sp)
    30e4:	00112e23          	sw	ra,28(sp)
    30e8:	01412423          	sw	s4,8(sp)
    30ec:	00050493          	mv	s1,a0
    30f0:	00058993          	mv	s3,a1
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
    30f4:	00890913          	addi	s2,s2,8
	__asm__ volatile ("csrrc %0, mstatus, %1"
    30f8:	00800413          	li	s0,8
    30fc:	30043473          	csrrc	s0,mstatus,s0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3100:	00090513          	mv	a0,s2
	key = (mstatus & MSTATUS_IEN);
    3104:	00847413          	andi	s0,s0,8
    3108:	43d020ef          	jal	ra,5d44 <z_spin_lock_valid>
    310c:	04051063          	bnez	a0,314c <uart_ns16550_poll_out+0x80>
    3110:	00007a37          	lui	s4,0x7
    3114:	000075b7          	lui	a1,0x7
    3118:	00007537          	lui	a0,0x7
    311c:	05c00693          	li	a3,92
    3120:	11ca0613          	addi	a2,s4,284 # 711c <led0_dev_cfg+0x20>
    3124:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    3128:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    312c:	be4fe0ef          	jal	ra,1510 <printk>
    3130:	00007537          	lui	a0,0x7
    3134:	00090593          	mv	a1,s2
    3138:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    313c:	bd4fe0ef          	jal	ra,1510 <printk>
    3140:	05c00593          	li	a1,92
    3144:	11ca0513          	addi	a0,s4,284
    3148:	ac0ff0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    314c:	00090513          	mv	a0,s2
    3150:	44d020ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return DEVICE_MMIO_GET(dev);
    3154:	0044a783          	lw	a5,4(s1)
    3158:	0007a703          	lw	a4,0(a5)

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
    315c:	01470693          	addi	a3,a4,20
    3160:	0006c783          	lbu	a5,0(a3)
    3164:	0207f793          	andi	a5,a5,32
    3168:	fe078ce3          	beqz	a5,3160 <uart_ns16550_poll_out+0x94>
	*(volatile uint8_t *)addr = data;
    316c:	01370023          	sb	s3,0(a4)
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
    3170:	00c4a483          	lw	s1,12(s1)
    3174:	00848493          	addi	s1,s1,8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3178:	00048513          	mv	a0,s1
    317c:	3f1020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3180:	04051063          	bnez	a0,31c0 <uart_ns16550_poll_out+0xf4>
    3184:	00007937          	lui	s2,0x7
    3188:	000075b7          	lui	a1,0x7
    318c:	00007537          	lui	a0,0x7
    3190:	08400693          	li	a3,132
    3194:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    3198:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    319c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    31a0:	b70fe0ef          	jal	ra,1510 <printk>
    31a4:	00007537          	lui	a0,0x7
    31a8:	00048593          	mv	a1,s1
    31ac:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    31b0:	b60fe0ef          	jal	ra,1510 <printk>
    31b4:	08400593          	li	a1,132
    31b8:	11c90513          	addi	a0,s2,284
    31bc:	a4cff0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    31c0:	30042473          	csrrs	s0,mstatus,s0
}
    31c4:	01c12083          	lw	ra,28(sp)
    31c8:	01812403          	lw	s0,24(sp)
    31cc:	01412483          	lw	s1,20(sp)
    31d0:	01012903          	lw	s2,16(sp)
    31d4:	00c12983          	lw	s3,12(sp)
    31d8:	00812a03          	lw	s4,8(sp)
    31dc:	02010113          	addi	sp,sp,32
    31e0:	00008067          	ret

000031e4 <uart_ns16550_err_check>:
 *
 * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
    31e4:	fe010113          	addi	sp,sp,-32
    31e8:	01212823          	sw	s2,16(sp)
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
    31ec:	00c52903          	lw	s2,12(a0)
{
    31f0:	00812c23          	sw	s0,24(sp)
    31f4:	00912a23          	sw	s1,20(sp)
    31f8:	00112e23          	sw	ra,28(sp)
    31fc:	01312623          	sw	s3,12(sp)
    3200:	00050493          	mv	s1,a0
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
    3204:	00890913          	addi	s2,s2,8
	__asm__ volatile ("csrrc %0, mstatus, %1"
    3208:	00800413          	li	s0,8
    320c:	30043473          	csrrc	s0,mstatus,s0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3210:	00090513          	mv	a0,s2
	key = (mstatus & MSTATUS_IEN);
    3214:	00847413          	andi	s0,s0,8
    3218:	32d020ef          	jal	ra,5d44 <z_spin_lock_valid>
    321c:	04051063          	bnez	a0,325c <uart_ns16550_err_check+0x78>
    3220:	000079b7          	lui	s3,0x7
    3224:	000075b7          	lui	a1,0x7
    3228:	00007537          	lui	a0,0x7
    322c:	05c00693          	li	a3,92
    3230:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    3234:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    3238:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    323c:	ad4fe0ef          	jal	ra,1510 <printk>
    3240:	00007537          	lui	a0,0x7
    3244:	00090593          	mv	a1,s2
    3248:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    324c:	ac4fe0ef          	jal	ra,1510 <printk>
    3250:	05c00593          	li	a1,92
    3254:	11c98513          	addi	a0,s3,284
    3258:	9b0ff0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    325c:	00090513          	mv	a0,s2
    3260:	33d020ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return DEVICE_MMIO_GET(dev);
    3264:	0044a783          	lw	a5,4(s1)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
    3268:	00c4a483          	lw	s1,12(s1)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    326c:	0007a783          	lw	a5,0(a5)
	k_spin_unlock(&DEV_DATA(dev)->lock, key);
    3270:	00848493          	addi	s1,s1,8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3274:	00048513          	mv	a0,s1
	return *(volatile uint8_t *)addr;
    3278:	0147c903          	lbu	s2,20(a5)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    327c:	01e97913          	andi	s2,s2,30
    3280:	2ed020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3284:	04051063          	bnez	a0,32c4 <uart_ns16550_err_check+0xe0>
    3288:	000079b7          	lui	s3,0x7
    328c:	000075b7          	lui	a1,0x7
    3290:	00007537          	lui	a0,0x7
    3294:	08400693          	li	a3,132
    3298:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    329c:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    32a0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    32a4:	a6cfe0ef          	jal	ra,1510 <printk>
    32a8:	00007537          	lui	a0,0x7
    32ac:	00048593          	mv	a1,s1
    32b0:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    32b4:	a5cfe0ef          	jal	ra,1510 <printk>
    32b8:	08400593          	li	a1,132
    32bc:	11c98513          	addi	a0,s3,284
    32c0:	948ff0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    32c4:	30042473          	csrrs	s0,mstatus,s0

	return check >> 1;
}
    32c8:	01c12083          	lw	ra,28(sp)
    32cc:	01812403          	lw	s0,24(sp)
    32d0:	01412483          	lw	s1,20(sp)
    32d4:	00c12983          	lw	s3,12(sp)
    32d8:	00195513          	srli	a0,s2,0x1
    32dc:	01012903          	lw	s2,16(sp)
    32e0:	02010113          	addi	sp,sp,32
    32e4:	00008067          	ret

000032e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    32e8:	00251713          	slli	a4,a0,0x2
    32ec:	000077b7          	lui	a5,0x7
    32f0:	00150513          	addi	a0,a0,1
    32f4:	21878793          	addi	a5,a5,536 # 7218 <levels.0>
    32f8:	00251513          	slli	a0,a0,0x2
{
    32fc:	fe010113          	addi	sp,sp,-32
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3300:	00e78733          	add	a4,a5,a4
    3304:	00a78533          	add	a0,a5,a0
{
    3308:	00912a23          	sw	s1,20(sp)
    330c:	01412423          	sw	s4,8(sp)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3310:	00072483          	lw	s1,0(a4)
    3314:	00052a03          	lw	s4,0(a0)
{
    3318:	01212823          	sw	s2,16(sp)
    331c:	01312623          	sw	s3,12(sp)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    3320:	00007937          	lui	s2,0x7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3324:	000079b7          	lui	s3,0x7
{
    3328:	01512223          	sw	s5,4(sp)
    332c:	00112e23          	sw	ra,28(sp)
    3330:	00812c23          	sw	s0,24(sp)
				(dev - __device_start));
    3334:	6c890913          	addi	s2,s2,1736 # 76c8 <__device_led0>
    3338:	70898993          	addi	s3,s3,1800 # 7708 <__device_APPLICATION_start>
	*(volatile uint32_t *)addr = temp | (1 << bit);
    333c:	00100a93          	li	s5,1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3340:	0344e463          	bltu	s1,s4,3368 <z_sys_init_run_level+0x80>
		}
	}
}
    3344:	01c12083          	lw	ra,28(sp)
    3348:	01812403          	lw	s0,24(sp)
    334c:	01412483          	lw	s1,20(sp)
    3350:	01012903          	lw	s2,16(sp)
    3354:	00c12983          	lw	s3,12(sp)
    3358:	00812a03          	lw	s4,8(sp)
    335c:	00412a83          	lw	s5,4(sp)
    3360:	02010113          	addi	sp,sp,32
    3364:	00008067          	ret
		const struct device *dev = entry->dev;
    3368:	0044a403          	lw	s0,4(s1)
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    336c:	0004a783          	lw	a5,0(s1)
    3370:	00040513          	mv	a0,s0
    3374:	000780e7          	jalr	a5
    3378:	02050663          	beqz	a0,33a4 <z_sys_init_run_level+0xbc>
    337c:	02040463          	beqz	s0,33a4 <z_sys_init_run_level+0xbc>
				(dev - __device_start));
    3380:	41240433          	sub	s0,s0,s2
    3384:	40445413          	srai	s0,s0,0x4
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3388:	00545793          	srli	a5,s0,0x5
    338c:	00279793          	slli	a5,a5,0x2
    3390:	013787b3          	add	a5,a5,s3
	uint32_t temp = *(volatile uint32_t *)addr;
    3394:	0007a703          	lw	a4,0(a5)
	*(volatile uint32_t *)addr = temp | (1 << bit);
    3398:	008a9433          	sll	s0,s5,s0
    339c:	00e46433          	or	s0,s0,a4
    33a0:	0087a023          	sw	s0,0(a5)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    33a4:	00848493          	addi	s1,s1,8
    33a8:	f99ff06f          	j	3340 <z_sys_init_run_level+0x58>

000033ac <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    33ac:	000077b7          	lui	a5,0x7
    33b0:	6c878793          	addi	a5,a5,1736 # 76c8 <__device_led0>
    33b4:	40f50533          	sub	a0,a0,a5
    33b8:	40455513          	srai	a0,a0,0x4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    33bc:	00555793          	srli	a5,a0,0x5
    33c0:	00007737          	lui	a4,0x7
    33c4:	70870713          	addi	a4,a4,1800 # 7708 <__device_APPLICATION_start>
    33c8:	00279793          	slli	a5,a5,0x2
    33cc:	00e787b3          	add	a5,a5,a4
	uint32_t temp = *(volatile uint32_t *)addr;
    33d0:	0007a703          	lw	a4,0(a5)
	return temp & (1 << bit);
    33d4:	00100793          	li	a5,1
    33d8:	00a79533          	sll	a0,a5,a0
    33dc:	00e57533          	and	a0,a0,a4
}
    33e0:	00153513          	seqz	a0,a0
    33e4:	00008067          	ret

000033e8 <z_impl_device_get_binding>:
{
    33e8:	fe010113          	addi	sp,sp,-32
	for (dev = __device_start; dev != __device_end; dev++) {
    33ec:	000077b7          	lui	a5,0x7
{
    33f0:	00912a23          	sw	s1,20(sp)
	for (dev = __device_start; dev != __device_end; dev++) {
    33f4:	000074b7          	lui	s1,0x7
{
    33f8:	00812c23          	sw	s0,24(sp)
    33fc:	01212823          	sw	s2,16(sp)
    3400:	01312623          	sw	s3,12(sp)
    3404:	00112e23          	sw	ra,28(sp)
    3408:	00050913          	mv	s2,a0
	for (dev = __device_start; dev != __device_end; dev++) {
    340c:	6c878413          	addi	s0,a5,1736 # 76c8 <__device_led0>
    3410:	6c878993          	addi	s3,a5,1736
    3414:	70848493          	addi	s1,s1,1800 # 7708 <__device_APPLICATION_start>
    3418:	00941a63          	bne	s0,s1,342c <z_impl_device_get_binding+0x44>
	for (dev = __device_start; dev != __device_end; dev++) {
    341c:	00098413          	mv	s0,s3
    3420:	02941463          	bne	s0,s1,3448 <z_impl_device_get_binding+0x60>
	return NULL;
    3424:	00000413          	li	s0,0
    3428:	0440006f          	j	346c <z_impl_device_get_binding+0x84>
		if (z_device_ready(dev) && (dev->name == name)) {
    342c:	00040513          	mv	a0,s0
    3430:	f7dff0ef          	jal	ra,33ac <z_device_ready>
    3434:	00050663          	beqz	a0,3440 <z_impl_device_get_binding+0x58>
    3438:	00042783          	lw	a5,0(s0)
    343c:	03278863          	beq	a5,s2,346c <z_impl_device_get_binding+0x84>
	for (dev = __device_start; dev != __device_end; dev++) {
    3440:	01040413          	addi	s0,s0,16
    3444:	fd5ff06f          	j	3418 <z_impl_device_get_binding+0x30>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3448:	00040513          	mv	a0,s0
    344c:	f61ff0ef          	jal	ra,33ac <z_device_ready>
    3450:	00051663          	bnez	a0,345c <z_impl_device_get_binding+0x74>
	for (dev = __device_start; dev != __device_end; dev++) {
    3454:	01040413          	addi	s0,s0,16
    3458:	fc9ff06f          	j	3420 <z_impl_device_get_binding+0x38>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    345c:	00042583          	lw	a1,0(s0)
    3460:	00090513          	mv	a0,s2
    3464:	dc4ff0ef          	jal	ra,2a28 <strcmp>
    3468:	fe0516e3          	bnez	a0,3454 <z_impl_device_get_binding+0x6c>
}
    346c:	01c12083          	lw	ra,28(sp)
    3470:	00040513          	mv	a0,s0
    3474:	01812403          	lw	s0,24(sp)
    3478:	01412483          	lw	s1,20(sp)
    347c:	01012903          	lw	s2,16(sp)
    3480:	00c12983          	lw	s3,12(sp)
    3484:	02010113          	addi	sp,sp,32
    3488:	00008067          	ret

0000348c <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    348c:	00800793          	li	a5,8
    3490:	3007b7f3          	csrrc	a5,mstatus,a5
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    3494:	0000006f          	j	3494 <arch_system_halt+0x8>

00003498 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3498:	ff010113          	addi	sp,sp,-16
    349c:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    34a0:	fedff0ef          	jal	ra,348c <arch_system_halt>

000034a4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    34a4:	fe010113          	addi	sp,sp,-32
    34a8:	00812c23          	sw	s0,24(sp)
    34ac:	00912a23          	sw	s1,20(sp)
    34b0:	00112e23          	sw	ra,28(sp)
    34b4:	01212823          	sw	s2,16(sp)
    34b8:	00050493          	mv	s1,a0
    34bc:	00b12623          	sw	a1,12(sp)
    34c0:	00800413          	li	s0,8
    34c4:	30043473          	csrrc	s0,mstatus,s0
	key = (mstatus & MSTATUS_IEN);
    34c8:	00847413          	andi	s0,s0,8
	return z_impl_k_current_get();
    34cc:	458020ef          	jal	ra,5924 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    34d0:	00c12583          	lw	a1,12(sp)
    34d4:	00050913          	mv	s2,a0
    34d8:	00048513          	mv	a0,s1
    34dc:	fbdff0ef          	jal	ra,3498 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    34e0:	00400793          	li	a5,4
    34e4:	02f49e63          	bne	s1,a5,3520 <z_fatal_error+0x7c>
    34e8:	000074b7          	lui	s1,0x7
    34ec:	000075b7          	lui	a1,0x7
    34f0:	00007537          	lui	a0,0x7
    34f4:	25058593          	addi	a1,a1,592 # 7250 <levels.0+0x38>
    34f8:	08e00693          	li	a3,142
    34fc:	22c48613          	addi	a2,s1,556 # 722c <levels.0+0x14>
    3500:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3504:	80cfe0ef          	jal	ra,1510 <printk>
    3508:	00007537          	lui	a0,0x7
    350c:	27050513          	addi	a0,a0,624 # 7270 <levels.0+0x58>
    3510:	800fe0ef          	jal	ra,1510 <printk>
    3514:	08e00593          	li	a1,142
    3518:	22c48513          	addi	a0,s1,556
    351c:	eedfe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3520:	30042473          	csrrs	s0,mstatus,s0
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3524:	01812403          	lw	s0,24(sp)
    3528:	01c12083          	lw	ra,28(sp)
    352c:	01412483          	lw	s1,20(sp)
	z_impl_k_thread_abort(thread);
    3530:	00090513          	mv	a0,s2
    3534:	01012903          	lw	s2,16(sp)
    3538:	02010113          	addi	sp,sp,32
    353c:	07d0206f          	j	5db8 <z_impl_k_thread_abort>

00003540 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3540:	00007537          	lui	a0,0x7
    3544:	000087b7          	lui	a5,0x8
    3548:	71050613          	addi	a2,a0,1808 # 7710 <last_count>
    354c:	c0478793          	addi	a5,a5,-1020 # 7c04 <__bss_end>
    3550:	40c78633          	sub	a2,a5,a2
    3554:	00000593          	li	a1,0
    3558:	71050513          	addi	a0,a0,1808
    355c:	cf0ff06f          	j	2a4c <memset>

00003560 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3560:	ff010113          	addi	sp,sp,-16
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3564:	000077b7          	lui	a5,0x7
    3568:	00100713          	li	a4,1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    356c:	00200513          	li	a0,2
{
    3570:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
    3574:	74e78823          	sb	a4,1872(a5) # 7750 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3578:	d71ff0ef          	jal	ra,32e8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    357c:	00007637          	lui	a2,0x7
    3580:	000075b7          	lui	a1,0x7
    3584:	00007537          	lui	a0,0x7
    3588:	5b060613          	addi	a2,a2,1456 # 75b0 <levels.0+0x398>
    358c:	2a858593          	addi	a1,a1,680 # 72a8 <levels.0+0x90>
    3590:	2b850513          	addi	a0,a0,696 # 72b8 <levels.0+0xa0>
    3594:	f7dfd0ef          	jal	ra,1510 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3598:	00300513          	li	a0,3
    359c:	d4dff0ef          	jal	ra,32e8 <z_sys_init_run_level>

	z_init_static_threads();
    35a0:	5f8020ef          	jal	ra,5b98 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    35a4:	8f5fd0ef          	jal	ra,e98 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    35a8:	000087b7          	lui	a5,0x8
    35ac:	ad878793          	addi	a5,a5,-1320 # 7ad8 <z_main_thread>
    35b0:	00c7c703          	lbu	a4,12(a5)
    35b4:	ffe77713          	andi	a4,a4,-2
    35b8:	00e78623          	sb	a4,12(a5)

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    35bc:	00c12083          	lw	ra,12(sp)
    35c0:	01010113          	addi	sp,sp,16
    35c4:	00008067          	ret

000035c8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    35c8:	f5010113          	addi	sp,sp,-176
    35cc:	0a812423          	sw	s0,168(sp)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    35d0:	10100793          	li	a5,257
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    35d4:	00008437          	lui	s0,0x8
    35d8:	bd040413          	addi	s0,s0,-1072 # 7bd0 <_kernel>
	dummy_thread->base.user_options = K_ESSENTIAL;
    35dc:	00f11e23          	sh	a5,28(sp)

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    35e0:	00000513          	li	a0,0
	_current_cpu->current = dummy_thread;
    35e4:	01010793          	addi	a5,sp,16
{
    35e8:	0a112623          	sw	ra,172(sp)
    35ec:	00f42423          	sw	a5,8(s0)
    35f0:	0a912223          	sw	s1,164(sp)
    35f4:	0b212023          	sw	s2,160(sp)
    35f8:	09312e23          	sw	s3,156(sp)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    35fc:	cedff0ef          	jal	ra,32e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3600:	00100513          	li	a0,1
    3604:	ce5ff0ef          	jal	ra,32e8 <z_sys_init_run_level>
	z_sched_init();
    3608:	6c5010ef          	jal	ra,54cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    360c:	000077b7          	lui	a5,0x7
	_kernel.ready_q.cache = &z_main_thread;
    3610:	000084b7          	lui	s1,0x8
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3614:	00100993          	li	s3,1
    3618:	2e078793          	addi	a5,a5,736 # 72e0 <levels.0+0xc8>
    361c:	000036b7          	lui	a3,0x3
    3620:	000095b7          	lui	a1,0x9
	_kernel.ready_q.cache = &z_main_thread;
    3624:	ad848913          	addi	s2,s1,-1320 # 7ad8 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3628:	00f12223          	sw	a5,4(sp)
    362c:	00000893          	li	a7,0
    3630:	00000813          	li	a6,0
    3634:	00000713          	li	a4,0
    3638:	56068693          	addi	a3,a3,1376 # 3560 <bg_thread_main>
    363c:	40000613          	li	a2,1024
    3640:	e1058593          	addi	a1,a1,-496 # 8e10 <z_main_stack>
    3644:	01312023          	sw	s3,0(sp)
    3648:	00000793          	li	a5,0
    364c:	ad848513          	addi	a0,s1,-1320
	_kernel.ready_q.cache = &z_main_thread;
    3650:	03242023          	sw	s2,32(s0)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3654:	2e0020ef          	jal	ra,5934 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3658:	00d94783          	lbu	a5,13(s2)
	z_ready_thread(&z_main_thread);
    365c:	ad848513          	addi	a0,s1,-1320
    3660:	ffb7f793          	andi	a5,a5,-5
    3664:	00f906a3          	sb	a5,13(s2)
    3668:	198010ef          	jal	ra,4800 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    366c:	00008537          	lui	a0,0x8
    3670:	000076b7          	lui	a3,0x7
    3674:	000095b7          	lui	a1,0x9
    3678:	a5850493          	addi	s1,a0,-1448 # 7a58 <z_idle_threads>
    367c:	00012223          	sw	zero,4(sp)
    3680:	01312023          	sw	s3,0(sp)
    3684:	02800893          	li	a7,40
    3688:	00000813          	li	a6,0
    368c:	00000793          	li	a5,0
    3690:	00000713          	li	a4,0
    3694:	87c68693          	addi	a3,a3,-1924 # 687c <idle>
    3698:	20000613          	li	a2,512
    369c:	21058593          	addi	a1,a1,528 # 9210 <z_idle_stacks>
    36a0:	a5850513          	addi	a0,a0,-1448
    36a4:	290020ef          	jal	ra,5934 <z_setup_new_thread>
    36a8:	00d4c783          	lbu	a5,13(s1)
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    36ac:	00942623          	sw	s1,12(s0)
		_kernel.cpus[i].id = i;
    36b0:	00040a23          	sb	zero,20(s0)
    36b4:	ffb7f793          	andi	a5,a5,-5
    36b8:	00f486a3          	sb	a5,13(s1)
		_kernel.cpus[i].irq_stack =
    36bc:	0000a7b7          	lui	a5,0xa
    36c0:	c1078793          	addi	a5,a5,-1008 # 9c10 <_end>
    36c4:	00f42223          	sw	a5,4(s0)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    36c8:	000087b7          	lui	a5,0x8
    36cc:	be878793          	addi	a5,a5,-1048 # 7be8 <_kernel+0x18>
    36d0:	00f42c23          	sw	a5,24(s0)
	list->tail = (sys_dnode_t *)list;
    36d4:	00f42e23          	sw	a5,28(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    36d8:	00800513          	li	a0,8
    36dc:	30053573          	csrrc	a0,mstatus,a0
	ret = arch_swap(key);
    36e0:	00857513          	andi	a0,a0,8
    36e4:	b75fc0ef          	jal	ra,258 <arch_swap>

000036e8 <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    36e8:	00e50783          	lb	a5,14(a0)
    36ec:	00b78463          	beq	a5,a1,36f4 <adjust_owner_prio.isra.0+0xc>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    36f0:	4910106f          	j	5380 <z_set_prio>
	}
	return false;
}
    36f4:	00000513          	li	a0,0
    36f8:	00008067          	ret

000036fc <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    36fc:	00052423          	sw	zero,8(a0)
	mutex->lock_count = 0U;
    3700:	00052623          	sw	zero,12(a0)
	list->head = (sys_dnode_t *)list;
    3704:	00a52023          	sw	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
    3708:	00a52223          	sw	a0,4(a0)
}
    370c:	00000513          	li	a0,0
    3710:	00008067          	ret

00003714 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3714:	fe010113          	addi	sp,sp,-32
    3718:	01312623          	sw	s3,12(sp)
FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf);

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    371c:	000089b7          	lui	s3,0x8
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3720:	bd09a783          	lw	a5,-1072(s3) # 7bd0 <_kernel>
{
    3724:	00912a23          	sw	s1,20(sp)
    3728:	01412423          	sw	s4,8(sp)
    372c:	01512223          	sw	s5,4(sp)
    3730:	00112e23          	sw	ra,28(sp)
    3734:	00812c23          	sw	s0,24(sp)
    3738:	01212823          	sw	s2,16(sp)
    373c:	01612023          	sw	s6,0(sp)
    3740:	00050493          	mv	s1,a0
    3744:	00058a93          	mv	s5,a1
    3748:	00060a13          	mv	s4,a2
    374c:	bd098993          	addi	s3,s3,-1072
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3750:	02078e63          	beqz	a5,378c <z_impl_k_mutex_lock+0x78>
    3754:	00007437          	lui	s0,0x7
    3758:	000075b7          	lui	a1,0x7
    375c:	00007537          	lui	a0,0x7
    3760:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    3764:	07d00693          	li	a3,125
    3768:	2e840613          	addi	a2,s0,744 # 72e8 <levels.0+0xd0>
    376c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3770:	da1fd0ef          	jal	ra,1510 <printk>
    3774:	00007537          	lui	a0,0x7
    3778:	32050513          	addi	a0,a0,800 # 7320 <levels.0+0x108>
    377c:	d95fd0ef          	jal	ra,1510 <printk>
    3780:	07d00593          	li	a1,125
    3784:	2e840513          	addi	a0,s0,744
    3788:	c81fe0ef          	jal	ra,2408 <assert_post_action>
    378c:	00800913          	li	s2,8
    3790:	30093973          	csrrc	s2,mstatus,s2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3794:	00007437          	lui	s0,0x7
    3798:	73840513          	addi	a0,s0,1848 # 7738 <lock>
	key = (mstatus & MSTATUS_IEN);
    379c:	00897913          	andi	s2,s2,8
    37a0:	5a4020ef          	jal	ra,5d44 <z_spin_lock_valid>
    37a4:	04051063          	bnez	a0,37e4 <z_impl_k_mutex_lock+0xd0>
    37a8:	00007b37          	lui	s6,0x7
    37ac:	000075b7          	lui	a1,0x7
    37b0:	00007537          	lui	a0,0x7
    37b4:	05c00693          	li	a3,92
    37b8:	11cb0613          	addi	a2,s6,284 # 711c <led0_dev_cfg+0x20>
    37bc:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    37c0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    37c4:	d4dfd0ef          	jal	ra,1510 <printk>
    37c8:	00007537          	lui	a0,0x7
    37cc:	73840593          	addi	a1,s0,1848
    37d0:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    37d4:	d3dfd0ef          	jal	ra,1510 <printk>
    37d8:	05c00593          	li	a1,92
    37dc:	11cb0513          	addi	a0,s6,284
    37e0:	c29fe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    37e4:	73840513          	addi	a0,s0,1848
    37e8:	5b4020ef          	jal	ra,5d9c <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    37ec:	00c4a783          	lw	a5,12(s1)
    37f0:	06078663          	beqz	a5,385c <z_impl_k_mutex_lock+0x148>
    37f4:	0084a503          	lw	a0,8(s1)
    37f8:	0089a703          	lw	a4,8(s3)
    37fc:	0ee50a63          	beq	a0,a4,38f0 <z_impl_k_mutex_lock+0x1dc>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3800:	014ae7b3          	or	a5,s5,s4
    3804:	0e079a63          	bnez	a5,38f8 <z_impl_k_mutex_lock+0x1e4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3808:	73840513          	addi	a0,s0,1848
    380c:	560020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3810:	04051063          	bnez	a0,3850 <z_impl_k_mutex_lock+0x13c>
    3814:	000074b7          	lui	s1,0x7
    3818:	000075b7          	lui	a1,0x7
    381c:	00007537          	lui	a0,0x7
    3820:	08400693          	li	a3,132
    3824:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    3828:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    382c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3830:	ce1fd0ef          	jal	ra,1510 <printk>
    3834:	00007537          	lui	a0,0x7
    3838:	73840593          	addi	a1,s0,1848
    383c:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3840:	cd1fd0ef          	jal	ra,1510 <printk>
    3844:	08400593          	li	a1,132
    3848:	11c48513          	addi	a0,s1,284
    384c:	bbdfe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3850:	30092973          	csrrs	s2,mstatus,s2
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    3854:	ff000513          	li	a0,-16
    3858:	0700006f          	j	38c8 <z_impl_k_mutex_lock+0x1b4>
					_current->base.prio :
    385c:	0089a703          	lw	a4,8(s3)
    3860:	00e70703          	lb	a4,14(a4)
		mutex->lock_count++;
    3864:	00178793          	addi	a5,a5,1
    3868:	00f4a623          	sw	a5,12(s1)
		mutex->owner = _current;
    386c:	0089a783          	lw	a5,8(s3)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3870:	00e4a823          	sw	a4,16(s1)
    3874:	73840513          	addi	a0,s0,1848
		mutex->owner = _current;
    3878:	00f4a423          	sw	a5,8(s1)
    387c:	4f0020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3880:	04051063          	bnez	a0,38c0 <z_impl_k_mutex_lock+0x1ac>
    3884:	000074b7          	lui	s1,0x7
    3888:	000075b7          	lui	a1,0x7
    388c:	00007537          	lui	a0,0x7
    3890:	08400693          	li	a3,132
    3894:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    3898:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    389c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    38a0:	c71fd0ef          	jal	ra,1510 <printk>
    38a4:	00007537          	lui	a0,0x7
    38a8:	73840593          	addi	a1,s0,1848
    38ac:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    38b0:	c61fd0ef          	jal	ra,1510 <printk>
    38b4:	08400593          	li	a1,132
    38b8:	11c48513          	addi	a0,s1,284
    38bc:	b4dfe0ef          	jal	ra,2408 <assert_post_action>
    38c0:	30092973          	csrrs	s2,mstatus,s2
		return 0;
    38c4:	00000513          	li	a0,0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    38c8:	01c12083          	lw	ra,28(sp)
    38cc:	01812403          	lw	s0,24(sp)
    38d0:	01412483          	lw	s1,20(sp)
    38d4:	01012903          	lw	s2,16(sp)
    38d8:	00c12983          	lw	s3,12(sp)
    38dc:	00812a03          	lw	s4,8(sp)
    38e0:	00412a83          	lw	s5,4(sp)
    38e4:	00012b03          	lw	s6,0(sp)
    38e8:	02010113          	addi	sp,sp,32
    38ec:	00008067          	ret
					_current->base.prio :
    38f0:	0104a703          	lw	a4,16(s1)
    38f4:	f71ff06f          	j	3864 <z_impl_k_mutex_lock+0x150>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    38f8:	00e50783          	lb	a5,14(a0)
    38fc:	00e70583          	lb	a1,14(a4)
    3900:	00b7d463          	bge	a5,a1,3908 <z_impl_k_mutex_lock+0x1f4>
    3904:	00078593          	mv	a1,a5
    3908:	0005d463          	bgez	a1,3910 <z_impl_k_mutex_lock+0x1fc>
    390c:	00000593          	li	a1,0
	bool resched = false;
    3910:	00000993          	li	s3,0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3914:	00f5d663          	bge	a1,a5,3920 <z_impl_k_mutex_lock+0x20c>
		resched = adjust_owner_prio(mutex, new_prio);
    3918:	dd1ff0ef          	jal	ra,36e8 <adjust_owner_prio.isra.0>
    391c:	00050993          	mv	s3,a0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3920:	000a8693          	mv	a3,s5
    3924:	000a0713          	mv	a4,s4
    3928:	00048613          	mv	a2,s1
    392c:	00090593          	mv	a1,s2
    3930:	73840513          	addi	a0,s0,1848
    3934:	1b5010ef          	jal	ra,52e8 <z_pend_curr>
	if (got_mutex == 0) {
    3938:	f80508e3          	beqz	a0,38c8 <z_impl_k_mutex_lock+0x1b4>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    393c:	00800913          	li	s2,8
    3940:	30093973          	csrrc	s2,mstatus,s2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3944:	73840513          	addi	a0,s0,1848
	key = (mstatus & MSTATUS_IEN);
    3948:	00897913          	andi	s2,s2,8
    394c:	3f8020ef          	jal	ra,5d44 <z_spin_lock_valid>
    3950:	04051063          	bnez	a0,3990 <z_impl_k_mutex_lock+0x27c>
    3954:	00007a37          	lui	s4,0x7
    3958:	000075b7          	lui	a1,0x7
    395c:	00007537          	lui	a0,0x7
    3960:	05c00693          	li	a3,92
    3964:	11ca0613          	addi	a2,s4,284 # 711c <led0_dev_cfg+0x20>
    3968:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    396c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3970:	ba1fd0ef          	jal	ra,1510 <printk>
    3974:	00007537          	lui	a0,0x7
    3978:	73840593          	addi	a1,s0,1848
    397c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    3980:	b91fd0ef          	jal	ra,1510 <printk>
    3984:	05c00593          	li	a1,92
    3988:	11ca0513          	addi	a0,s4,284
    398c:	a7dfe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    3990:	73840513          	addi	a0,s0,1848
    3994:	408020ef          	jal	ra,5d9c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3998:	0004a783          	lw	a5,0(s1)
    399c:	0104a583          	lw	a1,16(s1)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39a0:	00978e63          	beq	a5,s1,39bc <z_impl_k_mutex_lock+0x2a8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    39a4:	00078c63          	beqz	a5,39bc <z_impl_k_mutex_lock+0x2a8>
    39a8:	00e78783          	lb	a5,14(a5)
    39ac:	00b7d463          	bge	a5,a1,39b4 <z_impl_k_mutex_lock+0x2a0>
    39b0:	00078593          	mv	a1,a5
    39b4:	0005d463          	bgez	a1,39bc <z_impl_k_mutex_lock+0x2a8>
    39b8:	00000593          	li	a1,0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    39bc:	0084a503          	lw	a0,8(s1)
    39c0:	d29ff0ef          	jal	ra,36e8 <adjust_owner_prio.isra.0>
    39c4:	00051463          	bnez	a0,39cc <z_impl_k_mutex_lock+0x2b8>
	if (resched) {
    39c8:	00098c63          	beqz	s3,39e0 <z_impl_k_mutex_lock+0x2cc>
		z_reschedule(&lock, key);
    39cc:	00090593          	mv	a1,s2
    39d0:	73840513          	addi	a0,s0,1848
    39d4:	4e4000ef          	jal	ra,3eb8 <z_reschedule>
	return -EAGAIN;
    39d8:	ff500513          	li	a0,-11
    39dc:	eedff06f          	j	38c8 <z_impl_k_mutex_lock+0x1b4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    39e0:	73840513          	addi	a0,s0,1848
    39e4:	388020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    39e8:	04051063          	bnez	a0,3a28 <z_impl_k_mutex_lock+0x314>
    39ec:	000074b7          	lui	s1,0x7
    39f0:	000075b7          	lui	a1,0x7
    39f4:	00007537          	lui	a0,0x7
    39f8:	08400693          	li	a3,132
    39fc:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    3a00:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    3a04:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3a08:	b09fd0ef          	jal	ra,1510 <printk>
    3a0c:	00007537          	lui	a0,0x7
    3a10:	73840593          	addi	a1,s0,1848
    3a14:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3a18:	af9fd0ef          	jal	ra,1510 <printk>
    3a1c:	08400593          	li	a1,132
    3a20:	11c48513          	addi	a0,s1,284
    3a24:	9e5fe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3a28:	30092973          	csrrs	s2,mstatus,s2
    3a2c:	fadff06f          	j	39d8 <z_impl_k_mutex_lock+0x2c4>

00003a30 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3a30:	fe010113          	addi	sp,sp,-32
    3a34:	00912a23          	sw	s1,20(sp)
    3a38:	000084b7          	lui	s1,0x8
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3a3c:	bd04a783          	lw	a5,-1072(s1) # 7bd0 <_kernel>
{
    3a40:	00812c23          	sw	s0,24(sp)
    3a44:	00112e23          	sw	ra,28(sp)
    3a48:	01212823          	sw	s2,16(sp)
    3a4c:	01312623          	sw	s3,12(sp)
    3a50:	00050413          	mv	s0,a0
    3a54:	bd048493          	addi	s1,s1,-1072
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3a58:	02078e63          	beqz	a5,3a94 <z_impl_k_mutex_unlock+0x64>
    3a5c:	00007937          	lui	s2,0x7
    3a60:	000075b7          	lui	a1,0x7
    3a64:	00007537          	lui	a0,0x7
    3a68:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    3a6c:	0d800693          	li	a3,216
    3a70:	2e890613          	addi	a2,s2,744 # 72e8 <levels.0+0xd0>
    3a74:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3a78:	a99fd0ef          	jal	ra,1510 <printk>
    3a7c:	00007537          	lui	a0,0x7
    3a80:	32050513          	addi	a0,a0,800 # 7320 <levels.0+0x108>
    3a84:	a8dfd0ef          	jal	ra,1510 <printk>
    3a88:	0d800593          	li	a1,216
    3a8c:	2e890513          	addi	a0,s2,744
    3a90:	979fe0ef          	jal	ra,2408 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
    3a94:	00842783          	lw	a5,8(s0)
		return -EINVAL;
    3a98:	fea00513          	li	a0,-22
	CHECKIF(mutex->owner == NULL) {
    3a9c:	0e078c63          	beqz	a5,3b94 <z_impl_k_mutex_unlock+0x164>
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3aa0:	0084a703          	lw	a4,8(s1)
		return -EPERM;
    3aa4:	fff00513          	li	a0,-1
	CHECKIF(mutex->owner != _current) {
    3aa8:	0ee79663          	bne	a5,a4,3b94 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    3aac:	00c42783          	lw	a5,12(s0)
    3ab0:	02079863          	bnez	a5,3ae0 <z_impl_k_mutex_unlock+0xb0>
    3ab4:	00007937          	lui	s2,0x7
    3ab8:	000075b7          	lui	a1,0x7
    3abc:	00007537          	lui	a0,0x7
    3ac0:	34858593          	addi	a1,a1,840 # 7348 <levels.0+0x130>
    3ac4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3ac8:	0ea00693          	li	a3,234
    3acc:	2e890613          	addi	a2,s2,744 # 72e8 <levels.0+0xd0>
    3ad0:	a41fd0ef          	jal	ra,1510 <printk>
    3ad4:	0ea00593          	li	a1,234
    3ad8:	2e890513          	addi	a0,s2,744
    3adc:	92dfe0ef          	jal	ra,2408 <assert_post_action>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    3ae0:	0004a783          	lw	a5,0(s1)
    3ae4:	02078e63          	beqz	a5,3b20 <z_impl_k_mutex_unlock+0xf0>
    3ae8:	00007937          	lui	s2,0x7
    3aec:	000075b7          	lui	a1,0x7
    3af0:	00007537          	lui	a0,0x7
    3af4:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    3af8:	10c00693          	li	a3,268
    3afc:	36090613          	addi	a2,s2,864 # 7360 <levels.0+0x148>
    3b00:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3b04:	a0dfd0ef          	jal	ra,1510 <printk>
    3b08:	00007537          	lui	a0,0x7
    3b0c:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    3b10:	a01fd0ef          	jal	ra,1510 <printk>
    3b14:	10c00593          	li	a1,268
    3b18:	36090513          	addi	a0,s2,864
    3b1c:	8edfe0ef          	jal	ra,2408 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    3b20:	0084a783          	lw	a5,8(s1)
    3b24:	00f7c703          	lbu	a4,15(a5)
    3b28:	00100793          	li	a5,1
    3b2c:	02f71e63          	bne	a4,a5,3b68 <z_impl_k_mutex_unlock+0x138>
    3b30:	00007937          	lui	s2,0x7
    3b34:	000075b7          	lui	a1,0x7
    3b38:	00007537          	lui	a0,0x7
    3b3c:	39058593          	addi	a1,a1,912 # 7390 <levels.0+0x178>
    3b40:	10d00693          	li	a3,269
    3b44:	36090613          	addi	a2,s2,864 # 7360 <levels.0+0x148>
    3b48:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3b4c:	9c5fd0ef          	jal	ra,1510 <printk>
    3b50:	00007537          	lui	a0,0x7
    3b54:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    3b58:	9b9fd0ef          	jal	ra,1510 <printk>
    3b5c:	10d00593          	li	a1,269
    3b60:	36090513          	addi	a0,s2,864
    3b64:	8a5fe0ef          	jal	ra,2408 <assert_post_action>

	--_current->base.sched_locked;
    3b68:	0084a703          	lw	a4,8(s1)
    3b6c:	00f74783          	lbu	a5,15(a4)
    3b70:	fff78793          	addi	a5,a5,-1
    3b74:	00f707a3          	sb	a5,15(a4)

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    3b78:	00c42783          	lw	a5,12(s0)
    3b7c:	00100713          	li	a4,1
    3b80:	02e78863          	beq	a5,a4,3bb0 <z_impl_k_mutex_unlock+0x180>
		mutex->lock_count--;
    3b84:	fff78793          	addi	a5,a5,-1
    3b88:	00f42623          	sw	a5,12(s0)
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    3b8c:	285000ef          	jal	ra,4610 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    3b90:	00000513          	li	a0,0
}
    3b94:	01c12083          	lw	ra,28(sp)
    3b98:	01812403          	lw	s0,24(sp)
    3b9c:	01412483          	lw	s1,20(sp)
    3ba0:	01012903          	lw	s2,16(sp)
    3ba4:	00c12983          	lw	s3,12(sp)
    3ba8:	02010113          	addi	sp,sp,32
    3bac:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
    3bb0:	00800593          	li	a1,8
    3bb4:	3005b5f3          	csrrc	a1,mstatus,a1
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3bb8:	000074b7          	lui	s1,0x7
    3bbc:	73848513          	addi	a0,s1,1848 # 7738 <lock>
	key = (mstatus & MSTATUS_IEN);
    3bc0:	0085f993          	andi	s3,a1,8
    3bc4:	180020ef          	jal	ra,5d44 <z_spin_lock_valid>
    3bc8:	04051063          	bnez	a0,3c08 <z_impl_k_mutex_unlock+0x1d8>
    3bcc:	00007937          	lui	s2,0x7
    3bd0:	000075b7          	lui	a1,0x7
    3bd4:	00007537          	lui	a0,0x7
    3bd8:	05c00693          	li	a3,92
    3bdc:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    3be0:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    3be4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3be8:	929fd0ef          	jal	ra,1510 <printk>
    3bec:	00007537          	lui	a0,0x7
    3bf0:	73848593          	addi	a1,s1,1848
    3bf4:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    3bf8:	919fd0ef          	jal	ra,1510 <printk>
    3bfc:	05c00593          	li	a1,92
    3c00:	11c90513          	addi	a0,s2,284
    3c04:	805fe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    3c08:	73848513          	addi	a0,s1,1848
    3c0c:	190020ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3c10:	01042583          	lw	a1,16(s0)
    3c14:	00842503          	lw	a0,8(s0)
    3c18:	ad1ff0ef          	jal	ra,36e8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3c1c:	00040513          	mv	a0,s0
    3c20:	614000ef          	jal	ra,4234 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3c24:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
    3c28:	02050263          	beqz	a0,3c4c <z_impl_k_mutex_unlock+0x21c>
		mutex->owner_orig_prio = new_owner->base.prio;
    3c2c:	00e50703          	lb	a4,14(a0)
    3c30:	00e42823          	sw	a4,16(s0)
	thread->arch.swap_return_value = value;
    3c34:	06052e23          	sw	zero,124(a0)
		z_ready_thread(new_owner);
    3c38:	3c9000ef          	jal	ra,4800 <z_ready_thread>
		z_reschedule(&lock, key);
    3c3c:	00098593          	mv	a1,s3
    3c40:	73848513          	addi	a0,s1,1848
    3c44:	274000ef          	jal	ra,3eb8 <z_reschedule>
    3c48:	f45ff06f          	j	3b8c <z_impl_k_mutex_unlock+0x15c>
		mutex->lock_count = 0U;
    3c4c:	00042623          	sw	zero,12(s0)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c50:	73848513          	addi	a0,s1,1848
    3c54:	118020ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3c58:	04051063          	bnez	a0,3c98 <z_impl_k_mutex_unlock+0x268>
    3c5c:	00007437          	lui	s0,0x7
    3c60:	000075b7          	lui	a1,0x7
    3c64:	00007537          	lui	a0,0x7
    3c68:	08400693          	li	a3,132
    3c6c:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    3c70:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    3c74:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3c78:	899fd0ef          	jal	ra,1510 <printk>
    3c7c:	00007537          	lui	a0,0x7
    3c80:	73848593          	addi	a1,s1,1848
    3c84:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3c88:	889fd0ef          	jal	ra,1510 <printk>
    3c8c:	08400593          	li	a1,132
    3c90:	11c40513          	addi	a0,s0,284
    3c94:	f74fe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3c98:	3009a5f3          	csrrs	a1,mstatus,s3
    3c9c:	ef1ff06f          	j	3b8c <z_impl_k_mutex_unlock+0x15c>

00003ca0 <z_priq_rb_lessthan>:
#endif

bool z_is_t1_higher_prio_than_t2(struct k_thread *thread_1,
				 struct k_thread *thread_2)
{
	if (thread_1->base.prio < thread_2->base.prio) {
    3ca0:	00e50703          	lb	a4,14(a0)
    3ca4:	00e58683          	lb	a3,14(a1)
	}
	return thread;
}

bool z_priq_rb_lessthan(struct rbnode *a, struct rbnode *b)
{
    3ca8:	00050793          	mv	a5,a0
	if (thread_1->base.prio < thread_2->base.prio) {
    3cac:	00d74e63          	blt	a4,a3,3cc8 <z_priq_rb_lessthan+0x28>
	thread_b = CONTAINER_OF(b, struct k_thread, base.qnode_rb);

	if (z_is_t1_higher_prio_than_t2(thread_a, thread_b)) {
		return true;
	} else if (z_is_t1_higher_prio_than_t2(thread_b, thread_a)) {
		return false;
    3cb0:	00000513          	li	a0,0
	if (thread_1->base.prio < thread_2->base.prio) {
    3cb4:	00e6cc63          	blt	a3,a4,3ccc <z_priq_rb_lessthan+0x2c>
	} else {
		return thread_a->base.order_key < thread_b->base.order_key
			? 1 : 0;
    3cb8:	0107a503          	lw	a0,16(a5)
    3cbc:	0105a783          	lw	a5,16(a1)
    3cc0:	00f53533          	sltu	a0,a0,a5
    3cc4:	00008067          	ret
		return true;
    3cc8:	00100513          	li	a0,1
	}
}
    3ccc:	00008067          	ret

00003cd0 <pended_on>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    3cd0:	00852783          	lw	a5,8(a0)
{
    3cd4:	ff010113          	addi	sp,sp,-16
    3cd8:	00812423          	sw	s0,8(sp)
    3cdc:	00112623          	sw	ra,12(sp)
    3ce0:	00912223          	sw	s1,4(sp)
    3ce4:	00050413          	mv	s0,a0
	__ASSERT_NO_MSG(thread->base.pended_on);
    3ce8:	02079863          	bnez	a5,3d18 <pended_on+0x48>
    3cec:	000074b7          	lui	s1,0x7
    3cf0:	000075b7          	lui	a1,0x7
    3cf4:	00007537          	lui	a0,0x7
    3cf8:	3e458593          	addi	a1,a1,996 # 73e4 <levels.0+0x1cc>
    3cfc:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3d00:	1ed00693          	li	a3,493
    3d04:	3c048613          	addi	a2,s1,960 # 73c0 <levels.0+0x1a8>
    3d08:	809fd0ef          	jal	ra,1510 <printk>
    3d0c:	1ed00593          	li	a1,493
    3d10:	3c048513          	addi	a0,s1,960
    3d14:	ef4fe0ef          	jal	ra,2408 <assert_post_action>
}
    3d18:	00842503          	lw	a0,8(s0)
    3d1c:	00c12083          	lw	ra,12(sp)
    3d20:	00812403          	lw	s0,8(sp)
    3d24:	00412483          	lw	s1,4(sp)
    3d28:	01010113          	addi	sp,sp,16
    3d2c:	00008067          	ret

00003d30 <z_reset_time_slice>:
{
    3d30:	ff010113          	addi	sp,sp,-16
    3d34:	00812423          	sw	s0,8(sp)
	if (slice_time != 0) {
    3d38:	00007437          	lui	s0,0x7
    3d3c:	74440413          	addi	s0,s0,1860 # 7744 <slice_time>
    3d40:	00042783          	lw	a5,0(s0)
{
    3d44:	00112623          	sw	ra,12(sp)
	if (slice_time != 0) {
    3d48:	02078863          	beqz	a5,3d78 <z_reset_time_slice+0x48>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3d4c:	c19fe0ef          	jal	ra,2964 <z_clock_elapsed>
    3d50:	00050793          	mv	a5,a0
    3d54:	00042503          	lw	a0,0(s0)
}
    3d58:	00812403          	lw	s0,8(sp)
    3d5c:	00c12083          	lw	ra,12(sp)
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3d60:	00f507b3          	add	a5,a0,a5
    3d64:	00008737          	lui	a4,0x8
    3d68:	bef72023          	sw	a5,-1056(a4) # 7be0 <_kernel+0x10>
		z_set_timeout_expiry(slice_time, false);
    3d6c:	00000593          	li	a1,0
}
    3d70:	01010113          	addi	sp,sp,16
		z_set_timeout_expiry(slice_time, false);
    3d74:	6440206f          	j	63b8 <z_set_timeout_expiry>
}
    3d78:	00c12083          	lw	ra,12(sp)
    3d7c:	00812403          	lw	s0,8(sp)
    3d80:	01010113          	addi	sp,sp,16
    3d84:	00008067          	ret

00003d88 <k_sched_time_slice_set>:
{
    3d88:	fe010113          	addi	sp,sp,-32
    3d8c:	00912a23          	sw	s1,20(sp)
    3d90:	01212823          	sw	s2,16(sp)
    3d94:	00112e23          	sw	ra,28(sp)
    3d98:	00812c23          	sw	s0,24(sp)
    3d9c:	01312623          	sw	s3,12(sp)
    3da0:	01412423          	sw	s4,8(sp)
    3da4:	00050493          	mv	s1,a0
    3da8:	00058913          	mv	s2,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    3dac:	00800793          	li	a5,8
    3db0:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3db4:	00007437          	lui	s0,0x7
    3db8:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    3dbc:	0087fa13          	andi	s4,a5,8
    3dc0:	785010ef          	jal	ra,5d44 <z_spin_lock_valid>
    3dc4:	04051063          	bnez	a0,3e04 <k_sched_time_slice_set+0x7c>
    3dc8:	000079b7          	lui	s3,0x7
    3dcc:	000075b7          	lui	a1,0x7
    3dd0:	00007537          	lui	a0,0x7
    3dd4:	05c00693          	li	a3,92
    3dd8:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    3ddc:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    3de0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3de4:	f2cfd0ef          	jal	ra,1510 <printk>
    3de8:	00007537          	lui	a0,0x7
    3dec:	73c40593          	addi	a1,s0,1852
    3df0:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    3df4:	f1cfd0ef          	jal	ra,1510 <printk>
    3df8:	05c00593          	li	a1,92
    3dfc:	11c98513          	addi	a0,s3,284
    3e00:	e08fe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    3e04:	73c40513          	addi	a0,s0,1852
    3e08:	795010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
    3e0c:	000087b7          	lui	a5,0x8
		t += off;
    3e10:	00948513          	addi	a0,s1,9
    3e14:	be07a023          	sw	zero,-1056(a5) # 7be0 <_kernel+0x10>
    3e18:	009535b3          	sltu	a1,a0,s1
		if (result32 && (t < BIT64(32))) {
    3e1c:	08956663          	bltu	a0,s1,3ea8 <k_sched_time_slice_set+0x120>
			return ((uint32_t)t) / (from_hz / to_hz);
    3e20:	00a00793          	li	a5,10
    3e24:	02f55533          	divu	a0,a0,a5
		slice_time = k_ms_to_ticks_ceil32(slice);
    3e28:	000077b7          	lui	a5,0x7
    3e2c:	74a7a223          	sw	a0,1860(a5) # 7744 <slice_time>
		slice_max_prio = prio;
    3e30:	000077b7          	lui	a5,0x7
    3e34:	7527a023          	sw	s2,1856(a5) # 7740 <slice_max_prio>
		z_reset_time_slice();
    3e38:	ef9ff0ef          	jal	ra,3d30 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e3c:	73c40513          	addi	a0,s0,1852
    3e40:	72d010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3e44:	04051063          	bnez	a0,3e84 <k_sched_time_slice_set+0xfc>
    3e48:	000074b7          	lui	s1,0x7
    3e4c:	000075b7          	lui	a1,0x7
    3e50:	00007537          	lui	a0,0x7
    3e54:	08400693          	li	a3,132
    3e58:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    3e5c:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    3e60:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3e64:	eacfd0ef          	jal	ra,1510 <printk>
    3e68:	00007537          	lui	a0,0x7
    3e6c:	73c40593          	addi	a1,s0,1852
    3e70:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3e74:	e9cfd0ef          	jal	ra,1510 <printk>
    3e78:	08400593          	li	a1,132
    3e7c:	11c48513          	addi	a0,s1,284
    3e80:	d88fe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3e84:	300a27f3          	csrrs	a5,mstatus,s4
}
    3e88:	01c12083          	lw	ra,28(sp)
    3e8c:	01812403          	lw	s0,24(sp)
    3e90:	01412483          	lw	s1,20(sp)
    3e94:	01012903          	lw	s2,16(sp)
    3e98:	00c12983          	lw	s3,12(sp)
    3e9c:	00812a03          	lw	s4,8(sp)
    3ea0:	02010113          	addi	sp,sp,32
    3ea4:	00008067          	ret
			return t / (from_hz / to_hz);
    3ea8:	00a00613          	li	a2,10
    3eac:	00000693          	li	a3,0
    3eb0:	c60fc0ef          	jal	ra,310 <__udivdi3>
    3eb4:	f75ff06f          	j	3e28 <k_sched_time_slice_set+0xa0>

00003eb8 <z_reschedule>:
{
    3eb8:	ff010113          	addi	sp,sp,-16
    3ebc:	00812423          	sw	s0,8(sp)
    3ec0:	01212023          	sw	s2,0(sp)
    3ec4:	00112623          	sw	ra,12(sp)
    3ec8:	00912223          	sw	s1,4(sp)
	 * have the single bit set).  But there is a mask applied to
	 * the argument in arch_irq_unlock() that has me worried
	 * that something elseswhere might try to set a bit?  Do it
	 * the safe way for now.
	 */
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    3ecc:	0085f913          	andi	s2,a1,8
    3ed0:	00050413          	mv	s0,a0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3ed4:	08090263          	beqz	s2,3f58 <z_reschedule+0xa0>
	return _kernel.cpus[0].nested != 0U;
    3ed8:	000087b7          	lui	a5,0x8
    3edc:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>
    3ee0:	0007a703          	lw	a4,0(a5)
    3ee4:	06071a63          	bnez	a4,3f58 <z_reschedule+0xa0>
	if (resched(key.key) && need_swap()) {
    3ee8:	0207a703          	lw	a4,32(a5)
    3eec:	0087a783          	lw	a5,8(a5)
    3ef0:	06f70463          	beq	a4,a5,3f58 <z_reschedule+0xa0>
    3ef4:	00058493          	mv	s1,a1
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ef8:	675010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3efc:	04051063          	bnez	a0,3f3c <z_reschedule+0x84>
    3f00:	00007937          	lui	s2,0x7
    3f04:	000075b7          	lui	a1,0x7
    3f08:	00007537          	lui	a0,0x7
    3f0c:	09b00693          	li	a3,155
    3f10:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    3f14:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    3f18:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3f1c:	df4fd0ef          	jal	ra,1510 <printk>
    3f20:	00007537          	lui	a0,0x7
    3f24:	00040593          	mv	a1,s0
    3f28:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3f2c:	de4fd0ef          	jal	ra,1510 <printk>
    3f30:	09b00593          	li	a1,155
    3f34:	11c90513          	addi	a0,s2,284
    3f38:	cd0fe0ef          	jal	ra,2408 <assert_post_action>
}
    3f3c:	00812403          	lw	s0,8(sp)
    3f40:	00c12083          	lw	ra,12(sp)
    3f44:	00012903          	lw	s2,0(sp)
    3f48:	00048513          	mv	a0,s1
    3f4c:	00412483          	lw	s1,4(sp)
    3f50:	01010113          	addi	sp,sp,16
    3f54:	b04fc06f          	j	258 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f58:	00040513          	mv	a0,s0
    3f5c:	611010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    3f60:	04051063          	bnez	a0,3fa0 <z_reschedule+0xe8>
    3f64:	000074b7          	lui	s1,0x7
    3f68:	000075b7          	lui	a1,0x7
    3f6c:	00007537          	lui	a0,0x7
    3f70:	08400693          	li	a3,132
    3f74:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    3f78:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    3f7c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    3f80:	d90fd0ef          	jal	ra,1510 <printk>
    3f84:	00007537          	lui	a0,0x7
    3f88:	00040593          	mv	a1,s0
    3f8c:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    3f90:	d80fd0ef          	jal	ra,1510 <printk>
    3f94:	08400593          	li	a1,132
    3f98:	11c48513          	addi	a0,s1,284
    3f9c:	c6cfe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3fa0:	30092973          	csrrs	s2,mstatus,s2
    3fa4:	00c12083          	lw	ra,12(sp)
    3fa8:	00812403          	lw	s0,8(sp)
    3fac:	00412483          	lw	s1,4(sp)
    3fb0:	00012903          	lw	s2,0(sp)
    3fb4:	01010113          	addi	sp,sp,16
    3fb8:	00008067          	ret

00003fbc <z_reschedule_irqlock>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    3fbc:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3fc0:	00078a63          	beqz	a5,3fd4 <z_reschedule_irqlock+0x18>
    3fc4:	00008737          	lui	a4,0x8
    3fc8:	bd072703          	lw	a4,-1072(a4) # 7bd0 <_kernel>
    3fcc:	00071463          	bnez	a4,3fd4 <z_reschedule_irqlock+0x18>
    3fd0:	a88fc06f          	j	258 <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    3fd4:	3007a7f3          	csrrs	a5,mstatus,a5
}
    3fd8:	00008067          	ret

00003fdc <z_reschedule_unlocked>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    3fdc:	00800513          	li	a0,8
    3fe0:	30053573          	csrrc	a0,mstatus,a0
	(void) z_reschedule_irqlock(arch_irq_lock());
    3fe4:	00857513          	andi	a0,a0,8
    3fe8:	fd5ff06f          	j	3fbc <z_reschedule_irqlock>

00003fec <k_sched_lock>:
{
    3fec:	fe010113          	addi	sp,sp,-32
    3ff0:	00112e23          	sw	ra,28(sp)
    3ff4:	00812c23          	sw	s0,24(sp)
    3ff8:	00912a23          	sw	s1,20(sp)
    3ffc:	01212823          	sw	s2,16(sp)
    4000:	01312623          	sw	s3,12(sp)
    4004:	00800793          	li	a5,8
    4008:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    400c:	00007437          	lui	s0,0x7
    4010:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4014:	0087f993          	andi	s3,a5,8
    4018:	52d010ef          	jal	ra,5d44 <z_spin_lock_valid>
    401c:	04051063          	bnez	a0,405c <k_sched_lock+0x70>
    4020:	000074b7          	lui	s1,0x7
    4024:	000075b7          	lui	a1,0x7
    4028:	00007537          	lui	a0,0x7
    402c:	05c00693          	li	a3,92
    4030:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4034:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4038:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    403c:	cd4fd0ef          	jal	ra,1510 <printk>
    4040:	00007537          	lui	a0,0x7
    4044:	73c40593          	addi	a1,s0,1852
    4048:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    404c:	cc4fd0ef          	jal	ra,1510 <printk>
    4050:	05c00593          	li	a1,92
    4054:	11c48513          	addi	a0,s1,284
    4058:	bb0fe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    405c:	73c40513          	addi	a0,s0,1852
    4060:	000084b7          	lui	s1,0x8
    4064:	539010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	__ASSERT(!arch_is_in_isr(), "");
    4068:	bd04a783          	lw	a5,-1072(s1) # 7bd0 <_kernel>
    406c:	bd048493          	addi	s1,s1,-1072
    4070:	02078e63          	beqz	a5,40ac <k_sched_lock+0xc0>
    4074:	00007937          	lui	s2,0x7
    4078:	000075b7          	lui	a1,0x7
    407c:	00007537          	lui	a0,0x7
    4080:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    4084:	10c00693          	li	a3,268
    4088:	36090613          	addi	a2,s2,864 # 7360 <levels.0+0x148>
    408c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4090:	c80fd0ef          	jal	ra,1510 <printk>
    4094:	00007537          	lui	a0,0x7
    4098:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    409c:	c74fd0ef          	jal	ra,1510 <printk>
    40a0:	10c00593          	li	a1,268
    40a4:	36090513          	addi	a0,s2,864
    40a8:	b60fe0ef          	jal	ra,2408 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    40ac:	0084a783          	lw	a5,8(s1)
    40b0:	00f7c703          	lbu	a4,15(a5)
    40b4:	00100793          	li	a5,1
    40b8:	02f71e63          	bne	a4,a5,40f4 <k_sched_lock+0x108>
    40bc:	00007937          	lui	s2,0x7
    40c0:	000075b7          	lui	a1,0x7
    40c4:	00007537          	lui	a0,0x7
    40c8:	39058593          	addi	a1,a1,912 # 7390 <levels.0+0x178>
    40cc:	10d00693          	li	a3,269
    40d0:	36090613          	addi	a2,s2,864 # 7360 <levels.0+0x148>
    40d4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    40d8:	c38fd0ef          	jal	ra,1510 <printk>
    40dc:	00007537          	lui	a0,0x7
    40e0:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    40e4:	c2cfd0ef          	jal	ra,1510 <printk>
    40e8:	10d00593          	li	a1,269
    40ec:	36090513          	addi	a0,s2,864
    40f0:	b18fe0ef          	jal	ra,2408 <assert_post_action>
	--_current->base.sched_locked;
    40f4:	0084a703          	lw	a4,8(s1)
    40f8:	00f74783          	lbu	a5,15(a4)
    40fc:	fff78793          	addi	a5,a5,-1
    4100:	00f707a3          	sb	a5,15(a4)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4104:	73c40513          	addi	a0,s0,1852
    4108:	465010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    410c:	04051063          	bnez	a0,414c <k_sched_lock+0x160>
    4110:	000074b7          	lui	s1,0x7
    4114:	000075b7          	lui	a1,0x7
    4118:	00007537          	lui	a0,0x7
    411c:	08400693          	li	a3,132
    4120:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4124:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4128:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    412c:	be4fd0ef          	jal	ra,1510 <printk>
    4130:	00007537          	lui	a0,0x7
    4134:	73c40593          	addi	a1,s0,1852
    4138:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    413c:	bd4fd0ef          	jal	ra,1510 <printk>
    4140:	08400593          	li	a1,132
    4144:	11c48513          	addi	a0,s1,284
    4148:	ac0fe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    414c:	3009a7f3          	csrrs	a5,mstatus,s3
}
    4150:	01c12083          	lw	ra,28(sp)
    4154:	01812403          	lw	s0,24(sp)
    4158:	01412483          	lw	s1,20(sp)
    415c:	01012903          	lw	s2,16(sp)
    4160:	00c12983          	lw	s3,12(sp)
    4164:	02010113          	addi	sp,sp,32
    4168:	00008067          	ret

0000416c <z_priq_dumb_remove>:
{
    416c:	ff010113          	addi	sp,sp,-16
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4170:	000087b7          	lui	a5,0x8
{
    4174:	00812423          	sw	s0,8(sp)
    4178:	00112623          	sw	ra,12(sp)
    417c:	00912223          	sw	s1,4(sp)
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4180:	a5878793          	addi	a5,a5,-1448 # 7a58 <z_idle_threads>
{
    4184:	00058413          	mv	s0,a1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4188:	02f59863          	bne	a1,a5,41b8 <z_priq_dumb_remove+0x4c>
    418c:	000074b7          	lui	s1,0x7
    4190:	000075b7          	lui	a1,0x7
    4194:	00007537          	lui	a0,0x7
    4198:	3fc58593          	addi	a1,a1,1020 # 73fc <levels.0+0x1e4>
    419c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    41a0:	39f00693          	li	a3,927
    41a4:	3c048613          	addi	a2,s1,960 # 73c0 <levels.0+0x1a8>
    41a8:	b68fd0ef          	jal	ra,1510 <printk>
    41ac:	39f00593          	li	a1,927
    41b0:	3c048513          	addi	a0,s1,960
    41b4:	a54fe0ef          	jal	ra,2408 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    41b8:	00442703          	lw	a4,4(s0)
    41bc:	00042783          	lw	a5,0(s0)
}
    41c0:	00c12083          	lw	ra,12(sp)
    41c4:	00412483          	lw	s1,4(sp)
    41c8:	00f72023          	sw	a5,0(a4)
	node->next->prev = node->prev;
    41cc:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    41d0:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
    41d4:	00042223          	sw	zero,4(s0)
    41d8:	00812403          	lw	s0,8(sp)
    41dc:	01010113          	addi	sp,sp,16
    41e0:	00008067          	ret

000041e4 <unpend_thread_no_timeout>:
{
    41e4:	ff010113          	addi	sp,sp,-16
    41e8:	00112623          	sw	ra,12(sp)
    41ec:	00812423          	sw	s0,8(sp)
    41f0:	00050413          	mv	s0,a0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    41f4:	addff0ef          	jal	ra,3cd0 <pended_on>
    41f8:	00040593          	mv	a1,s0
    41fc:	f71ff0ef          	jal	ra,416c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4200:	00d44783          	lbu	a5,13(s0)
}
    4204:	00c12083          	lw	ra,12(sp)
	thread->base.pended_on = NULL;
    4208:	00042423          	sw	zero,8(s0)
    420c:	ffd7f793          	andi	a5,a5,-3
    4210:	00f406a3          	sb	a5,13(s0)
}
    4214:	00812403          	lw	s0,8(sp)
    4218:	01010113          	addi	sp,sp,16
    421c:	00008067          	ret

00004220 <z_priq_dumb_best>:
{
    4220:	00050793          	mv	a5,a0
	return list->head == list;
    4224:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4228:	00a79463          	bne	a5,a0,4230 <z_priq_dumb_best+0x10>
	struct k_thread *thread = NULL;
    422c:	00000513          	li	a0,0
}
    4230:	00008067          	ret

00004234 <z_unpend_first_thread>:
{
    4234:	fe010113          	addi	sp,sp,-32
    4238:	00912a23          	sw	s1,20(sp)
    423c:	01212823          	sw	s2,16(sp)
    4240:	00112e23          	sw	ra,28(sp)
    4244:	00812c23          	sw	s0,24(sp)
    4248:	01312623          	sw	s3,12(sp)
    424c:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4250:	00800913          	li	s2,8
    4254:	30093973          	csrrc	s2,mstatus,s2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4258:	00007437          	lui	s0,0x7
    425c:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4260:	00897913          	andi	s2,s2,8
    4264:	2e1010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4268:	04051063          	bnez	a0,42a8 <z_unpend_first_thread+0x74>
    426c:	000079b7          	lui	s3,0x7
    4270:	000075b7          	lui	a1,0x7
    4274:	00007537          	lui	a0,0x7
    4278:	05c00693          	li	a3,92
    427c:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    4280:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4284:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4288:	a88fd0ef          	jal	ra,1510 <printk>
    428c:	00007537          	lui	a0,0x7
    4290:	73c40593          	addi	a1,s0,1852
    4294:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4298:	a78fd0ef          	jal	ra,1510 <printk>
    429c:	05c00593          	li	a1,92
    42a0:	11c98513          	addi	a0,s3,284
    42a4:	964fe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    42a8:	73c40513          	addi	a0,s0,1852
    42ac:	2f1010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
    42b0:	00048513          	mv	a0,s1
    42b4:	f6dff0ef          	jal	ra,4220 <z_priq_dumb_best>
    42b8:	00050493          	mv	s1,a0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42bc:	73c40513          	addi	a0,s0,1852
    42c0:	2ad010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    42c4:	04051063          	bnez	a0,4304 <z_unpend_first_thread+0xd0>
    42c8:	000079b7          	lui	s3,0x7
    42cc:	000075b7          	lui	a1,0x7
    42d0:	00007537          	lui	a0,0x7
    42d4:	08400693          	li	a3,132
    42d8:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    42dc:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    42e0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    42e4:	a2cfd0ef          	jal	ra,1510 <printk>
    42e8:	00007537          	lui	a0,0x7
    42ec:	73c40593          	addi	a1,s0,1852
    42f0:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    42f4:	a1cfd0ef          	jal	ra,1510 <printk>
    42f8:	08400593          	li	a1,132
    42fc:	11c98513          	addi	a0,s3,284
    4300:	908fe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    4304:	30092973          	csrrs	s2,mstatus,s2

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4308:	0a048e63          	beqz	s1,43c4 <z_unpend_first_thread+0x190>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    430c:	00800913          	li	s2,8
    4310:	30093973          	csrrc	s2,mstatus,s2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4314:	73c40513          	addi	a0,s0,1852
	key = (mstatus & MSTATUS_IEN);
    4318:	00897913          	andi	s2,s2,8
    431c:	229010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4320:	04051063          	bnez	a0,4360 <z_unpend_first_thread+0x12c>
    4324:	000079b7          	lui	s3,0x7
    4328:	000075b7          	lui	a1,0x7
    432c:	00007537          	lui	a0,0x7
    4330:	05c00693          	li	a3,92
    4334:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    4338:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    433c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4340:	9d0fd0ef          	jal	ra,1510 <printk>
    4344:	00007537          	lui	a0,0x7
    4348:	73c40593          	addi	a1,s0,1852
    434c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4350:	9c0fd0ef          	jal	ra,1510 <printk>
    4354:	05c00593          	li	a1,92
    4358:	11c98513          	addi	a0,s3,284
    435c:	8acfe0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4360:	73c40513          	addi	a0,s0,1852
    4364:	239010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    4368:	00048513          	mv	a0,s1
    436c:	e79ff0ef          	jal	ra,41e4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4370:	73c40513          	addi	a0,s0,1852
    4374:	1f9010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    4378:	04051063          	bnez	a0,43b8 <z_unpend_first_thread+0x184>
    437c:	000079b7          	lui	s3,0x7
    4380:	000075b7          	lui	a1,0x7
    4384:	00007537          	lui	a0,0x7
    4388:	08400693          	li	a3,132
    438c:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    4390:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4394:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4398:	978fd0ef          	jal	ra,1510 <printk>
    439c:	00007537          	lui	a0,0x7
    43a0:	73c40593          	addi	a1,s0,1852
    43a4:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    43a8:	968fd0ef          	jal	ra,1510 <printk>
    43ac:	08400593          	li	a1,132
    43b0:	11c98513          	addi	a0,s3,284
    43b4:	854fe0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    43b8:	30092973          	csrrs	s2,mstatus,s2
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    43bc:	01848513          	addi	a0,s1,24
    43c0:	60d010ef          	jal	ra,61cc <z_abort_timeout>
}
    43c4:	01c12083          	lw	ra,28(sp)
    43c8:	01812403          	lw	s0,24(sp)
    43cc:	01012903          	lw	s2,16(sp)
    43d0:	00c12983          	lw	s3,12(sp)
    43d4:	00048513          	mv	a0,s1
    43d8:	01412483          	lw	s1,20(sp)
    43dc:	02010113          	addi	sp,sp,32
    43e0:	00008067          	ret

000043e4 <z_priq_rb_add>:

void z_priq_rb_add(struct _priq_rb *pq, struct k_thread *thread)
{
    43e4:	fd010113          	addi	sp,sp,-48
    43e8:	02812423          	sw	s0,40(sp)
    43ec:	02912223          	sw	s1,36(sp)
    43f0:	03212023          	sw	s2,32(sp)
    43f4:	02112623          	sw	ra,44(sp)
    43f8:	01312e23          	sw	s3,28(sp)
    43fc:	03010413          	addi	s0,sp,48
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4400:	000087b7          	lui	a5,0x8
    4404:	a5878793          	addi	a5,a5,-1448 # 7a58 <z_idle_threads>
{
    4408:	00050493          	mv	s1,a0
    440c:	00058913          	mv	s2,a1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4410:	02f59863          	bne	a1,a5,4440 <z_priq_rb_add+0x5c>
    4414:	000079b7          	lui	s3,0x7
    4418:	000075b7          	lui	a1,0x7
    441c:	00007537          	lui	a0,0x7
    4420:	3fc58593          	addi	a1,a1,1020 # 73fc <levels.0+0x1e4>
    4424:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4428:	3c400693          	li	a3,964
    442c:	3c098613          	addi	a2,s3,960 # 73c0 <levels.0+0x1a8>
    4430:	8e0fd0ef          	jal	ra,1510 <printk>
    4434:	3c400593          	li	a1,964
    4438:	3c098513          	addi	a0,s3,960
    443c:	fcdfd0ef          	jal	ra,2408 <assert_post_action>

	thread->base.order_key = pq->next_order_key++;
    4440:	00c4a703          	lw	a4,12(s1)
    4444:	00170793          	addi	a5,a4,1
    4448:	00f4a623          	sw	a5,12(s1)
    444c:	00e92823          	sw	a4,16(s2)
	 * will almost never be hit on real systems.  BUT on very
	 * long-running systems where a priq never completely empties
	 * AND that contains very large numbers of threads, it can be
	 * a latency glitch to loop over all the threads like this.
	 */
	if (!pq->next_order_key) {
    4450:	04079a63          	bnez	a5,44a4 <z_priq_rb_add+0xc0>
		RB_FOR_EACH_CONTAINER(&pq->tree, t, base.qnode_rb) {
    4454:	0084a783          	lw	a5,8(s1)
    4458:	00279713          	slli	a4,a5,0x2
    445c:	01770713          	addi	a4,a4,23
    4460:	ff077713          	andi	a4,a4,-16
    4464:	01778793          	addi	a5,a5,23
    4468:	40e10133          	sub	sp,sp,a4
    446c:	ff07f793          	andi	a5,a5,-16
    4470:	00f10713          	addi	a4,sp,15
    4474:	40f10133          	sub	sp,sp,a5
    4478:	00f10793          	addi	a5,sp,15
    447c:	ff07f793          	andi	a5,a5,-16
    4480:	ff077713          	andi	a4,a4,-16
    4484:	fcf42c23          	sw	a5,-40(s0)
    4488:	fff00793          	li	a5,-1
    448c:	fce42a23          	sw	a4,-44(s0)
    4490:	fcf42e23          	sw	a5,-36(s0)
    4494:	fd440593          	addi	a1,s0,-44
    4498:	00048513          	mv	a0,s1
    449c:	a35fd0ef          	jal	ra,1ed0 <z_rb_foreach_next>
    44a0:	02051863          	bnez	a0,44d0 <z_priq_rb_add+0xec>
			t->base.order_key = pq->next_order_key++;
		}
	}

	rb_insert(&pq->tree, &thread->base.qnode_rb);
    44a4:	00090593          	mv	a1,s2
    44a8:	00048513          	mv	a0,s1
    44ac:	d7cfd0ef          	jal	ra,1a28 <rb_insert>
}
    44b0:	fd040113          	addi	sp,s0,-48
    44b4:	02c12083          	lw	ra,44(sp)
    44b8:	02812403          	lw	s0,40(sp)
    44bc:	02412483          	lw	s1,36(sp)
    44c0:	02012903          	lw	s2,32(sp)
    44c4:	01c12983          	lw	s3,28(sp)
    44c8:	03010113          	addi	sp,sp,48
    44cc:	00008067          	ret
			t->base.order_key = pq->next_order_key++;
    44d0:	00c4a783          	lw	a5,12(s1)
    44d4:	00178713          	addi	a4,a5,1
    44d8:	00e4a623          	sw	a4,12(s1)
    44dc:	00f52823          	sw	a5,16(a0)
    44e0:	fb5ff06f          	j	4494 <z_priq_rb_add+0xb0>

000044e4 <z_priq_rb_remove>:

void z_priq_rb_remove(struct _priq_rb *pq, struct k_thread *thread)
{
    44e4:	ff010113          	addi	sp,sp,-16
	if (pq == &_kernel.ready_q.runq && thread == _current &&
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    44e8:	000087b7          	lui	a5,0x8
{
    44ec:	00812423          	sw	s0,8(sp)
    44f0:	00912223          	sw	s1,4(sp)
    44f4:	00112623          	sw	ra,12(sp)
    44f8:	01212023          	sw	s2,0(sp)
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    44fc:	a5878793          	addi	a5,a5,-1448 # 7a58 <z_idle_threads>
{
    4500:	00050413          	mv	s0,a0
    4504:	00058493          	mv	s1,a1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4508:	02f59863          	bne	a1,a5,4538 <z_priq_rb_remove+0x54>
    450c:	00007937          	lui	s2,0x7
    4510:	000075b7          	lui	a1,0x7
    4514:	00007537          	lui	a0,0x7
    4518:	3fc58593          	addi	a1,a1,1020 # 73fc <levels.0+0x1e4>
    451c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4520:	3df00693          	li	a3,991
    4524:	3c090613          	addi	a2,s2,960 # 73c0 <levels.0+0x1a8>
    4528:	fe9fc0ef          	jal	ra,1510 <printk>
    452c:	3df00593          	li	a1,991
    4530:	3c090513          	addi	a0,s2,960
    4534:	ed5fd0ef          	jal	ra,2408 <assert_post_action>

	rb_remove(&pq->tree, &thread->base.qnode_rb);
    4538:	00048593          	mv	a1,s1
    453c:	00040513          	mv	a0,s0
    4540:	ef0fd0ef          	jal	ra,1c30 <rb_remove>

	if (!pq->tree.root) {
    4544:	00042783          	lw	a5,0(s0)
    4548:	00079463          	bnez	a5,4550 <z_priq_rb_remove+0x6c>
		pq->next_order_key = 0;
    454c:	00042623          	sw	zero,12(s0)
	}
}
    4550:	00c12083          	lw	ra,12(sp)
    4554:	00812403          	lw	s0,8(sp)
    4558:	00412483          	lw	s1,4(sp)
    455c:	00012903          	lw	s2,0(sp)
    4560:	01010113          	addi	sp,sp,16
    4564:	00008067          	ret

00004568 <z_priq_rb_best>:
/**
 * @brief Returns the lowest-sorted member of the tree
 */
static inline struct rbnode *rb_get_min(struct rbtree *tree)
{
	return z_rb_get_minmax(tree, 0);
    4568:	00000593          	li	a1,0
    456c:	c90fd06f          	j	19fc <z_rb_get_minmax>

00004570 <update_cache>:
{
    4570:	fe010113          	addi	sp,sp,-32
    4574:	00812c23          	sw	s0,24(sp)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4578:	00008437          	lui	s0,0x8
{
    457c:	01312623          	sw	s3,12(sp)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4580:	bd040993          	addi	s3,s0,-1072 # 7bd0 <_kernel>
{
    4584:	01212823          	sw	s2,16(sp)
    4588:	00050913          	mv	s2,a0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    458c:	02498513          	addi	a0,s3,36
{
    4590:	00912a23          	sw	s1,20(sp)
    4594:	00112e23          	sw	ra,28(sp)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4598:	fd1ff0ef          	jal	ra,4568 <z_priq_rb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    459c:	0089a783          	lw	a5,8(s3)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    45a0:	00050493          	mv	s1,a0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    45a4:	bd040413          	addi	s0,s0,-1072
    45a8:	00d7c703          	lbu	a4,13(a5)
    45ac:	02077693          	andi	a3,a4,32
    45b0:	00068663          	beqz	a3,45bc <update_cache+0x4c>
		_current->base.thread_state |= _THREAD_DEAD;
    45b4:	00876713          	ori	a4,a4,8
    45b8:	00e786a3          	sb	a4,13(a5)
	return thread ? thread : _current_cpu->idle_thread;
    45bc:	00049463          	bnez	s1,45c4 <update_cache+0x54>
    45c0:	00c42483          	lw	s1,12(s0)
	if (preempt_ok != 0) {
    45c4:	02091e63          	bnez	s2,4600 <update_cache+0x90>
	if (z_is_thread_prevented_from_running(_current)) {
    45c8:	00d7c703          	lbu	a4,13(a5)
    45cc:	01f77713          	andi	a4,a4,31
    45d0:	02071863          	bnez	a4,4600 <update_cache+0x90>
	if (is_preempt(_current) || is_metairq(thread)) {
    45d4:	00e7d683          	lhu	a3,14(a5)
    45d8:	07f00713          	li	a4,127
    45dc:	02d77263          	bgeu	a4,a3,4600 <update_cache+0x90>
		_kernel.ready_q.cache = _current;
    45e0:	02f42023          	sw	a5,32(s0)
}
    45e4:	01c12083          	lw	ra,28(sp)
    45e8:	01812403          	lw	s0,24(sp)
    45ec:	01412483          	lw	s1,20(sp)
    45f0:	01012903          	lw	s2,16(sp)
    45f4:	00c12983          	lw	s3,12(sp)
    45f8:	02010113          	addi	sp,sp,32
    45fc:	00008067          	ret
		if (thread != _current) {
    4600:	00978463          	beq	a5,s1,4608 <update_cache+0x98>
			z_reset_time_slice();
    4604:	f2cff0ef          	jal	ra,3d30 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4608:	02942023          	sw	s1,32(s0)
}
    460c:	fd9ff06f          	j	45e4 <update_cache+0x74>

00004610 <k_sched_unlock>:
{
    4610:	fe010113          	addi	sp,sp,-32
    4614:	00112e23          	sw	ra,28(sp)
    4618:	00812c23          	sw	s0,24(sp)
    461c:	00912a23          	sw	s1,20(sp)
    4620:	01212823          	sw	s2,16(sp)
    4624:	01312623          	sw	s3,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4628:	00800793          	li	a5,8
    462c:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4630:	00007437          	lui	s0,0x7
    4634:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4638:	0087f993          	andi	s3,a5,8
    463c:	708010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4640:	04051063          	bnez	a0,4680 <k_sched_unlock+0x70>
    4644:	000074b7          	lui	s1,0x7
    4648:	000075b7          	lui	a1,0x7
    464c:	00007537          	lui	a0,0x7
    4650:	05c00693          	li	a3,92
    4654:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4658:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    465c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4660:	eb1fc0ef          	jal	ra,1510 <printk>
    4664:	00007537          	lui	a0,0x7
    4668:	73c40593          	addi	a1,s0,1852
    466c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4670:	ea1fc0ef          	jal	ra,1510 <printk>
    4674:	05c00593          	li	a1,92
    4678:	11c48513          	addi	a0,s1,284
    467c:	d8dfd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4680:	73c40513          	addi	a0,s0,1852
    4684:	718010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		__ASSERT(_current->base.sched_locked != 0, "");
    4688:	000084b7          	lui	s1,0x8
    468c:	bd048793          	addi	a5,s1,-1072 # 7bd0 <_kernel>
    4690:	0087a783          	lw	a5,8(a5)
    4694:	bd048493          	addi	s1,s1,-1072
    4698:	00f7c783          	lbu	a5,15(a5)
    469c:	02079e63          	bnez	a5,46d8 <k_sched_unlock+0xc8>
    46a0:	00007937          	lui	s2,0x7
    46a4:	000075b7          	lui	a1,0x7
    46a8:	00007537          	lui	a0,0x7
    46ac:	42058593          	addi	a1,a1,1056 # 7420 <levels.0+0x208>
    46b0:	33a00693          	li	a3,826
    46b4:	3c090613          	addi	a2,s2,960 # 73c0 <levels.0+0x1a8>
    46b8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    46bc:	e55fc0ef          	jal	ra,1510 <printk>
    46c0:	00007537          	lui	a0,0x7
    46c4:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    46c8:	e49fc0ef          	jal	ra,1510 <printk>
    46cc:	33a00593          	li	a1,826
    46d0:	3c090513          	addi	a0,s2,960
    46d4:	d35fd0ef          	jal	ra,2408 <assert_post_action>
		__ASSERT(!arch_is_in_isr(), "");
    46d8:	0004a783          	lw	a5,0(s1)
    46dc:	02078e63          	beqz	a5,4718 <k_sched_unlock+0x108>
    46e0:	00007937          	lui	s2,0x7
    46e4:	000075b7          	lui	a1,0x7
    46e8:	00007537          	lui	a0,0x7
    46ec:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    46f0:	33b00693          	li	a3,827
    46f4:	3c090613          	addi	a2,s2,960 # 73c0 <levels.0+0x1a8>
    46f8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    46fc:	e15fc0ef          	jal	ra,1510 <printk>
    4700:	00007537          	lui	a0,0x7
    4704:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    4708:	e09fc0ef          	jal	ra,1510 <printk>
    470c:	33b00593          	li	a1,827
    4710:	3c090513          	addi	a0,s2,960
    4714:	cf5fd0ef          	jal	ra,2408 <assert_post_action>
		++_current->base.sched_locked;
    4718:	0084a703          	lw	a4,8(s1)
		update_cache(0);
    471c:	00000513          	li	a0,0
		++_current->base.sched_locked;
    4720:	00f74783          	lbu	a5,15(a4)
    4724:	00178793          	addi	a5,a5,1
    4728:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
    472c:	e45ff0ef          	jal	ra,4570 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4730:	73c40513          	addi	a0,s0,1852
    4734:	638010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    4738:	04051063          	bnez	a0,4778 <k_sched_unlock+0x168>
    473c:	000074b7          	lui	s1,0x7
    4740:	000075b7          	lui	a1,0x7
    4744:	00007537          	lui	a0,0x7
    4748:	08400693          	li	a3,132
    474c:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4750:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4754:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4758:	db9fc0ef          	jal	ra,1510 <printk>
    475c:	00007537          	lui	a0,0x7
    4760:	73c40593          	addi	a1,s0,1852
    4764:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    4768:	da9fc0ef          	jal	ra,1510 <printk>
    476c:	08400593          	li	a1,132
    4770:	11c48513          	addi	a0,s1,284
    4774:	c95fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    4778:	3009a7f3          	csrrs	a5,mstatus,s3
}
    477c:	01812403          	lw	s0,24(sp)
    4780:	01c12083          	lw	ra,28(sp)
    4784:	01412483          	lw	s1,20(sp)
    4788:	01012903          	lw	s2,16(sp)
    478c:	00c12983          	lw	s3,12(sp)
    4790:	02010113          	addi	sp,sp,32
	z_reschedule_unlocked();
    4794:	849ff06f          	j	3fdc <z_reschedule_unlocked>

00004798 <ready_thread>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4798:	00d54783          	lbu	a5,13(a0)
    479c:	01f7f793          	andi	a5,a5,31
    47a0:	04079e63          	bnez	a5,47fc <ready_thread+0x64>
	if (z_is_thread_ready(thread)) {
    47a4:	01852783          	lw	a5,24(a0)
{
    47a8:	ff010113          	addi	sp,sp,-16
    47ac:	00812423          	sw	s0,8(sp)
    47b0:	00112623          	sw	ra,12(sp)
    47b4:	00050413          	mv	s0,a0
	if (z_is_thread_ready(thread)) {
    47b8:	02079a63          	bnez	a5,47ec <ready_thread+0x54>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    47bc:	00050593          	mv	a1,a0
    47c0:	00008537          	lui	a0,0x8
    47c4:	bf450513          	addi	a0,a0,-1036 # 7bf4 <_kernel+0x24>
    47c8:	c1dff0ef          	jal	ra,43e4 <z_priq_rb_add>
	thread->base.thread_state |= states;
    47cc:	00d44783          	lbu	a5,13(s0)
		update_cache(0);
    47d0:	00000513          	li	a0,0
    47d4:	f807e793          	ori	a5,a5,-128
    47d8:	00f406a3          	sb	a5,13(s0)
}
    47dc:	00812403          	lw	s0,8(sp)
    47e0:	00c12083          	lw	ra,12(sp)
    47e4:	01010113          	addi	sp,sp,16
		update_cache(0);
    47e8:	d89ff06f          	j	4570 <update_cache>
}
    47ec:	00c12083          	lw	ra,12(sp)
    47f0:	00812403          	lw	s0,8(sp)
    47f4:	01010113          	addi	sp,sp,16
    47f8:	00008067          	ret
    47fc:	00008067          	ret

00004800 <z_ready_thread>:
{
    4800:	fe010113          	addi	sp,sp,-32
    4804:	00912a23          	sw	s1,20(sp)
    4808:	01212823          	sw	s2,16(sp)
    480c:	00112e23          	sw	ra,28(sp)
    4810:	00812c23          	sw	s0,24(sp)
    4814:	01312623          	sw	s3,12(sp)
    4818:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    481c:	00800493          	li	s1,8
    4820:	3004b4f3          	csrrc	s1,mstatus,s1
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4824:	00007437          	lui	s0,0x7
    4828:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    482c:	0084f493          	andi	s1,s1,8
    4830:	514010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4834:	04051063          	bnez	a0,4874 <z_ready_thread+0x74>
    4838:	000079b7          	lui	s3,0x7
    483c:	000075b7          	lui	a1,0x7
    4840:	00007537          	lui	a0,0x7
    4844:	05c00693          	li	a3,92
    4848:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    484c:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4850:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4854:	cbdfc0ef          	jal	ra,1510 <printk>
    4858:	00007537          	lui	a0,0x7
    485c:	73c40593          	addi	a1,s0,1852
    4860:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4864:	cadfc0ef          	jal	ra,1510 <printk>
    4868:	05c00593          	li	a1,92
    486c:	11c98513          	addi	a0,s3,284
    4870:	b99fd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4874:	73c40513          	addi	a0,s0,1852
    4878:	524010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		ready_thread(thread);
    487c:	00090513          	mv	a0,s2
    4880:	f19ff0ef          	jal	ra,4798 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4884:	73c40513          	addi	a0,s0,1852
    4888:	4e4010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    488c:	04051063          	bnez	a0,48cc <z_ready_thread+0xcc>
    4890:	00007937          	lui	s2,0x7
    4894:	000075b7          	lui	a1,0x7
    4898:	00007537          	lui	a0,0x7
    489c:	08400693          	li	a3,132
    48a0:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    48a4:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    48a8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    48ac:	c65fc0ef          	jal	ra,1510 <printk>
    48b0:	00007537          	lui	a0,0x7
    48b4:	73c40593          	addi	a1,s0,1852
    48b8:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    48bc:	c55fc0ef          	jal	ra,1510 <printk>
    48c0:	08400593          	li	a1,132
    48c4:	11c90513          	addi	a0,s2,284
    48c8:	b41fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    48cc:	3004a4f3          	csrrs	s1,mstatus,s1
}
    48d0:	01c12083          	lw	ra,28(sp)
    48d4:	01812403          	lw	s0,24(sp)
    48d8:	01412483          	lw	s1,20(sp)
    48dc:	01012903          	lw	s2,16(sp)
    48e0:	00c12983          	lw	s3,12(sp)
    48e4:	02010113          	addi	sp,sp,32
    48e8:	00008067          	ret

000048ec <z_sched_start>:
{
    48ec:	fe010113          	addi	sp,sp,-32
    48f0:	00912a23          	sw	s1,20(sp)
    48f4:	00112e23          	sw	ra,28(sp)
    48f8:	00812c23          	sw	s0,24(sp)
    48fc:	01212823          	sw	s2,16(sp)
    4900:	01312623          	sw	s3,12(sp)
    4904:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4908:	00800593          	li	a1,8
    490c:	3005b5f3          	csrrc	a1,mstatus,a1
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4910:	00007437          	lui	s0,0x7
    4914:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4918:	0085f993          	andi	s3,a1,8
    491c:	428010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4920:	04051063          	bnez	a0,4960 <z_sched_start+0x74>
    4924:	00007937          	lui	s2,0x7
    4928:	000075b7          	lui	a1,0x7
    492c:	00007537          	lui	a0,0x7
    4930:	05c00693          	li	a3,92
    4934:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    4938:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    493c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4940:	bd1fc0ef          	jal	ra,1510 <printk>
    4944:	00007537          	lui	a0,0x7
    4948:	73c40593          	addi	a1,s0,1852
    494c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4950:	bc1fc0ef          	jal	ra,1510 <printk>
    4954:	05c00593          	li	a1,92
    4958:	11c90513          	addi	a0,s2,284
    495c:	aadfd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4960:	73c40513          	addi	a0,s0,1852
    4964:	438010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4968:	00d4c783          	lbu	a5,13(s1)
	if (z_has_thread_started(thread)) {
    496c:	0047f713          	andi	a4,a5,4
    4970:	06071663          	bnez	a4,49dc <z_sched_start+0xf0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4974:	73c40513          	addi	a0,s0,1852
    4978:	3f4010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    497c:	04051063          	bnez	a0,49bc <z_sched_start+0xd0>
    4980:	000074b7          	lui	s1,0x7
    4984:	000075b7          	lui	a1,0x7
    4988:	00007537          	lui	a0,0x7
    498c:	08400693          	li	a3,132
    4990:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4994:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4998:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    499c:	b75fc0ef          	jal	ra,1510 <printk>
    49a0:	00007537          	lui	a0,0x7
    49a4:	73c40593          	addi	a1,s0,1852
    49a8:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    49ac:	b65fc0ef          	jal	ra,1510 <printk>
    49b0:	08400593          	li	a1,132
    49b4:	11c48513          	addi	a0,s1,284
    49b8:	a51fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    49bc:	3009a5f3          	csrrs	a1,mstatus,s3
}
    49c0:	01c12083          	lw	ra,28(sp)
    49c4:	01812403          	lw	s0,24(sp)
    49c8:	01412483          	lw	s1,20(sp)
    49cc:	01012903          	lw	s2,16(sp)
    49d0:	00c12983          	lw	s3,12(sp)
    49d4:	02010113          	addi	sp,sp,32
    49d8:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
    49dc:	ffb7f793          	andi	a5,a5,-5
	ready_thread(thread);
    49e0:	00048513          	mv	a0,s1
    49e4:	00f486a3          	sb	a5,13(s1)
    49e8:	db1ff0ef          	jal	ra,4798 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    49ec:	73c40513          	addi	a0,s0,1852
}
    49f0:	01812403          	lw	s0,24(sp)
    49f4:	01c12083          	lw	ra,28(sp)
    49f8:	01412483          	lw	s1,20(sp)
    49fc:	01012903          	lw	s2,16(sp)
	z_reschedule(&sched_spinlock, key);
    4a00:	00098593          	mv	a1,s3
}
    4a04:	00c12983          	lw	s3,12(sp)
    4a08:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    4a0c:	cacff06f          	j	3eb8 <z_reschedule>

00004a10 <z_thread_timeout>:
{
    4a10:	fd010113          	addi	sp,sp,-48
    4a14:	02912223          	sw	s1,36(sp)
    4a18:	02112623          	sw	ra,44(sp)
    4a1c:	02812423          	sw	s0,40(sp)
    4a20:	03212023          	sw	s2,32(sp)
    4a24:	01312e23          	sw	s3,28(sp)
    4a28:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4a2c:	00800793          	li	a5,8
    4a30:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a34:	00007437          	lui	s0,0x7
    4a38:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4a3c:	0087f993          	andi	s3,a5,8
    4a40:	304010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4a44:	04051063          	bnez	a0,4a84 <z_thread_timeout+0x74>
    4a48:	00007937          	lui	s2,0x7
    4a4c:	000075b7          	lui	a1,0x7
    4a50:	00007537          	lui	a0,0x7
    4a54:	05c00693          	li	a3,92
    4a58:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    4a5c:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4a60:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4a64:	aadfc0ef          	jal	ra,1510 <printk>
    4a68:	00007537          	lui	a0,0x7
    4a6c:	73c40593          	addi	a1,s0,1852
    4a70:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4a74:	a9dfc0ef          	jal	ra,1510 <printk>
    4a78:	05c00593          	li	a1,92
    4a7c:	11c90513          	addi	a0,s2,284
    4a80:	989fd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a84:	73c40513          	addi	a0,s0,1852
    4a88:	314010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
    4a8c:	ff04a783          	lw	a5,-16(s1)
		struct k_thread *thread = CONTAINER_OF(timeout,
    4a90:	fe848513          	addi	a0,s1,-24
		if (thread->base.pended_on != NULL) {
    4a94:	00078863          	beqz	a5,4aa4 <z_thread_timeout+0x94>
			unpend_thread_no_timeout(thread);
    4a98:	00a12623          	sw	a0,12(sp)
    4a9c:	f48ff0ef          	jal	ra,41e4 <unpend_thread_no_timeout>
    4aa0:	00c12503          	lw	a0,12(sp)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4aa4:	ff54c783          	lbu	a5,-11(s1)
    4aa8:	feb7f793          	andi	a5,a5,-21
    4aac:	fef48aa3          	sb	a5,-11(s1)
		ready_thread(thread);
    4ab0:	ce9ff0ef          	jal	ra,4798 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ab4:	73c40513          	addi	a0,s0,1852
    4ab8:	2b4010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    4abc:	04051063          	bnez	a0,4afc <z_thread_timeout+0xec>
    4ac0:	000074b7          	lui	s1,0x7
    4ac4:	000075b7          	lui	a1,0x7
    4ac8:	00007537          	lui	a0,0x7
    4acc:	08400693          	li	a3,132
    4ad0:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4ad4:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4ad8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4adc:	a35fc0ef          	jal	ra,1510 <printk>
    4ae0:	00007537          	lui	a0,0x7
    4ae4:	73c40593          	addi	a1,s0,1852
    4ae8:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    4aec:	a25fc0ef          	jal	ra,1510 <printk>
    4af0:	08400593          	li	a1,132
    4af4:	11c48513          	addi	a0,s1,284
    4af8:	911fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    4afc:	3009a7f3          	csrrs	a5,mstatus,s3
}
    4b00:	02c12083          	lw	ra,44(sp)
    4b04:	02812403          	lw	s0,40(sp)
    4b08:	02412483          	lw	s1,36(sp)
    4b0c:	02012903          	lw	s2,32(sp)
    4b10:	01c12983          	lw	s3,28(sp)
    4b14:	03010113          	addi	sp,sp,48
    4b18:	00008067          	ret

00004b1c <move_thread_to_end_of_prio_q>:
{
    4b1c:	ff010113          	addi	sp,sp,-16
    4b20:	00812423          	sw	s0,8(sp)
    4b24:	00912223          	sw	s1,4(sp)
    4b28:	00112623          	sw	ra,12(sp)
	if (z_is_thread_queued(thread)) {
    4b2c:	00d50783          	lb	a5,13(a0)
{
    4b30:	00050413          	mv	s0,a0
    4b34:	00008537          	lui	a0,0x8
    4b38:	bf450493          	addi	s1,a0,-1036 # 7bf4 <_kernel+0x24>
	if (z_is_thread_queued(thread)) {
    4b3c:	0007d863          	bgez	a5,4b4c <move_thread_to_end_of_prio_q+0x30>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4b40:	00040593          	mv	a1,s0
    4b44:	bf450513          	addi	a0,a0,-1036
    4b48:	99dff0ef          	jal	ra,44e4 <z_priq_rb_remove>
	_priq_run_add(&_kernel.ready_q.runq, thread);
    4b4c:	00048513          	mv	a0,s1
    4b50:	00040593          	mv	a1,s0
    4b54:	891ff0ef          	jal	ra,43e4 <z_priq_rb_add>
	thread->base.thread_state |= states;
    4b58:	00d44783          	lbu	a5,13(s0)
}
    4b5c:	00c12083          	lw	ra,12(sp)
    4b60:	00412483          	lw	s1,4(sp)
    4b64:	f807e793          	ori	a5,a5,-128
    4b68:	00f406a3          	sb	a5,13(s0)
	update_cache(thread == _current);
    4b6c:	000087b7          	lui	a5,0x8
    4b70:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>
    4b74:	0087a503          	lw	a0,8(a5)
    4b78:	40850533          	sub	a0,a0,s0
}
    4b7c:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    4b80:	00153513          	seqz	a0,a0
}
    4b84:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    4b88:	9e9ff06f          	j	4570 <update_cache>

00004b8c <z_time_slice>:
{
    4b8c:	fe010113          	addi	sp,sp,-32
    4b90:	00912a23          	sw	s1,20(sp)
    4b94:	01212823          	sw	s2,16(sp)
    4b98:	00112e23          	sw	ra,28(sp)
    4b9c:	00812c23          	sw	s0,24(sp)
    4ba0:	01312623          	sw	s3,12(sp)
    4ba4:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4ba8:	00800493          	li	s1,8
    4bac:	3004b4f3          	csrrc	s1,mstatus,s1
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bb0:	00007437          	lui	s0,0x7
    4bb4:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4bb8:	0084f493          	andi	s1,s1,8
    4bbc:	188010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4bc0:	04051063          	bnez	a0,4c00 <z_time_slice+0x74>
    4bc4:	000079b7          	lui	s3,0x7
    4bc8:	000075b7          	lui	a1,0x7
    4bcc:	00007537          	lui	a0,0x7
    4bd0:	05c00693          	li	a3,92
    4bd4:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    4bd8:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4bdc:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4be0:	931fc0ef          	jal	ra,1510 <printk>
    4be4:	00007537          	lui	a0,0x7
    4be8:	73c40593          	addi	a1,s0,1852
    4bec:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4bf0:	921fc0ef          	jal	ra,1510 <printk>
    4bf4:	05c00593          	li	a1,92
    4bf8:	11c98513          	addi	a0,s3,284
    4bfc:	80dfd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c00:	73c40513          	addi	a0,s0,1852
    4c04:	198010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	if (slice_time && sliceable(_current)) {
    4c08:	000077b7          	lui	a5,0x7
    4c0c:	7447a703          	lw	a4,1860(a5) # 7744 <slice_time>
    4c10:	000087b7          	lui	a5,0x8
    4c14:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>
    4c18:	0c070063          	beqz	a4,4cd8 <z_time_slice+0x14c>
    4c1c:	0087a503          	lw	a0,8(a5)
		&& !z_is_idle_thread_object(thread);
    4c20:	07f00713          	li	a4,127
    4c24:	00e55683          	lhu	a3,14(a0)
    4c28:	0ad76863          	bltu	a4,a3,4cd8 <z_time_slice+0x14c>
		&& !z_is_thread_prevented_from_running(thread)
    4c2c:	00d54683          	lbu	a3,13(a0)
    4c30:	01f6f693          	andi	a3,a3,31
    4c34:	0a069263          	bnez	a3,4cd8 <z_time_slice+0x14c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4c38:	00007737          	lui	a4,0x7
    4c3c:	00e50683          	lb	a3,14(a0)
    4c40:	74072703          	lw	a4,1856(a4) # 7740 <slice_max_prio>
    4c44:	08e6ca63          	blt	a3,a4,4cd8 <z_time_slice+0x14c>
		&& !z_is_idle_thread_object(thread);
    4c48:	000086b7          	lui	a3,0x8
    4c4c:	a5868693          	addi	a3,a3,-1448 # 7a58 <z_idle_threads>
    4c50:	08d50463          	beq	a0,a3,4cd8 <z_time_slice+0x14c>
		if (ticks >= _current_cpu->slice_ticks) {
    4c54:	0107a703          	lw	a4,16(a5)
    4c58:	06e94a63          	blt	s2,a4,4ccc <z_time_slice+0x140>
			move_thread_to_end_of_prio_q(_current);
    4c5c:	ec1ff0ef          	jal	ra,4b1c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    4c60:	8d0ff0ef          	jal	ra,3d30 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c64:	73c40513          	addi	a0,s0,1852
    4c68:	104010ef          	jal	ra,5d6c <z_spin_unlock_valid>
    4c6c:	04051063          	bnez	a0,4cac <z_time_slice+0x120>
    4c70:	00007937          	lui	s2,0x7
    4c74:	000075b7          	lui	a1,0x7
    4c78:	00007537          	lui	a0,0x7
    4c7c:	08400693          	li	a3,132
    4c80:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    4c84:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4c88:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4c8c:	885fc0ef          	jal	ra,1510 <printk>
    4c90:	00007537          	lui	a0,0x7
    4c94:	73c40593          	addi	a1,s0,1852
    4c98:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    4c9c:	875fc0ef          	jal	ra,1510 <printk>
    4ca0:	08400593          	li	a1,132
    4ca4:	11c90513          	addi	a0,s2,284
    4ca8:	f60fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    4cac:	3004a4f3          	csrrs	s1,mstatus,s1
}
    4cb0:	01c12083          	lw	ra,28(sp)
    4cb4:	01812403          	lw	s0,24(sp)
    4cb8:	01412483          	lw	s1,20(sp)
    4cbc:	01012903          	lw	s2,16(sp)
    4cc0:	00c12983          	lw	s3,12(sp)
    4cc4:	02010113          	addi	sp,sp,32
    4cc8:	00008067          	ret
			_current_cpu->slice_ticks -= ticks;
    4ccc:	41270733          	sub	a4,a4,s2
    4cd0:	00e7a823          	sw	a4,16(a5)
    4cd4:	f91ff06f          	j	4c64 <z_time_slice+0xd8>
		_current_cpu->slice_ticks = 0;
    4cd8:	0007a823          	sw	zero,16(a5)
    4cdc:	f89ff06f          	j	4c64 <z_time_slice+0xd8>

00004ce0 <z_impl_k_thread_suspend>:
{
    4ce0:	fe010113          	addi	sp,sp,-32
    4ce4:	00812c23          	sw	s0,24(sp)
    4ce8:	00050413          	mv	s0,a0
    4cec:	01850513          	addi	a0,a0,24
    4cf0:	00112e23          	sw	ra,28(sp)
    4cf4:	00912a23          	sw	s1,20(sp)
    4cf8:	01212823          	sw	s2,16(sp)
    4cfc:	01312623          	sw	s3,12(sp)
    4d00:	01412423          	sw	s4,8(sp)
    4d04:	4c8010ef          	jal	ra,61cc <z_abort_timeout>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4d08:	00800793          	li	a5,8
    4d0c:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d10:	000074b7          	lui	s1,0x7
    4d14:	73c48513          	addi	a0,s1,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4d18:	0087f993          	andi	s3,a5,8
    4d1c:	028010ef          	jal	ra,5d44 <z_spin_lock_valid>
    4d20:	04051063          	bnez	a0,4d60 <z_impl_k_thread_suspend+0x80>
    4d24:	00007937          	lui	s2,0x7
    4d28:	000075b7          	lui	a1,0x7
    4d2c:	00007537          	lui	a0,0x7
    4d30:	05c00693          	li	a3,92
    4d34:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    4d38:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4d3c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4d40:	fd0fc0ef          	jal	ra,1510 <printk>
    4d44:	00007537          	lui	a0,0x7
    4d48:	73c48593          	addi	a1,s1,1852
    4d4c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4d50:	fc0fc0ef          	jal	ra,1510 <printk>
    4d54:	05c00593          	li	a1,92
    4d58:	11c90513          	addi	a0,s2,284
    4d5c:	eacfd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d60:	73c48513          	addi	a0,s1,1852
    4d64:	038010ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    4d68:	00d40783          	lb	a5,13(s0)
    4d6c:	00008a37          	lui	s4,0x8
    4d70:	bd0a0a13          	addi	s4,s4,-1072 # 7bd0 <_kernel>
    4d74:	0007de63          	bgez	a5,4d90 <z_impl_k_thread_suspend+0xb0>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4d78:	00040593          	mv	a1,s0
    4d7c:	024a0513          	addi	a0,s4,36
    4d80:	f64ff0ef          	jal	ra,44e4 <z_priq_rb_remove>
	thread->base.thread_state &= ~states;
    4d84:	00d44783          	lbu	a5,13(s0)
    4d88:	07f7f793          	andi	a5,a5,127
    4d8c:	00f406a3          	sb	a5,13(s0)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4d90:	00d44783          	lbu	a5,13(s0)
		update_cache(thread == _current);
    4d94:	008a2503          	lw	a0,8(s4)
    4d98:	0107e793          	ori	a5,a5,16
    4d9c:	40850533          	sub	a0,a0,s0
    4da0:	00153513          	seqz	a0,a0
    4da4:	00f406a3          	sb	a5,13(s0)
    4da8:	fc8ff0ef          	jal	ra,4570 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4dac:	73c48513          	addi	a0,s1,1852
    4db0:	7bd000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    4db4:	04051063          	bnez	a0,4df4 <z_impl_k_thread_suspend+0x114>
    4db8:	00007937          	lui	s2,0x7
    4dbc:	000075b7          	lui	a1,0x7
    4dc0:	00007537          	lui	a0,0x7
    4dc4:	08400693          	li	a3,132
    4dc8:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    4dcc:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4dd0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4dd4:	f3cfc0ef          	jal	ra,1510 <printk>
    4dd8:	00007537          	lui	a0,0x7
    4ddc:	73c48593          	addi	a1,s1,1852
    4de0:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    4de4:	f2cfc0ef          	jal	ra,1510 <printk>
    4de8:	08400593          	li	a1,132
    4dec:	11c90513          	addi	a0,s2,284
    4df0:	e18fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    4df4:	3009a7f3          	csrrs	a5,mstatus,s3
	if (thread == _current) {
    4df8:	008a2783          	lw	a5,8(s4)
    4dfc:	02879263          	bne	a5,s0,4e20 <z_impl_k_thread_suspend+0x140>
}
    4e00:	01812403          	lw	s0,24(sp)
    4e04:	01c12083          	lw	ra,28(sp)
    4e08:	01412483          	lw	s1,20(sp)
    4e0c:	01012903          	lw	s2,16(sp)
    4e10:	00c12983          	lw	s3,12(sp)
    4e14:	00812a03          	lw	s4,8(sp)
    4e18:	02010113          	addi	sp,sp,32
		z_reschedule_unlocked();
    4e1c:	9c0ff06f          	j	3fdc <z_reschedule_unlocked>
}
    4e20:	01c12083          	lw	ra,28(sp)
    4e24:	01812403          	lw	s0,24(sp)
    4e28:	01412483          	lw	s1,20(sp)
    4e2c:	01012903          	lw	s2,16(sp)
    4e30:	00c12983          	lw	s3,12(sp)
    4e34:	00812a03          	lw	s4,8(sp)
    4e38:	02010113          	addi	sp,sp,32
    4e3c:	00008067          	ret

00004e40 <z_thread_single_abort>:
{
    4e40:	fe010113          	addi	sp,sp,-32
    4e44:	00812c23          	sw	s0,24(sp)
    4e48:	00112e23          	sw	ra,28(sp)
    4e4c:	00912a23          	sw	s1,20(sp)
    4e50:	01212823          	sw	s2,16(sp)
    4e54:	01312623          	sw	s3,12(sp)
    4e58:	01412423          	sw	s4,8(sp)
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    4e5c:	00c54783          	lbu	a5,12(a0)
{
    4e60:	00050413          	mv	s0,a0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    4e64:	0017f793          	andi	a5,a5,1
    4e68:	02078e63          	beqz	a5,4ea4 <z_thread_single_abort+0x64>
    4e6c:	000074b7          	lui	s1,0x7
    4e70:	000075b7          	lui	a1,0x7
    4e74:	00007537          	lui	a0,0x7
    4e78:	45058593          	addi	a1,a1,1104 # 7450 <levels.0+0x238>
    4e7c:	1f400693          	li	a3,500
    4e80:	3c048613          	addi	a2,s1,960 # 73c0 <levels.0+0x1a8>
    4e84:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4e88:	e88fc0ef          	jal	ra,1510 <printk>
    4e8c:	00007537          	lui	a0,0x7
    4e90:	48050513          	addi	a0,a0,1152 # 7480 <levels.0+0x268>
    4e94:	e7cfc0ef          	jal	ra,1510 <printk>
    4e98:	1f400593          	li	a1,500
    4e9c:	3c048513          	addi	a0,s1,960
    4ea0:	d68fd0ef          	jal	ra,2408 <assert_post_action>
	if (thread->fn_abort != NULL) {
    4ea4:	07042783          	lw	a5,112(s0)
    4ea8:	00078463          	beqz	a5,4eb0 <z_thread_single_abort+0x70>
		thread->fn_abort();
    4eac:	000780e7          	jalr	a5
    4eb0:	01840513          	addi	a0,s0,24
    4eb4:	318010ef          	jal	ra,61cc <z_abort_timeout>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    4eb8:	00800993          	li	s3,8
    4ebc:	3009b9f3          	csrrc	s3,mstatus,s3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ec0:	00007937          	lui	s2,0x7
    4ec4:	73c90513          	addi	a0,s2,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    4ec8:	0089f993          	andi	s3,s3,8
    4ecc:	679000ef          	jal	ra,5d44 <z_spin_lock_valid>
    4ed0:	04051063          	bnez	a0,4f10 <z_thread_single_abort+0xd0>
    4ed4:	000074b7          	lui	s1,0x7
    4ed8:	000075b7          	lui	a1,0x7
    4edc:	00007537          	lui	a0,0x7
    4ee0:	05c00693          	li	a3,92
    4ee4:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    4ee8:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    4eec:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4ef0:	e20fc0ef          	jal	ra,1510 <printk>
    4ef4:	00007537          	lui	a0,0x7
    4ef8:	73c90593          	addi	a1,s2,1852
    4efc:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    4f00:	e10fc0ef          	jal	ra,1510 <printk>
    4f04:	05c00593          	li	a1,92
    4f08:	11c48513          	addi	a0,s1,284
    4f0c:	cfcfd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f10:	73c90513          	addi	a0,s2,1852
    4f14:	689000ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    4f18:	00d44783          	lbu	a5,13(s0)
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4f1c:	01f7f713          	andi	a4,a5,31
    4f20:	0c071863          	bnez	a4,4ff0 <z_thread_single_abort+0x1b0>
		if (z_is_thread_ready(thread)) {
    4f24:	01842703          	lw	a4,24(s0)
    4f28:	0c071463          	bnez	a4,4ff0 <z_thread_single_abort+0x1b0>
			if (z_is_thread_queued(thread)) {
    4f2c:	01879793          	slli	a5,a5,0x18
    4f30:	000084b7          	lui	s1,0x8
    4f34:	4187d793          	srai	a5,a5,0x18
    4f38:	bd048493          	addi	s1,s1,-1072 # 7bd0 <_kernel>
    4f3c:	0007de63          	bgez	a5,4f58 <z_thread_single_abort+0x118>
				_priq_run_remove(&_kernel.ready_q.runq,
    4f40:	00040593          	mv	a1,s0
    4f44:	02448513          	addi	a0,s1,36
    4f48:	d9cff0ef          	jal	ra,44e4 <z_priq_rb_remove>
	thread->base.thread_state &= ~states;
    4f4c:	00d44783          	lbu	a5,13(s0)
    4f50:	07f7f793          	andi	a5,a5,127
    4f54:	00f406a3          	sb	a5,13(s0)
			update_cache(thread == _current);
    4f58:	0084a503          	lw	a0,8(s1)
    4f5c:	40850533          	sub	a0,a0,s0
    4f60:	00153513          	seqz	a0,a0
    4f64:	e0cff0ef          	jal	ra,4570 <update_cache>
		thread->base.thread_state |= mask;
    4f68:	00d44783          	lbu	a5,13(s0)
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4f6c:	03040a13          	addi	s4,s0,48
    4f70:	0087e793          	ori	a5,a5,8
    4f74:	00f406a3          	sb	a5,13(s0)
	return list->head == list;
    4f78:	03042483          	lw	s1,48(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f7c:	01448463          	beq	s1,s4,4f84 <z_thread_single_abort+0x144>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4f80:	08049e63          	bnez	s1,501c <z_thread_single_abort+0x1dc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f84:	73c90513          	addi	a0,s2,1852
    4f88:	5e5000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    4f8c:	04051063          	bnez	a0,4fcc <z_thread_single_abort+0x18c>
    4f90:	00007437          	lui	s0,0x7
    4f94:	000075b7          	lui	a1,0x7
    4f98:	00007537          	lui	a0,0x7
    4f9c:	08400693          	li	a3,132
    4fa0:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    4fa4:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    4fa8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    4fac:	d64fc0ef          	jal	ra,1510 <printk>
    4fb0:	00007537          	lui	a0,0x7
    4fb4:	73c90593          	addi	a1,s2,1852
    4fb8:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    4fbc:	d54fc0ef          	jal	ra,1510 <printk>
    4fc0:	08400593          	li	a1,132
    4fc4:	11c40513          	addi	a0,s0,284
    4fc8:	c40fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    4fcc:	3009a9f3          	csrrs	s3,mstatus,s3
}
    4fd0:	01c12083          	lw	ra,28(sp)
    4fd4:	01812403          	lw	s0,24(sp)
    4fd8:	01412483          	lw	s1,20(sp)
    4fdc:	01012903          	lw	s2,16(sp)
    4fe0:	00c12983          	lw	s3,12(sp)
    4fe4:	00812a03          	lw	s4,8(sp)
    4fe8:	02010113          	addi	sp,sp,32
    4fec:	00008067          	ret
			if (z_is_thread_pending(thread)) {
    4ff0:	0027f793          	andi	a5,a5,2
    4ff4:	f6078ae3          	beqz	a5,4f68 <z_thread_single_abort+0x128>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4ff8:	00040513          	mv	a0,s0
    4ffc:	cd5fe0ef          	jal	ra,3cd0 <pended_on>
    5000:	00040593          	mv	a1,s0
    5004:	968ff0ef          	jal	ra,416c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5008:	00d44783          	lbu	a5,13(s0)
				thread->base.pended_on = NULL;
    500c:	00042423          	sw	zero,8(s0)
    5010:	ffd7f793          	andi	a5,a5,-3
    5014:	00f406a3          	sb	a5,13(s0)
    5018:	f51ff06f          	j	4f68 <z_thread_single_abort+0x128>
    501c:	01848513          	addi	a0,s1,24
    5020:	1ac010ef          	jal	ra,61cc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    5024:	00048513          	mv	a0,s1
    5028:	ca9fe0ef          	jal	ra,3cd0 <pended_on>
    502c:	00048593          	mv	a1,s1
    5030:	93cff0ef          	jal	ra,416c <z_priq_dumb_remove>
    5034:	00d4c783          	lbu	a5,13(s1)
			waiter->base.pended_on = NULL;
    5038:	0004a423          	sw	zero,8(s1)
	thread->arch.swap_return_value = value;
    503c:	0604ae23          	sw	zero,124(s1)
    5040:	ffd7f793          	andi	a5,a5,-3
    5044:	00f486a3          	sb	a5,13(s1)
			ready_thread(waiter);
    5048:	00048513          	mv	a0,s1
    504c:	f4cff0ef          	jal	ra,4798 <ready_thread>
    5050:	f29ff06f          	j	4f78 <z_thread_single_abort+0x138>

00005054 <unready_thread>:
{
    5054:	ff010113          	addi	sp,sp,-16
    5058:	00812423          	sw	s0,8(sp)
    505c:	00912223          	sw	s1,4(sp)
    5060:	00112623          	sw	ra,12(sp)
	if (z_is_thread_queued(thread)) {
    5064:	00d50783          	lb	a5,13(a0)
    5068:	000084b7          	lui	s1,0x8
{
    506c:	00050413          	mv	s0,a0
    5070:	bd048493          	addi	s1,s1,-1072 # 7bd0 <_kernel>
	if (z_is_thread_queued(thread)) {
    5074:	0007de63          	bgez	a5,5090 <unready_thread+0x3c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    5078:	00050593          	mv	a1,a0
    507c:	02448513          	addi	a0,s1,36
    5080:	c64ff0ef          	jal	ra,44e4 <z_priq_rb_remove>
	thread->base.thread_state &= ~states;
    5084:	00d44783          	lbu	a5,13(s0)
    5088:	07f7f793          	andi	a5,a5,127
    508c:	00f406a3          	sb	a5,13(s0)
	update_cache(thread == _current);
    5090:	0084a503          	lw	a0,8(s1)
}
    5094:	00c12083          	lw	ra,12(sp)
    5098:	00412483          	lw	s1,4(sp)
	update_cache(thread == _current);
    509c:	40850533          	sub	a0,a0,s0
}
    50a0:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    50a4:	00153513          	seqz	a0,a0
}
    50a8:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    50ac:	cc4ff06f          	j	4570 <update_cache>

000050b0 <add_to_waitq_locked>:
{
    50b0:	ff010113          	addi	sp,sp,-16
    50b4:	00812423          	sw	s0,8(sp)
    50b8:	00912223          	sw	s1,4(sp)
    50bc:	00050413          	mv	s0,a0
    50c0:	00112623          	sw	ra,12(sp)
    50c4:	01212023          	sw	s2,0(sp)
    50c8:	00058493          	mv	s1,a1
	unready_thread(thread);
    50cc:	f89ff0ef          	jal	ra,5054 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    50d0:	00d44783          	lbu	a5,13(s0)
    50d4:	0027e793          	ori	a5,a5,2
    50d8:	00f406a3          	sb	a5,13(s0)
	if (wait_q != NULL) {
    50dc:	06048663          	beqz	s1,5148 <add_to_waitq_locked+0x98>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    50e0:	000087b7          	lui	a5,0x8
		thread->base.pended_on = wait_q;
    50e4:	00942423          	sw	s1,8(s0)
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    50e8:	a5878793          	addi	a5,a5,-1448 # 7a58 <z_idle_threads>
    50ec:	02f41863          	bne	s0,a5,511c <add_to_waitq_locked+0x6c>
    50f0:	00007937          	lui	s2,0x7
    50f4:	000075b7          	lui	a1,0x7
    50f8:	00007537          	lui	a0,0x7
    50fc:	3fc58593          	addi	a1,a1,1020 # 73fc <levels.0+0x1e4>
    5100:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5104:	38900693          	li	a3,905
    5108:	3c090613          	addi	a2,s2,960 # 73c0 <levels.0+0x1a8>
    510c:	c04fc0ef          	jal	ra,1510 <printk>
    5110:	38900593          	li	a1,905
    5114:	3c090513          	addi	a0,s2,960
    5118:	af0fd0ef          	jal	ra,2408 <assert_post_action>
	return list->head == list;
    511c:	0004a783          	lw	a5,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5120:	04f48863          	beq	s1,a5,5170 <add_to_waitq_locked+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5124:	04078663          	beqz	a5,5170 <add_to_waitq_locked+0xc0>
	if (thread_1->base.prio < thread_2->base.prio) {
    5128:	00e40703          	lb	a4,14(s0)
    512c:	00e78683          	lb	a3,14(a5)
    5130:	02d75863          	bge	a4,a3,5160 <add_to_waitq_locked+0xb0>
	node->prev = successor->prev;
    5134:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    5138:	00f42023          	sw	a5,0(s0)
	node->prev = successor->prev;
    513c:	00e42223          	sw	a4,4(s0)
	successor->prev->next = node;
    5140:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    5144:	0087a223          	sw	s0,4(a5)
}
    5148:	00c12083          	lw	ra,12(sp)
    514c:	00812403          	lw	s0,8(sp)
    5150:	00412483          	lw	s1,4(sp)
    5154:	00012903          	lw	s2,0(sp)
    5158:	01010113          	addi	sp,sp,16
    515c:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    5160:	0044a683          	lw	a3,4(s1)
    5164:	00d78663          	beq	a5,a3,5170 <add_to_waitq_locked+0xc0>
    5168:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    516c:	fc0790e3          	bnez	a5,512c <add_to_waitq_locked+0x7c>
	node->prev = list->tail;
    5170:	0044a783          	lw	a5,4(s1)
	node->next = list;
    5174:	00942023          	sw	s1,0(s0)
	node->prev = list->tail;
    5178:	00f42223          	sw	a5,4(s0)
	list->tail->next = node;
    517c:	0044a783          	lw	a5,4(s1)
    5180:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    5184:	0084a223          	sw	s0,4(s1)
}
    5188:	fc1ff06f          	j	5148 <add_to_waitq_locked+0x98>

0000518c <pend>:
{
    518c:	fe010113          	addi	sp,sp,-32
    5190:	00912a23          	sw	s1,20(sp)
    5194:	01312623          	sw	s3,12(sp)
    5198:	01412423          	sw	s4,8(sp)
    519c:	01512223          	sw	s5,4(sp)
    51a0:	00112e23          	sw	ra,28(sp)
    51a4:	00812c23          	sw	s0,24(sp)
    51a8:	01212823          	sw	s2,16(sp)
    51ac:	01612023          	sw	s6,0(sp)
    51b0:	00050993          	mv	s3,a0
    51b4:	00058493          	mv	s1,a1
    51b8:	00060a93          	mv	s5,a2
    51bc:	00068a13          	mv	s4,a3
	__asm__ volatile ("csrrc %0, mstatus, %1"
    51c0:	00800793          	li	a5,8
    51c4:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51c8:	00007437          	lui	s0,0x7
    51cc:	73c40513          	addi	a0,s0,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    51d0:	0087fb13          	andi	s6,a5,8
    51d4:	371000ef          	jal	ra,5d44 <z_spin_lock_valid>
    51d8:	04051063          	bnez	a0,5218 <pend+0x8c>
    51dc:	00007937          	lui	s2,0x7
    51e0:	000075b7          	lui	a1,0x7
    51e4:	00007537          	lui	a0,0x7
    51e8:	05c00693          	li	a3,92
    51ec:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    51f0:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    51f4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    51f8:	b18fc0ef          	jal	ra,1510 <printk>
    51fc:	00007537          	lui	a0,0x7
    5200:	73c40593          	addi	a1,s0,1852
    5204:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    5208:	b08fc0ef          	jal	ra,1510 <printk>
    520c:	05c00593          	li	a1,92
    5210:	11c90513          	addi	a0,s2,284
    5214:	9f4fd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    5218:	73c40513          	addi	a0,s0,1852
    521c:	381000ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5220:	00098513          	mv	a0,s3
    5224:	00048593          	mv	a1,s1
    5228:	e89ff0ef          	jal	ra,50b0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    522c:	73c40513          	addi	a0,s0,1852
    5230:	33d000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    5234:	04051063          	bnez	a0,5274 <pend+0xe8>
    5238:	000074b7          	lui	s1,0x7
    523c:	000075b7          	lui	a1,0x7
    5240:	00007537          	lui	a0,0x7
    5244:	08400693          	li	a3,132
    5248:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    524c:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    5250:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5254:	abcfc0ef          	jal	ra,1510 <printk>
    5258:	00007537          	lui	a0,0x7
    525c:	73c40593          	addi	a1,s0,1852
    5260:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    5264:	aacfc0ef          	jal	ra,1510 <printk>
    5268:	08400593          	li	a1,132
    526c:	11c48513          	addi	a0,s1,284
    5270:	998fd0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5274:	300b27f3          	csrrs	a5,mstatus,s6
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5278:	fff00693          	li	a3,-1
    527c:	00da9463          	bne	s5,a3,5284 <pend+0xf8>
    5280:	055a0063          	beq	s4,s5,52c0 <pend+0x134>
}
    5284:	01812403          	lw	s0,24(sp)
    5288:	01c12083          	lw	ra,28(sp)
    528c:	01412483          	lw	s1,20(sp)
    5290:	01012903          	lw	s2,16(sp)
    5294:	00012b03          	lw	s6,0(sp)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5298:	000a8613          	mv	a2,s5
    529c:	000a0693          	mv	a3,s4
    52a0:	00412a83          	lw	s5,4(sp)
    52a4:	00812a03          	lw	s4,8(sp)
    52a8:	01898513          	addi	a0,s3,24
    52ac:	00c12983          	lw	s3,12(sp)
    52b0:	000055b7          	lui	a1,0x5
    52b4:	a1058593          	addi	a1,a1,-1520 # 4a10 <z_thread_timeout>
    52b8:	02010113          	addi	sp,sp,32
    52bc:	4650006f          	j	5f20 <z_add_timeout>
    52c0:	01c12083          	lw	ra,28(sp)
    52c4:	01812403          	lw	s0,24(sp)
    52c8:	01412483          	lw	s1,20(sp)
    52cc:	01012903          	lw	s2,16(sp)
    52d0:	00c12983          	lw	s3,12(sp)
    52d4:	00812a03          	lw	s4,8(sp)
    52d8:	00412a83          	lw	s5,4(sp)
    52dc:	00012b03          	lw	s6,0(sp)
    52e0:	02010113          	addi	sp,sp,32
    52e4:	00008067          	ret

000052e8 <z_pend_curr>:
{
    52e8:	ff010113          	addi	sp,sp,-16
	pend(_current, wait_q, timeout);
    52ec:	000087b7          	lui	a5,0x8
{
    52f0:	00812423          	sw	s0,8(sp)
    52f4:	00050413          	mv	s0,a0
	pend(_current, wait_q, timeout);
    52f8:	bd87a503          	lw	a0,-1064(a5) # 7bd8 <_kernel+0x8>
{
    52fc:	00912223          	sw	s1,4(sp)
    5300:	00058493          	mv	s1,a1
    5304:	00060593          	mv	a1,a2
    5308:	00068613          	mv	a2,a3
    530c:	00070693          	mv	a3,a4
    5310:	00112623          	sw	ra,12(sp)
    5314:	01212023          	sw	s2,0(sp)
	pend(_current, wait_q, timeout);
    5318:	e75ff0ef          	jal	ra,518c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    531c:	00040513          	mv	a0,s0
    5320:	24d000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    5324:	04051063          	bnez	a0,5364 <z_pend_curr+0x7c>
    5328:	00007937          	lui	s2,0x7
    532c:	000075b7          	lui	a1,0x7
    5330:	00007537          	lui	a0,0x7
    5334:	09b00693          	li	a3,155
    5338:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    533c:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    5340:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5344:	9ccfc0ef          	jal	ra,1510 <printk>
    5348:	00007537          	lui	a0,0x7
    534c:	00040593          	mv	a1,s0
    5350:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    5354:	9bcfc0ef          	jal	ra,1510 <printk>
    5358:	09b00593          	li	a1,155
    535c:	11c90513          	addi	a0,s2,284
    5360:	8a8fd0ef          	jal	ra,2408 <assert_post_action>
}
    5364:	00812403          	lw	s0,8(sp)
    5368:	00c12083          	lw	ra,12(sp)
    536c:	00012903          	lw	s2,0(sp)
    5370:	00048513          	mv	a0,s1
    5374:	00412483          	lw	s1,4(sp)
    5378:	01010113          	addi	sp,sp,16
    537c:	eddfa06f          	j	258 <arch_swap>

00005380 <z_set_prio>:
{
    5380:	fe010113          	addi	sp,sp,-32
    5384:	00812c23          	sw	s0,24(sp)
    5388:	01212823          	sw	s2,16(sp)
    538c:	01312623          	sw	s3,12(sp)
    5390:	00112e23          	sw	ra,28(sp)
    5394:	00912a23          	sw	s1,20(sp)
    5398:	01412423          	sw	s4,8(sp)
    539c:	00050413          	mv	s0,a0
    53a0:	00058993          	mv	s3,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    53a4:	00800913          	li	s2,8
    53a8:	30093973          	csrrc	s2,mstatus,s2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53ac:	000074b7          	lui	s1,0x7
    53b0:	73c48513          	addi	a0,s1,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    53b4:	00897913          	andi	s2,s2,8
    53b8:	18d000ef          	jal	ra,5d44 <z_spin_lock_valid>
    53bc:	04051063          	bnez	a0,53fc <z_set_prio+0x7c>
    53c0:	00007a37          	lui	s4,0x7
    53c4:	000075b7          	lui	a1,0x7
    53c8:	00007537          	lui	a0,0x7
    53cc:	05c00693          	li	a3,92
    53d0:	11ca0613          	addi	a2,s4,284 # 711c <led0_dev_cfg+0x20>
    53d4:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    53d8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    53dc:	934fc0ef          	jal	ra,1510 <printk>
    53e0:	00007537          	lui	a0,0x7
    53e4:	73c48593          	addi	a1,s1,1852
    53e8:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    53ec:	924fc0ef          	jal	ra,1510 <printk>
    53f0:	05c00593          	li	a1,92
    53f4:	11ca0513          	addi	a0,s4,284
    53f8:	810fd0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    53fc:	73c48513          	addi	a0,s1,1852
    5400:	19d000ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5404:	00d44783          	lbu	a5,13(s0)
				thread->base.prio = prio;
    5408:	01899993          	slli	s3,s3,0x18
    540c:	4189d993          	srai	s3,s3,0x18
    5410:	01f7f793          	andi	a5,a5,31
    5414:	0a079663          	bnez	a5,54c0 <z_set_prio+0x140>
		if (need_sched) {
    5418:	01842783          	lw	a5,24(s0)
    541c:	0a079263          	bnez	a5,54c0 <z_set_prio+0x140>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    5420:	00008537          	lui	a0,0x8
    5424:	00040593          	mv	a1,s0
    5428:	bf450513          	addi	a0,a0,-1036 # 7bf4 <_kernel+0x24>
    542c:	8b8ff0ef          	jal	ra,44e4 <z_priq_rb_remove>
				_priq_run_add(&_kernel.ready_q.runq, thread);
    5430:	000087b7          	lui	a5,0x8
    5434:	00040593          	mv	a1,s0
    5438:	bf478513          	addi	a0,a5,-1036 # 7bf4 <_kernel+0x24>
				thread->base.prio = prio;
    543c:	01340723          	sb	s3,14(s0)
				_priq_run_add(&_kernel.ready_q.runq, thread);
    5440:	fa5fe0ef          	jal	ra,43e4 <z_priq_rb_add>
			update_cache(1);
    5444:	00100513          	li	a0,1
    5448:	928ff0ef          	jal	ra,4570 <update_cache>
    544c:	00100413          	li	s0,1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5450:	73c48513          	addi	a0,s1,1852
    5454:	119000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    5458:	04051063          	bnez	a0,5498 <z_set_prio+0x118>
    545c:	000079b7          	lui	s3,0x7
    5460:	000075b7          	lui	a1,0x7
    5464:	00007537          	lui	a0,0x7
    5468:	08400693          	li	a3,132
    546c:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    5470:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    5474:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5478:	898fc0ef          	jal	ra,1510 <printk>
    547c:	00007537          	lui	a0,0x7
    5480:	73c48593          	addi	a1,s1,1852
    5484:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    5488:	888fc0ef          	jal	ra,1510 <printk>
    548c:	08400593          	li	a1,132
    5490:	11c98513          	addi	a0,s3,284
    5494:	f75fc0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5498:	30092973          	csrrs	s2,mstatus,s2
}
    549c:	01c12083          	lw	ra,28(sp)
    54a0:	00040513          	mv	a0,s0
    54a4:	01812403          	lw	s0,24(sp)
    54a8:	01412483          	lw	s1,20(sp)
    54ac:	01012903          	lw	s2,16(sp)
    54b0:	00c12983          	lw	s3,12(sp)
    54b4:	00812a03          	lw	s4,8(sp)
    54b8:	02010113          	addi	sp,sp,32
    54bc:	00008067          	ret
			thread->base.prio = prio;
    54c0:	01340723          	sb	s3,14(s0)
    54c4:	00000413          	li	s0,0
    54c8:	f89ff06f          	j	5450 <z_set_prio+0xd0>

000054cc <z_sched_init>:
#ifdef CONFIG_SCHED_DUMB
	sys_dlist_init(&_kernel.ready_q.runq);
#endif

#ifdef CONFIG_SCHED_SCALABLE
	_kernel.ready_q.runq = (struct _priq_rb) {
    54cc:	000087b7          	lui	a5,0x8
    54d0:	00004737          	lui	a4,0x4
    54d4:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>
    54d8:	ca070713          	addi	a4,a4,-864 # 3ca0 <z_priq_rb_lessthan>
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    54dc:	00000593          	li	a1,0
    54e0:	00000513          	li	a0,0
	_kernel.ready_q.runq = (struct _priq_rb) {
    54e4:	0207a223          	sw	zero,36(a5)
    54e8:	0207a623          	sw	zero,44(a5)
    54ec:	0207a823          	sw	zero,48(a5)
    54f0:	02e7a423          	sw	a4,40(a5)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    54f4:	895fe06f          	j	3d88 <k_sched_time_slice_set>

000054f8 <z_impl_k_thread_priority_get>:
}

int z_impl_k_thread_priority_get(k_tid_t thread)
{
	return thread->base.prio;
}
    54f8:	00e50503          	lb	a0,14(a0)
    54fc:	00008067          	ret

00005500 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5500:	fe010113          	addi	sp,sp,-32
    5504:	00812c23          	sw	s0,24(sp)
	return _kernel.cpus[0].nested != 0U;
    5508:	00008437          	lui	s0,0x8
	__ASSERT(!arch_is_in_isr(), "");
    550c:	bd042783          	lw	a5,-1072(s0) # 7bd0 <_kernel>
{
    5510:	00112e23          	sw	ra,28(sp)
    5514:	00912a23          	sw	s1,20(sp)
    5518:	01212823          	sw	s2,16(sp)
    551c:	01312623          	sw	s3,12(sp)
    5520:	bd040413          	addi	s0,s0,-1072
	__ASSERT(!arch_is_in_isr(), "");
    5524:	02078e63          	beqz	a5,5560 <z_impl_k_yield+0x60>
    5528:	000074b7          	lui	s1,0x7
    552c:	000075b7          	lui	a1,0x7
    5530:	00007537          	lui	a0,0x7
    5534:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    5538:	49400693          	li	a3,1172
    553c:	3c048613          	addi	a2,s1,960 # 73c0 <levels.0+0x1a8>
    5540:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5544:	fcdfb0ef          	jal	ra,1510 <printk>
    5548:	00007537          	lui	a0,0x7
    554c:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    5550:	fc1fb0ef          	jal	ra,1510 <printk>
    5554:	49400593          	li	a1,1172
    5558:	3c048513          	addi	a0,s1,960
    555c:	eadfc0ef          	jal	ra,2408 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
    5560:	00842703          	lw	a4,8(s0)
    5564:	000087b7          	lui	a5,0x8
    5568:	a5878793          	addi	a5,a5,-1448 # 7a58 <z_idle_threads>
    556c:	0ef70263          	beq	a4,a5,5650 <z_impl_k_yield+0x150>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5570:	00800793          	li	a5,8
    5574:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5578:	00007937          	lui	s2,0x7
    557c:	73c90513          	addi	a0,s2,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    5580:	0087f993          	andi	s3,a5,8
    5584:	7c0000ef          	jal	ra,5d44 <z_spin_lock_valid>
    5588:	04051063          	bnez	a0,55c8 <z_impl_k_yield+0xc8>
    558c:	000074b7          	lui	s1,0x7
    5590:	000075b7          	lui	a1,0x7
    5594:	00007537          	lui	a0,0x7
    5598:	05c00693          	li	a3,92
    559c:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    55a0:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    55a4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    55a8:	f69fb0ef          	jal	ra,1510 <printk>
    55ac:	00007537          	lui	a0,0x7
    55b0:	73c90593          	addi	a1,s2,1852
    55b4:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    55b8:	f59fb0ef          	jal	ra,1510 <printk>
    55bc:	05c00593          	li	a1,92
    55c0:	11c48513          	addi	a0,s1,284
    55c4:	e45fc0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    55c8:	73c90513          	addi	a0,s2,1852
    55cc:	7d0000ef          	jal	ra,5d9c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    55d0:	00842583          	lw	a1,8(s0)
    55d4:	02440513          	addi	a0,s0,36
    55d8:	f0dfe0ef          	jal	ra,44e4 <z_priq_rb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
    55dc:	00842583          	lw	a1,8(s0)
    55e0:	000087b7          	lui	a5,0x8
    55e4:	bf478513          	addi	a0,a5,-1036 # 7bf4 <_kernel+0x24>
    55e8:	dfdfe0ef          	jal	ra,43e4 <z_priq_rb_add>
			z_mark_thread_as_queued(_current);
    55ec:	00842703          	lw	a4,8(s0)
			update_cache(1);
    55f0:	00100513          	li	a0,1
	thread->base.thread_state |= states;
    55f4:	00d74783          	lbu	a5,13(a4)
    55f8:	f807e793          	ori	a5,a5,-128
    55fc:	00f706a3          	sb	a5,13(a4)
    5600:	f71fe0ef          	jal	ra,4570 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5604:	73c90513          	addi	a0,s2,1852
    5608:	764000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    560c:	04051063          	bnez	a0,564c <z_impl_k_yield+0x14c>
    5610:	00007437          	lui	s0,0x7
    5614:	000075b7          	lui	a1,0x7
    5618:	00007537          	lui	a0,0x7
    561c:	08400693          	li	a3,132
    5620:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    5624:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    5628:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    562c:	ee5fb0ef          	jal	ra,1510 <printk>
    5630:	00007537          	lui	a0,0x7
    5634:	73c90593          	addi	a1,s2,1852
    5638:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    563c:	ed5fb0ef          	jal	ra,1510 <printk>
    5640:	08400593          	li	a1,132
    5644:	11c40513          	addi	a0,s0,284
    5648:	dc1fc0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    564c:	3009a7f3          	csrrs	a5,mstatus,s3
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5650:	00800513          	li	a0,8
    5654:	30053573          	csrrc	a0,mstatus,a0
		}
	}
	z_swap_unlocked();
}
    5658:	01812403          	lw	s0,24(sp)
    565c:	01c12083          	lw	ra,28(sp)
    5660:	01412483          	lw	s1,20(sp)
    5664:	01012903          	lw	s2,16(sp)
    5668:	00c12983          	lw	s3,12(sp)
    566c:	00857513          	andi	a0,a0,8
    5670:	02010113          	addi	sp,sp,32
    5674:	be5fa06f          	j	258 <arch_swap>

00005678 <z_tick_sleep>:
    5678:	000087b7          	lui	a5,0x8
static int32_t z_tick_sleep(int32_t ticks)
{
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
    567c:	bd07a703          	lw	a4,-1072(a5) # 7bd0 <_kernel>
{
    5680:	fe010113          	addi	sp,sp,-32
    5684:	00812c23          	sw	s0,24(sp)
    5688:	01312623          	sw	s3,12(sp)
    568c:	00112e23          	sw	ra,28(sp)
    5690:	00912a23          	sw	s1,20(sp)
    5694:	01212823          	sw	s2,16(sp)
    5698:	01412423          	sw	s4,8(sp)
    569c:	01512223          	sw	s5,4(sp)
    56a0:	01612023          	sw	s6,0(sp)
    56a4:	00050413          	mv	s0,a0
    56a8:	bd078993          	addi	s3,a5,-1072
	__ASSERT(!arch_is_in_isr(), "");
    56ac:	02070e63          	beqz	a4,56e8 <z_tick_sleep+0x70>
    56b0:	000074b7          	lui	s1,0x7
    56b4:	000075b7          	lui	a1,0x7
    56b8:	00007537          	lui	a0,0x7
    56bc:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    56c0:	4b200693          	li	a3,1202
    56c4:	3c048613          	addi	a2,s1,960 # 73c0 <levels.0+0x1a8>
    56c8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    56cc:	e45fb0ef          	jal	ra,1510 <printk>
    56d0:	00007537          	lui	a0,0x7
    56d4:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    56d8:	e39fb0ef          	jal	ra,1510 <printk>
    56dc:	4b200593          	li	a1,1202
    56e0:	3c048513          	addi	a0,s1,960
    56e4:	d25fc0ef          	jal	ra,2408 <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    56e8:	02041a63          	bnez	s0,571c <z_tick_sleep+0xa4>
	z_impl_k_yield();
    56ec:	e15ff0ef          	jal	ra,5500 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
    56f0:	01c12083          	lw	ra,28(sp)
    56f4:	00040513          	mv	a0,s0
    56f8:	01812403          	lw	s0,24(sp)
    56fc:	01412483          	lw	s1,20(sp)
    5700:	01012903          	lw	s2,16(sp)
    5704:	00c12983          	lw	s3,12(sp)
    5708:	00812a03          	lw	s4,8(sp)
    570c:	00412a83          	lw	s5,4(sp)
    5710:	00012b03          	lw	s6,0(sp)
    5714:	02010113          	addi	sp,sp,32
    5718:	00008067          	ret
	expected_wakeup_time = ticks + z_tick_get_32();
    571c:	150010ef          	jal	ra,686c <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
    5720:	41f45b13          	srai	s6,s0,0x1f
	expected_wakeup_time = ticks + z_tick_get_32();
    5724:	00a404b3          	add	s1,s0,a0
    5728:	00800793          	li	a5,8
    572c:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5730:	00007a37          	lui	s4,0x7
    5734:	73ca0513          	addi	a0,s4,1852 # 773c <sched_spinlock>
	key = (mstatus & MSTATUS_IEN);
    5738:	0087fa93          	andi	s5,a5,8
    573c:	608000ef          	jal	ra,5d44 <z_spin_lock_valid>
    5740:	04051063          	bnez	a0,5780 <z_tick_sleep+0x108>
    5744:	00007937          	lui	s2,0x7
    5748:	000075b7          	lui	a1,0x7
    574c:	00007537          	lui	a0,0x7
    5750:	05c00693          	li	a3,92
    5754:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    5758:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    575c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5760:	db1fb0ef          	jal	ra,1510 <printk>
    5764:	00007537          	lui	a0,0x7
    5768:	73ca0593          	addi	a1,s4,1852
    576c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    5770:	da1fb0ef          	jal	ra,1510 <printk>
    5774:	05c00593          	li	a1,92
    5778:	11c90513          	addi	a0,s2,284
    577c:	c8dfc0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    5780:	73ca0513          	addi	a0,s4,1852
    5784:	618000ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	unready_thread(_current);
    5788:	0089a503          	lw	a0,8(s3)
    578c:	8c9ff0ef          	jal	ra,5054 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5790:	0089a503          	lw	a0,8(s3)
    5794:	000055b7          	lui	a1,0x5
    5798:	00040613          	mv	a2,s0
    579c:	01850513          	addi	a0,a0,24
    57a0:	000b0693          	mv	a3,s6
    57a4:	a1058593          	addi	a1,a1,-1520 # 4a10 <z_thread_timeout>
    57a8:	778000ef          	jal	ra,5f20 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    57ac:	0089a703          	lw	a4,8(s3)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57b0:	73ca0513          	addi	a0,s4,1852
	thread->base.thread_state |= _THREAD_SUSPENDED;
    57b4:	00d74783          	lbu	a5,13(a4)
    57b8:	0107e793          	ori	a5,a5,16
    57bc:	00f706a3          	sb	a5,13(a4)
    57c0:	5ac000ef          	jal	ra,5d6c <z_spin_unlock_valid>
    57c4:	04051063          	bnez	a0,5804 <z_tick_sleep+0x18c>
    57c8:	00007437          	lui	s0,0x7
    57cc:	000075b7          	lui	a1,0x7
    57d0:	00007537          	lui	a0,0x7
    57d4:	09b00693          	li	a3,155
    57d8:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    57dc:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    57e0:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    57e4:	d2dfb0ef          	jal	ra,1510 <printk>
    57e8:	00007537          	lui	a0,0x7
    57ec:	73ca0593          	addi	a1,s4,1852
    57f0:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    57f4:	d1dfb0ef          	jal	ra,1510 <printk>
    57f8:	09b00593          	li	a1,155
    57fc:	11c40513          	addi	a0,s0,284
    5800:	c09fc0ef          	jal	ra,2408 <assert_post_action>
    5804:	000a8513          	mv	a0,s5
    5808:	a51fa0ef          	jal	ra,258 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    580c:	0089a783          	lw	a5,8(s3)
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5810:	00d7c783          	lbu	a5,13(a5)
    5814:	0107f793          	andi	a5,a5,16
    5818:	02078e63          	beqz	a5,5854 <z_tick_sleep+0x1dc>
    581c:	00007437          	lui	s0,0x7
    5820:	000075b7          	lui	a1,0x7
    5824:	00007537          	lui	a0,0x7
    5828:	49c58593          	addi	a1,a1,1180 # 749c <levels.0+0x284>
    582c:	4d200693          	li	a3,1234
    5830:	3c040613          	addi	a2,s0,960 # 73c0 <levels.0+0x1a8>
    5834:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5838:	cd9fb0ef          	jal	ra,1510 <printk>
    583c:	00007537          	lui	a0,0x7
    5840:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    5844:	ccdfb0ef          	jal	ra,1510 <printk>
    5848:	4d200593          	li	a1,1234
    584c:	3c040513          	addi	a0,s0,960
    5850:	bb9fc0ef          	jal	ra,2408 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
    5854:	018010ef          	jal	ra,686c <z_tick_get_32>
    5858:	40a48433          	sub	s0,s1,a0
    585c:	e8045ae3          	bgez	s0,56f0 <z_tick_sleep+0x78>
    5860:	00000413          	li	s0,0
    5864:	e8dff06f          	j	56f0 <z_tick_sleep+0x78>

00005868 <z_impl_k_sleep>:
    5868:	000087b7          	lui	a5,0x8

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    586c:	bd07a703          	lw	a4,-1072(a5) # 7bd0 <_kernel>
{
    5870:	fe010113          	addi	sp,sp,-32
    5874:	00812c23          	sw	s0,24(sp)
    5878:	00912a23          	sw	s1,20(sp)
    587c:	01212823          	sw	s2,16(sp)
    5880:	01312623          	sw	s3,12(sp)
    5884:	00112e23          	sw	ra,28(sp)
    5888:	01412423          	sw	s4,8(sp)
    588c:	00050493          	mv	s1,a0
    5890:	00050993          	mv	s3,a0
    5894:	00058413          	mv	s0,a1
    5898:	bd078913          	addi	s2,a5,-1072
	__ASSERT(!arch_is_in_isr(), "");
    589c:	02070e63          	beqz	a4,58d8 <z_impl_k_sleep+0x70>
    58a0:	00007a37          	lui	s4,0x7
    58a4:	000075b7          	lui	a1,0x7
    58a8:	00007537          	lui	a0,0x7
    58ac:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    58b0:	4e100693          	li	a3,1249
    58b4:	3c0a0613          	addi	a2,s4,960 # 73c0 <levels.0+0x1a8>
    58b8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    58bc:	c55fb0ef          	jal	ra,1510 <printk>
    58c0:	00007537          	lui	a0,0x7
    58c4:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    58c8:	c49fb0ef          	jal	ra,1510 <printk>
    58cc:	4e100593          	li	a1,1249
    58d0:	3c0a0513          	addi	a0,s4,960
    58d4:	b35fc0ef          	jal	ra,2408 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58d8:	fff00793          	li	a5,-1
    58dc:	02f99a63          	bne	s3,a5,5910 <z_impl_k_sleep+0xa8>
    58e0:	03341863          	bne	s0,s3,5910 <z_impl_k_sleep+0xa8>
		k_thread_suspend(_current);
    58e4:	00892503          	lw	a0,8(s2)
	z_impl_k_thread_suspend(thread);
    58e8:	bf8ff0ef          	jal	ra,4ce0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    58ec:	fff00513          	li	a0,-1
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    58f0:	01c12083          	lw	ra,28(sp)
    58f4:	01812403          	lw	s0,24(sp)
    58f8:	01412483          	lw	s1,20(sp)
    58fc:	01012903          	lw	s2,16(sp)
    5900:	00c12983          	lw	s3,12(sp)
    5904:	00812a03          	lw	s4,8(sp)
    5908:	02010113          	addi	sp,sp,32
    590c:	00008067          	ret
	ticks = z_tick_sleep(ticks);
    5910:	00048513          	mv	a0,s1
    5914:	d65ff0ef          	jal	ra,5678 <z_tick_sleep>
			return t * (to_hz / from_hz);
    5918:	00a00793          	li	a5,10
    591c:	02f50533          	mul	a0,a0,a5
	return k_ticks_to_ms_floor64(ticks);
    5920:	fd1ff06f          	j	58f0 <z_impl_k_sleep+0x88>

00005924 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5924:	000087b7          	lui	a5,0x8
    5928:	bd87a503          	lw	a0,-1064(a5) # 7bd8 <_kernel+0x8>
    592c:	00008067          	ret

00005930 <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
	z_sched_start(thread);
    5930:	fbdfe06f          	j	48ec <z_sched_start>

00005934 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5934:	fd010113          	addi	sp,sp,-48
    5938:	02812423          	sw	s0,40(sp)
    593c:	02912223          	sw	s1,36(sp)
    5940:	03212023          	sw	s2,32(sp)
    5944:	01312e23          	sw	s3,28(sp)
    5948:	01412c23          	sw	s4,24(sp)
    594c:	02112623          	sw	ra,44(sp)
    5950:	00068a13          	mv	s4,a3
    5954:	01512a23          	sw	s5,20(sp)
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    5958:	02800693          	li	a3,40
{
    595c:	00050413          	mv	s0,a0
    5960:	00058993          	mv	s3,a1
    5964:	00060493          	mv	s1,a2
    5968:	00088913          	mv	s2,a7
	Z_ASSERT_VALID_PRIO(prio, entry);
    596c:	08d89e63          	bne	a7,a3,5a08 <z_setup_new_thread+0xd4>
    5970:	000076b7          	lui	a3,0x7
    5974:	87c68693          	addi	a3,a3,-1924 # 687c <idle>
    5978:	08da1e63          	bne	s4,a3,5a14 <z_setup_new_thread+0xe0>
	sys_dlist_init(&w->waitq);
    597c:	03040693          	addi	a3,s0,48
	list->head = (sys_dnode_t *)list;
    5980:	02d42823          	sw	a3,48(s0)
	list->tail = (sys_dnode_t *)list;
    5984:	02d42a23          	sw	a3,52(s0)
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    5988:	03012683          	lw	a3,48(sp)
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    598c:	00f48493          	addi	s1,s1,15
    5990:	ff04f493          	andi	s1,s1,-16
	stack_ptr = (char *)stack + stack_obj_size;
    5994:	009984b3          	add	s1,s3,s1
	thread_base->user_options = (uint8_t)options;
    5998:	00d40623          	sb	a3,12(s0)
	thread_base->thread_state = (uint8_t)initial_state;
    599c:	00400693          	li	a3,4
    59a0:	00d406a3          	sb	a3,13(s0)

	thread_base->prio = priority;
    59a4:	01240723          	sb	s2,14(s0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    59a8:	00040513          	mv	a0,s0

	thread_base->sched_locked = 0U;
    59ac:	000407a3          	sb	zero,15(s0)
	node->next = NULL;
    59b0:	00042c23          	sw	zero,24(s0)
	node->prev = NULL;
    59b4:	00042e23          	sw	zero,28(s0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    59b8:	000a0693          	mv	a3,s4
    59bc:	00048613          	mv	a2,s1
    59c0:	00098593          	mv	a1,s3
    59c4:	830fd0ef          	jal	ra,29f4 <arch_new_thread>
	new_thread->resource_pool = _current->resource_pool;
    59c8:	000087b7          	lui	a5,0x8
    59cc:	bd87a783          	lw	a5,-1064(a5) # 7bd8 <_kernel+0x8>
}
    59d0:	02c12083          	lw	ra,44(sp)
	new_thread->init_data = NULL;
    59d4:	06042623          	sw	zero,108(s0)
	new_thread->resource_pool = _current->resource_pool;
    59d8:	0787a783          	lw	a5,120(a5)
	new_thread->fn_abort = NULL;
    59dc:	06042823          	sw	zero,112(s0)
}
    59e0:	02012903          	lw	s2,32(sp)
	new_thread->resource_pool = _current->resource_pool;
    59e4:	06f42c23          	sw	a5,120(s0)
}
    59e8:	02812403          	lw	s0,40(sp)
    59ec:	01c12983          	lw	s3,28(sp)
    59f0:	01812a03          	lw	s4,24(sp)
    59f4:	01412a83          	lw	s5,20(sp)
    59f8:	00048513          	mv	a0,s1
    59fc:	02412483          	lw	s1,36(sp)
    5a00:	03010113          	addi	sp,sp,48
    5a04:	00008067          	ret
	Z_ASSERT_VALID_PRIO(prio, entry);
    5a08:	01d88693          	addi	a3,a7,29
    5a0c:	04400613          	li	a2,68
    5a10:	f6d676e3          	bgeu	a2,a3,597c <z_setup_new_thread+0x48>
    5a14:	00007ab7          	lui	s5,0x7
    5a18:	000075b7          	lui	a1,0x7
    5a1c:	00007537          	lui	a0,0x7
    5a20:	21300693          	li	a3,531
    5a24:	4dca8613          	addi	a2,s5,1244 # 74dc <levels.0+0x2c4>
    5a28:	50058593          	addi	a1,a1,1280 # 7500 <levels.0+0x2e8>
    5a2c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5a30:	01012623          	sw	a6,12(sp)
    5a34:	00f12423          	sw	a5,8(sp)
    5a38:	00e12223          	sw	a4,4(sp)
    5a3c:	ad5fb0ef          	jal	ra,1510 <printk>
    5a40:	00007537          	lui	a0,0x7
    5a44:	fe300693          	li	a3,-29
    5a48:	02700613          	li	a2,39
    5a4c:	00090593          	mv	a1,s2
    5a50:	58050513          	addi	a0,a0,1408 # 7580 <levels.0+0x368>
    5a54:	abdfb0ef          	jal	ra,1510 <printk>
    5a58:	21300593          	li	a1,531
    5a5c:	4dca8513          	addi	a0,s5,1244
    5a60:	9a9fc0ef          	jal	ra,2408 <assert_post_action>
    5a64:	00c12803          	lw	a6,12(sp)
    5a68:	00812783          	lw	a5,8(sp)
    5a6c:	00412703          	lw	a4,4(sp)
    5a70:	f0dff06f          	j	597c <z_setup_new_thread+0x48>

00005a74 <z_impl_k_thread_create>:
{
    5a74:	fc010113          	addi	sp,sp,-64
    5a78:	03512223          	sw	s5,36(sp)
    5a7c:	00068a93          	mv	s5,a3
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5a80:	000086b7          	lui	a3,0x8
    5a84:	bd06a683          	lw	a3,-1072(a3) # 7bd0 <_kernel>
{
    5a88:	02812c23          	sw	s0,56(sp)
    5a8c:	02912a23          	sw	s1,52(sp)
    5a90:	03212823          	sw	s2,48(sp)
    5a94:	03312623          	sw	s3,44(sp)
    5a98:	03412423          	sw	s4,40(sp)
    5a9c:	02112e23          	sw	ra,60(sp)
    5aa0:	03612023          	sw	s6,32(sp)
    5aa4:	04812903          	lw	s2,72(sp)
    5aa8:	04c12483          	lw	s1,76(sp)
    5aac:	00050413          	mv	s0,a0
    5ab0:	00058993          	mv	s3,a1
    5ab4:	00060a13          	mv	s4,a2
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5ab8:	04068e63          	beqz	a3,5b14 <z_impl_k_thread_create+0xa0>
    5abc:	00007b37          	lui	s6,0x7
    5ac0:	000075b7          	lui	a1,0x7
    5ac4:	00007537          	lui	a0,0x7
    5ac8:	27300693          	li	a3,627
    5acc:	4dcb0613          	addi	a2,s6,1244 # 74dc <levels.0+0x2c4>
    5ad0:	30c58593          	addi	a1,a1,780 # 730c <levels.0+0xf4>
    5ad4:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5ad8:	01112e23          	sw	a7,28(sp)
    5adc:	01012c23          	sw	a6,24(sp)
    5ae0:	00f12a23          	sw	a5,20(sp)
    5ae4:	00e12823          	sw	a4,16(sp)
    5ae8:	a29fb0ef          	jal	ra,1510 <printk>
    5aec:	00007537          	lui	a0,0x7
    5af0:	5b450513          	addi	a0,a0,1460 # 75b4 <levels.0+0x39c>
    5af4:	a1dfb0ef          	jal	ra,1510 <printk>
    5af8:	27300593          	li	a1,627
    5afc:	4dcb0513          	addi	a0,s6,1244
    5b00:	909fc0ef          	jal	ra,2408 <assert_post_action>
    5b04:	01c12883          	lw	a7,28(sp)
    5b08:	01812803          	lw	a6,24(sp)
    5b0c:	01412783          	lw	a5,20(sp)
    5b10:	01012703          	lw	a4,16(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5b14:	04012683          	lw	a3,64(sp)
    5b18:	00012223          	sw	zero,4(sp)
    5b1c:	000a0613          	mv	a2,s4
    5b20:	00d12023          	sw	a3,0(sp)
    5b24:	00098593          	mv	a1,s3
    5b28:	000a8693          	mv	a3,s5
    5b2c:	00040513          	mv	a0,s0
    5b30:	e05ff0ef          	jal	ra,5934 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5b34:	fff00693          	li	a3,-1
    5b38:	00d91463          	bne	s2,a3,5b40 <z_impl_k_thread_create+0xcc>
    5b3c:	01248a63          	beq	s1,s2,5b50 <z_impl_k_thread_create+0xdc>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5b40:	0124e7b3          	or	a5,s1,s2
    5b44:	02079c63          	bnez	a5,5b7c <z_impl_k_thread_create+0x108>
	z_sched_start(thread);
    5b48:	00040513          	mv	a0,s0
    5b4c:	da1fe0ef          	jal	ra,48ec <z_sched_start>
}
    5b50:	03c12083          	lw	ra,60(sp)
    5b54:	00040513          	mv	a0,s0
    5b58:	03812403          	lw	s0,56(sp)
    5b5c:	03412483          	lw	s1,52(sp)
    5b60:	03012903          	lw	s2,48(sp)
    5b64:	02c12983          	lw	s3,44(sp)
    5b68:	02812a03          	lw	s4,40(sp)
    5b6c:	02412a83          	lw	s5,36(sp)
    5b70:	02012b03          	lw	s6,32(sp)
    5b74:	04010113          	addi	sp,sp,64
    5b78:	00008067          	ret
    5b7c:	000055b7          	lui	a1,0x5
    5b80:	00090613          	mv	a2,s2
    5b84:	00048693          	mv	a3,s1
    5b88:	a1058593          	addi	a1,a1,-1520 # 4a10 <z_thread_timeout>
    5b8c:	01840513          	addi	a0,s0,24
    5b90:	390000ef          	jal	ra,5f20 <z_add_timeout>
    5b94:	fbdff06f          	j	5b50 <z_impl_k_thread_create+0xdc>

00005b98 <z_init_static_threads>:
{
    5b98:	fc010113          	addi	sp,sp,-64
    5b9c:	02912a23          	sw	s1,52(sp)
    5ba0:	01812c23          	sw	s8,24(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    5ba4:	000074b7          	lui	s1,0x7
    5ba8:	00007c37          	lui	s8,0x7
{
    5bac:	02812c23          	sw	s0,56(sp)
    5bb0:	03212823          	sw	s2,48(sp)
    5bb4:	03312623          	sw	s3,44(sp)
    5bb8:	03412423          	sw	s4,40(sp)
    5bbc:	03512223          	sw	s5,36(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    5bc0:	70cc0413          	addi	s0,s8,1804 # 770c <__data_ram_end>
{
    5bc4:	02112e23          	sw	ra,60(sp)
    5bc8:	03612023          	sw	s6,32(sp)
    5bcc:	01712e23          	sw	s7,28(sp)
    5bd0:	01912a23          	sw	s9,20(sp)
    5bd4:	70cc0c13          	addi	s8,s8,1804
    5bd8:	70c48493          	addi	s1,s1,1804 # 770c <__data_ram_end>
	_FOREACH_STATIC_THREAD(thread_data) {
    5bdc:	00007937          	lui	s2,0x7
    5be0:	000079b7          	lui	s3,0x7
    5be4:	00007a37          	lui	s4,0x7
    5be8:	00007ab7          	lui	s5,0x7
    5bec:	0284f663          	bgeu	s1,s0,5c18 <z_init_static_threads+0x80>
    5bf0:	5dc98593          	addi	a1,s3,1500 # 75dc <levels.0+0x3c4>
    5bf4:	2e100693          	li	a3,737
    5bf8:	4dc90613          	addi	a2,s2,1244 # 74dc <levels.0+0x2c4>
    5bfc:	f80a0513          	addi	a0,s4,-128 # 6f80 <forks+0xc4>
    5c00:	911fb0ef          	jal	ra,1510 <printk>
    5c04:	60ca8513          	addi	a0,s5,1548 # 760c <levels.0+0x3f4>
    5c08:	909fb0ef          	jal	ra,1510 <printk>
    5c0c:	2e100593          	li	a1,737
    5c10:	4dc90513          	addi	a0,s2,1244
    5c14:	ff4fc0ef          	jal	ra,2408 <assert_post_action>
    5c18:	08946463          	bltu	s0,s1,5ca0 <z_init_static_threads+0x108>
	k_sched_lock();
    5c1c:	bd0fe0ef          	jal	ra,3fec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5c20:	00007437          	lui	s0,0x7
    5c24:	00007937          	lui	s2,0x7
    5c28:	000079b7          	lui	s3,0x7
    5c2c:	00007a37          	lui	s4,0x7
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5c30:	fff00a93          	li	s5,-1
		t += off;
    5c34:	00900b13          	li	s6,9
    5c38:	00005bb7          	lui	s7,0x5
	_FOREACH_STATIC_THREAD(thread_data) {
    5c3c:	0384f663          	bgeu	s1,s8,5c68 <z_init_static_threads+0xd0>
    5c40:	5dc90593          	addi	a1,s2,1500 # 75dc <levels.0+0x3c4>
    5c44:	30000693          	li	a3,768
    5c48:	4dc40613          	addi	a2,s0,1244 # 74dc <levels.0+0x2c4>
    5c4c:	f8098513          	addi	a0,s3,-128 # 6f80 <forks+0xc4>
    5c50:	8c1fb0ef          	jal	ra,1510 <printk>
    5c54:	60ca0513          	addi	a0,s4,1548 # 760c <levels.0+0x3f4>
    5c58:	8b9fb0ef          	jal	ra,1510 <printk>
    5c5c:	30000593          	li	a1,768
    5c60:	4dc40513          	addi	a0,s0,1244
    5c64:	fa4fc0ef          	jal	ra,2408 <assert_post_action>
    5c68:	069c6e63          	bltu	s8,s1,5ce4 <z_init_static_threads+0x14c>
}
    5c6c:	03812403          	lw	s0,56(sp)
    5c70:	03c12083          	lw	ra,60(sp)
    5c74:	03412483          	lw	s1,52(sp)
    5c78:	03012903          	lw	s2,48(sp)
    5c7c:	02c12983          	lw	s3,44(sp)
    5c80:	02812a03          	lw	s4,40(sp)
    5c84:	02412a83          	lw	s5,36(sp)
    5c88:	02012b03          	lw	s6,32(sp)
    5c8c:	01c12b83          	lw	s7,28(sp)
    5c90:	01812c03          	lw	s8,24(sp)
    5c94:	01412c83          	lw	s9,20(sp)
    5c98:	04010113          	addi	sp,sp,64
	k_sched_unlock();
    5c9c:	975fe06f          	j	4610 <k_sched_unlock>
		z_setup_new_thread(
    5ca0:	02c42783          	lw	a5,44(s0)
    5ca4:	00f12223          	sw	a5,4(sp)
    5ca8:	02042783          	lw	a5,32(s0)
    5cac:	00f12023          	sw	a5,0(sp)
    5cb0:	01442783          	lw	a5,20(s0)
    5cb4:	01c42883          	lw	a7,28(s0)
    5cb8:	01842803          	lw	a6,24(s0)
    5cbc:	01042703          	lw	a4,16(s0)
    5cc0:	00c42683          	lw	a3,12(s0)
    5cc4:	00842603          	lw	a2,8(s0)
    5cc8:	00442583          	lw	a1,4(s0)
    5ccc:	00042503          	lw	a0,0(s0)
    5cd0:	c65ff0ef          	jal	ra,5934 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5cd4:	00042783          	lw	a5,0(s0)
    5cd8:	0687a623          	sw	s0,108(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
    5cdc:	03040413          	addi	s0,s0,48
    5ce0:	f0dff06f          	j	5bec <z_init_static_threads+0x54>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5ce4:	024c2783          	lw	a5,36(s8)
    5ce8:	03578863          	beq	a5,s5,5d18 <z_init_static_threads+0x180>
			schedule_new_thread(thread_data->init_thread,
    5cec:	000c2c83          	lw	s9,0(s8)
					    K_MSEC(thread_data->init_delay));
    5cf0:	0007d463          	bgez	a5,5cf8 <z_init_static_threads+0x160>
    5cf4:	00000793          	li	a5,0
    5cf8:	00978513          	addi	a0,a5,9
    5cfc:	41f7d593          	srai	a1,a5,0x1f
    5d00:	00f537b3          	sltu	a5,a0,a5
    5d04:	00b785b3          	add	a1,a5,a1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d08:	01651c63          	bne	a0,s6,5d20 <z_init_static_threads+0x188>
    5d0c:	00059a63          	bnez	a1,5d20 <z_init_static_threads+0x188>
	z_sched_start(thread);
    5d10:	000c8513          	mv	a0,s9
    5d14:	bd9fe0ef          	jal	ra,48ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5d18:	030c0c13          	addi	s8,s8,48
    5d1c:	f21ff06f          	j	5c3c <z_init_static_threads+0xa4>
			return t / (from_hz / to_hz);
    5d20:	00a00613          	li	a2,10
    5d24:	00000693          	li	a3,0
    5d28:	de8fa0ef          	jal	ra,310 <__udivdi3>
    5d2c:	00050613          	mv	a2,a0
    5d30:	00058693          	mv	a3,a1
    5d34:	018c8513          	addi	a0,s9,24
    5d38:	a10b8593          	addi	a1,s7,-1520 # 4a10 <z_thread_timeout>
    5d3c:	1e4000ef          	jal	ra,5f20 <z_add_timeout>
    5d40:	fd9ff06f          	j	5d18 <z_init_static_threads+0x180>

00005d44 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5d44:	00052503          	lw	a0,0(a0)

	if (thread_cpu) {
    5d48:	00050e63          	beqz	a0,5d64 <z_spin_lock_valid+0x20>
		if ((thread_cpu & 3) == _current_cpu->id) {
    5d4c:	000087b7          	lui	a5,0x8
    5d50:	be47c783          	lbu	a5,-1052(a5) # 7be4 <_kernel+0x14>
    5d54:	00357513          	andi	a0,a0,3
    5d58:	40f50533          	sub	a0,a0,a5
    5d5c:	00a03533          	snez	a0,a0
    5d60:	00008067          	ret
			return false;
		}
	}
	return true;
    5d64:	00100513          	li	a0,1
}
    5d68:	00008067          	ret

00005d6c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5d6c:	000087b7          	lui	a5,0x8
    5d70:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>
    5d74:	0147c703          	lbu	a4,20(a5)
    5d78:	0087a783          	lw	a5,8(a5)
    5d7c:	00e7e7b3          	or	a5,a5,a4
    5d80:	00052703          	lw	a4,0(a0)
    5d84:	00f71863          	bne	a4,a5,5d94 <z_spin_unlock_valid+0x28>
		return false;
	}
	l->thread_cpu = 0;
    5d88:	00052023          	sw	zero,0(a0)
	return true;
    5d8c:	00100513          	li	a0,1
    5d90:	00008067          	ret
		return false;
    5d94:	00000513          	li	a0,0
}
    5d98:	00008067          	ret

00005d9c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5d9c:	000087b7          	lui	a5,0x8
    5da0:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>
    5da4:	0147c703          	lbu	a4,20(a5)
    5da8:	0087a783          	lw	a5,8(a5)
    5dac:	00e7e7b3          	or	a5,a5,a4
    5db0:	00f52023          	sw	a5,0(a0)
}
    5db4:	00008067          	ret

00005db8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
    5db8:	ff010113          	addi	sp,sp,-16
    5dbc:	00812423          	sw	s0,8(sp)
    5dc0:	00112623          	sw	ra,12(sp)
    5dc4:	00050413          	mv	s0,a0
	z_thread_single_abort(thread);
    5dc8:	878ff0ef          	jal	ra,4e40 <z_thread_single_abort>
    5dcc:	000087b7          	lui	a5,0x8
    5dd0:	bd078793          	addi	a5,a5,-1072 # 7bd0 <_kernel>

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
    5dd4:	0007a703          	lw	a4,0(a5)
    5dd8:	04071063          	bnez	a4,5e18 <z_impl_k_thread_abort+0x60>
		if (thread == _current) {
    5ddc:	0087a783          	lw	a5,8(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5de0:	00800513          	li	a0,8
    5de4:	00879e63          	bne	a5,s0,5e00 <z_impl_k_thread_abort+0x48>
    5de8:	30053573          	csrrc	a0,mstatus,a0
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
    5dec:	00812403          	lw	s0,8(sp)
    5df0:	00c12083          	lw	ra,12(sp)
    5df4:	00857513          	andi	a0,a0,8
    5df8:	01010113          	addi	sp,sp,16
    5dfc:	c5cfa06f          	j	258 <arch_swap>
    5e00:	30053573          	csrrc	a0,mstatus,a0
    5e04:	00812403          	lw	s0,8(sp)
    5e08:	00c12083          	lw	ra,12(sp)
	(void) z_reschedule_irqlock(arch_irq_lock());
    5e0c:	00857513          	andi	a0,a0,8
    5e10:	01010113          	addi	sp,sp,16
    5e14:	9a8fe06f          	j	3fbc <z_reschedule_irqlock>
    5e18:	00c12083          	lw	ra,12(sp)
    5e1c:	00812403          	lw	s0,8(sp)
    5e20:	01010113          	addi	sp,sp,16
    5e24:	00008067          	ret

00005e28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    5e28:	000077b7          	lui	a5,0x7
    5e2c:	7487a783          	lw	a5,1864(a5) # 7748 <announce_remaining>
    5e30:	00079463          	bnez	a5,5e38 <elapsed+0x10>
    5e34:	b31fc06f          	j	2964 <z_clock_elapsed>
}
    5e38:	00000513          	li	a0,0
    5e3c:	00008067          	ret

00005e40 <next_timeout>:
	return list->head == list;
    5e40:	000077b7          	lui	a5,0x7

static int32_t next_timeout(void)
{
    5e44:	ff010113          	addi	sp,sp,-16
    5e48:	6bc78793          	addi	a5,a5,1724 # 76bc <timeout_list>
    5e4c:	00812423          	sw	s0,8(sp)
    5e50:	0007a403          	lw	s0,0(a5)
    5e54:	00112623          	sw	ra,12(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e58:	00f41463          	bne	s0,a5,5e60 <next_timeout+0x20>
    5e5c:	00000413          	li	s0,0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5e60:	fc9ff0ef          	jal	ra,5e28 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    5e64:	04040c63          	beqz	s0,5ebc <next_timeout+0x7c>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    5e68:	01042703          	lw	a4,16(s0)
    5e6c:	01442783          	lw	a5,20(s0)
    5e70:	41f55693          	srai	a3,a0,0x1f
    5e74:	40a70533          	sub	a0,a4,a0
    5e78:	00a73733          	sltu	a4,a4,a0
    5e7c:	40d787b3          	sub	a5,a5,a3
    5e80:	40e787b3          	sub	a5,a5,a4
	int32_t ret = to == NULL ? MAX_WAIT
    5e84:	02f04c63          	bgtz	a5,5ebc <next_timeout+0x7c>
    5e88:	00079463          	bnez	a5,5e90 <next_timeout+0x50>
    5e8c:	02054863          	bltz	a0,5ebc <next_timeout+0x7c>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    5e90:	0007d463          	bgez	a5,5e98 <next_timeout+0x58>
    5e94:	00000513          	li	a0,0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5e98:	000087b7          	lui	a5,0x8
    5e9c:	be07a783          	lw	a5,-1056(a5) # 7be0 <_kernel+0x10>
    5ea0:	00078663          	beqz	a5,5eac <next_timeout+0x6c>
    5ea4:	00a7d463          	bge	a5,a0,5eac <next_timeout+0x6c>
    5ea8:	00078513          	mv	a0,a5
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5eac:	00c12083          	lw	ra,12(sp)
    5eb0:	00812403          	lw	s0,8(sp)
    5eb4:	01010113          	addi	sp,sp,16
    5eb8:	00008067          	ret
	int32_t ret = to == NULL ? MAX_WAIT
    5ebc:	80000537          	lui	a0,0x80000
    5ec0:	fff54513          	not	a0,a0
    5ec4:	fd5ff06f          	j	5e98 <next_timeout+0x58>

00005ec8 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    5ec8:	00052783          	lw	a5,0(a0) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5ecc:	02050e63          	beqz	a0,5f08 <remove_timeout+0x40>
	return (node == list->tail) ? NULL : node->next;
    5ed0:	00007737          	lui	a4,0x7
    5ed4:	6c072703          	lw	a4,1728(a4) # 76c0 <timeout_list+0x4>
    5ed8:	02e50863          	beq	a0,a4,5f08 <remove_timeout+0x40>
	if (next(t) != NULL) {
    5edc:	02078663          	beqz	a5,5f08 <remove_timeout+0x40>
		next(t)->dticks += t->dticks;
    5ee0:	0107a703          	lw	a4,16(a5)
    5ee4:	01052683          	lw	a3,16(a0)
    5ee8:	01452583          	lw	a1,20(a0)
    5eec:	0147a603          	lw	a2,20(a5)
    5ef0:	00d706b3          	add	a3,a4,a3
    5ef4:	00e6b733          	sltu	a4,a3,a4
    5ef8:	00b60633          	add	a2,a2,a1
    5efc:	00c70733          	add	a4,a4,a2
    5f00:	00d7a823          	sw	a3,16(a5)
    5f04:	00e7aa23          	sw	a4,20(a5)
	node->prev->next = node->next;
    5f08:	00452703          	lw	a4,4(a0)
    5f0c:	00f72023          	sw	a5,0(a4)
	node->next->prev = node->prev;
    5f10:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    5f14:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    5f18:	00052223          	sw	zero,4(a0)
}
    5f1c:	00008067          	ret

00005f20 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5f20:	fe010113          	addi	sp,sp,-32
    5f24:	00812c23          	sw	s0,24(sp)
    5f28:	01212823          	sw	s2,16(sp)
    5f2c:	00112e23          	sw	ra,28(sp)
    5f30:	00058913          	mv	s2,a1
    5f34:	00912a23          	sw	s1,20(sp)
    5f38:	01312623          	sw	s3,12(sp)
    5f3c:	01412423          	sw	s4,8(sp)
    5f40:	01512223          	sw	s5,4(sp)
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f44:	fff00593          	li	a1,-1
{
    5f48:	00050413          	mv	s0,a0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f4c:	00b61463          	bne	a2,a1,5f54 <z_add_timeout+0x34>
    5f50:	22c68a63          	beq	a3,a2,6184 <z_add_timeout+0x264>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    5f54:	00160513          	addi	a0,a2,1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5f58:	ffe00a13          	li	s4,-2
	k_ticks_t ticks = timeout.ticks + 1;
    5f5c:	00c534b3          	sltu	s1,a0,a2
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5f60:	40aa07b3          	sub	a5,s4,a0
	k_ticks_t ticks = timeout.ticks + 1;
    5f64:	00d484b3          	add	s1,s1,a3
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5f68:	00fa3733          	sltu	a4,s4,a5
    5f6c:	fff4c793          	not	a5,s1
    5f70:	40e787b3          	sub	a5,a5,a4
	k_ticks_t ticks = timeout.ticks + 1;
    5f74:	00050993          	mv	s3,a0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5f78:	0407c863          	bltz	a5,5fc8 <z_add_timeout+0xa8>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    5f7c:	eadff0ef          	jal	ra,5e28 <elapsed>
    5f80:	00007737          	lui	a4,0x7
    5f84:	71870713          	addi	a4,a4,1816 # 7718 <curr_tick>
    5f88:	00072783          	lw	a5,0(a4)
    5f8c:	00472683          	lw	a3,4(a4)
    5f90:	40fa07b3          	sub	a5,s4,a5
    5f94:	00fa3a33          	sltu	s4,s4,a5
    5f98:	fff6c693          	not	a3,a3
    5f9c:	413789b3          	sub	s3,a5,s3
    5fa0:	414686b3          	sub	a3,a3,s4
    5fa4:	0137b7b3          	sltu	a5,a5,s3
    5fa8:	409684b3          	sub	s1,a3,s1
    5fac:	40f484b3          	sub	s1,s1,a5
    5fb0:	41f55793          	srai	a5,a0,0x1f
    5fb4:	40a98533          	sub	a0,s3,a0
    5fb8:	00a9b6b3          	sltu	a3,s3,a0
    5fbc:	40f484b3          	sub	s1,s1,a5
    5fc0:	00050993          	mv	s3,a0
    5fc4:	40d484b3          	sub	s1,s1,a3
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    5fc8:	00042783          	lw	a5,0(s0)
    5fcc:	02078e63          	beqz	a5,6008 <z_add_timeout+0xe8>
    5fd0:	00007a37          	lui	s4,0x7
    5fd4:	000075b7          	lui	a1,0x7
    5fd8:	00007537          	lui	a0,0x7
    5fdc:	65058593          	addi	a1,a1,1616 # 7650 <levels.0+0x438>
    5fe0:	06800693          	li	a3,104
    5fe4:	62ca0613          	addi	a2,s4,1580 # 762c <levels.0+0x414>
    5fe8:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    5fec:	d24fb0ef          	jal	ra,1510 <printk>
    5ff0:	00007537          	lui	a0,0x7
    5ff4:	38c50513          	addi	a0,a0,908 # 738c <levels.0+0x174>
    5ff8:	d18fb0ef          	jal	ra,1510 <printk>
    5ffc:	06800593          	li	a1,104
    6000:	62ca0513          	addi	a0,s4,1580
    6004:	c04fc0ef          	jal	ra,2408 <assert_post_action>
	to->fn = fn;
    6008:	01242423          	sw	s2,8(s0)
	ticks = MAX(1, ticks);
    600c:	00098a13          	mv	s4,s3
    6010:	00904a63          	bgtz	s1,6024 <z_add_timeout+0x104>
    6014:	00049463          	bnez	s1,601c <z_add_timeout+0xfc>
    6018:	00099663          	bnez	s3,6024 <z_add_timeout+0x104>
    601c:	00100a13          	li	s4,1
    6020:	00000493          	li	s1,0
    6024:	00800993          	li	s3,8
    6028:	3009b9f3          	csrrc	s3,mstatus,s3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    602c:	00007937          	lui	s2,0x7
    6030:	74c90513          	addi	a0,s2,1868 # 774c <timeout_lock>
	key = (mstatus & MSTATUS_IEN);
    6034:	0089f993          	andi	s3,s3,8
    6038:	d0dff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    603c:	04051063          	bnez	a0,607c <z_add_timeout+0x15c>
    6040:	00007ab7          	lui	s5,0x7
    6044:	000075b7          	lui	a1,0x7
    6048:	00007537          	lui	a0,0x7
    604c:	05c00693          	li	a3,92
    6050:	11ca8613          	addi	a2,s5,284 # 711c <led0_dev_cfg+0x20>
    6054:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    6058:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    605c:	cb4fb0ef          	jal	ra,1510 <printk>
    6060:	00007537          	lui	a0,0x7
    6064:	74c90593          	addi	a1,s2,1868
    6068:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    606c:	ca4fb0ef          	jal	ra,1510 <printk>
    6070:	05c00593          	li	a1,92
    6074:	11ca8513          	addi	a0,s5,284
    6078:	b90fc0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    607c:	74c90513          	addi	a0,s2,1868
    6080:	d1dff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    6084:	da5ff0ef          	jal	ra,5e28 <elapsed>
    6088:	41f55793          	srai	a5,a0,0x1f
    608c:	01450a33          	add	s4,a0,s4
	return list->head == list;
    6090:	00007737          	lui	a4,0x7
    6094:	009784b3          	add	s1,a5,s1
    6098:	00aa3533          	sltu	a0,s4,a0
    609c:	6bc72783          	lw	a5,1724(a4) # 76bc <timeout_list>
    60a0:	00950533          	add	a0,a0,s1
    60a4:	01442823          	sw	s4,16(s0)
    60a8:	00a42a23          	sw	a0,20(s0)
    60ac:	6bc70713          	addi	a4,a4,1724
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60b0:	00e78663          	beq	a5,a4,60bc <z_add_timeout+0x19c>
	return (node == list->tail) ? NULL : node->next;
    60b4:	00472803          	lw	a6,4(a4)
		for (t = first(); t != NULL; t = next(t)) {
    60b8:	02079063          	bnez	a5,60d8 <z_add_timeout+0x1b8>
	node->prev = list->tail;
    60bc:	00472783          	lw	a5,4(a4)
	node->next = list;
    60c0:	00e42023          	sw	a4,0(s0)
	node->prev = list->tail;
    60c4:	00f42223          	sw	a5,4(s0)
	list->tail->next = node;
    60c8:	00472783          	lw	a5,4(a4)
    60cc:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    60d0:	00872223          	sw	s0,4(a4)
}
    60d4:	04c0006f          	j	6120 <z_add_timeout+0x200>
			if (t->dticks > to->dticks) {
    60d8:	0147a503          	lw	a0,20(a5)
    60dc:	01442583          	lw	a1,20(s0)
    60e0:	0107a683          	lw	a3,16(a5)
    60e4:	01042603          	lw	a2,16(s0)
    60e8:	00a5c663          	blt	a1,a0,60f4 <z_add_timeout+0x1d4>
    60ec:	0ab51e63          	bne	a0,a1,61a8 <z_add_timeout+0x288>
    60f0:	0ad67c63          	bgeu	a2,a3,61a8 <z_add_timeout+0x288>
				t->dticks -= to->dticks;
    60f4:	40c68633          	sub	a2,a3,a2
    60f8:	00c6b6b3          	sltu	a3,a3,a2
    60fc:	40b505b3          	sub	a1,a0,a1
    6100:	40d586b3          	sub	a3,a1,a3
    6104:	00d7aa23          	sw	a3,20(a5)
	node->prev = successor->prev;
    6108:	0047a683          	lw	a3,4(a5)
    610c:	00c7a823          	sw	a2,16(a5)
	node->next = successor;
    6110:	00f42023          	sw	a5,0(s0)
	node->prev = successor->prev;
    6114:	00d42223          	sw	a3,4(s0)
	successor->prev->next = node;
    6118:	0086a023          	sw	s0,0(a3)
	successor->prev = node;
    611c:	0087a223          	sw	s0,4(a5)
	return list->head == list;
    6120:	00072783          	lw	a5,0(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6124:	00e78a63          	beq	a5,a4,6138 <z_add_timeout+0x218>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6128:	00f41863          	bne	s0,a5,6138 <z_add_timeout+0x218>
			z_clock_set_timeout(next_timeout(), false);
    612c:	d15ff0ef          	jal	ra,5e40 <next_timeout>
    6130:	00000593          	li	a1,0
    6134:	82dfc0ef          	jal	ra,2960 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6138:	74c90513          	addi	a0,s2,1868
    613c:	c31ff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    6140:	04051063          	bnez	a0,6180 <z_add_timeout+0x260>
    6144:	00007437          	lui	s0,0x7
    6148:	000075b7          	lui	a1,0x7
    614c:	00007537          	lui	a0,0x7
    6150:	08400693          	li	a3,132
    6154:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    6158:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    615c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6160:	bb0fb0ef          	jal	ra,1510 <printk>
    6164:	00007537          	lui	a0,0x7
    6168:	74c90593          	addi	a1,s2,1868
    616c:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    6170:	ba0fb0ef          	jal	ra,1510 <printk>
    6174:	08400593          	li	a1,132
    6178:	11c40513          	addi	a0,s0,284
    617c:	a8cfc0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6180:	3009a9f3          	csrrs	s3,mstatus,s3
		}
	}
}
    6184:	01c12083          	lw	ra,28(sp)
    6188:	01812403          	lw	s0,24(sp)
    618c:	01412483          	lw	s1,20(sp)
    6190:	01012903          	lw	s2,16(sp)
    6194:	00c12983          	lw	s3,12(sp)
    6198:	00812a03          	lw	s4,8(sp)
    619c:	00412a83          	lw	s5,4(sp)
    61a0:	02010113          	addi	sp,sp,32
    61a4:	00008067          	ret
			to->dticks -= t->dticks;
    61a8:	40d606b3          	sub	a3,a2,a3
    61ac:	00d63633          	sltu	a2,a2,a3
    61b0:	40a585b3          	sub	a1,a1,a0
    61b4:	40c58633          	sub	a2,a1,a2
    61b8:	00d42823          	sw	a3,16(s0)
    61bc:	00c42a23          	sw	a2,20(s0)
	return (node == list->tail) ? NULL : node->next;
    61c0:	ef078ee3          	beq	a5,a6,60bc <z_add_timeout+0x19c>
    61c4:	0007a783          	lw	a5,0(a5)
    61c8:	ef1ff06f          	j	60b8 <z_add_timeout+0x198>

000061cc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    61cc:	fe010113          	addi	sp,sp,-32
    61d0:	00912a23          	sw	s1,20(sp)
    61d4:	00112e23          	sw	ra,28(sp)
    61d8:	00812c23          	sw	s0,24(sp)
    61dc:	01212823          	sw	s2,16(sp)
    61e0:	01312623          	sw	s3,12(sp)
    61e4:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    61e8:	00800793          	li	a5,8
    61ec:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61f0:	00007437          	lui	s0,0x7
    61f4:	74c40513          	addi	a0,s0,1868 # 774c <timeout_lock>
	key = (mstatus & MSTATUS_IEN);
    61f8:	0087f993          	andi	s3,a5,8
    61fc:	b49ff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    6200:	04051063          	bnez	a0,6240 <z_abort_timeout+0x74>
    6204:	00007937          	lui	s2,0x7
    6208:	000075b7          	lui	a1,0x7
    620c:	00007537          	lui	a0,0x7
    6210:	05c00693          	li	a3,92
    6214:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    6218:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    621c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6220:	af0fb0ef          	jal	ra,1510 <printk>
    6224:	00007537          	lui	a0,0x7
    6228:	74c40593          	addi	a1,s0,1868
    622c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    6230:	ae0fb0ef          	jal	ra,1510 <printk>
    6234:	05c00593          	li	a1,92
    6238:	11c90513          	addi	a0,s2,284
    623c:	9ccfc0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    6240:	74c40513          	addi	a0,s0,1868
    6244:	b59ff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6248:	0004a783          	lw	a5,0(s1)
	int ret = -EINVAL;
    624c:	fea00913          	li	s2,-22
		if (sys_dnode_is_linked(&to->node)) {
    6250:	00078863          	beqz	a5,6260 <z_abort_timeout+0x94>
			remove_timeout(to);
    6254:	00048513          	mv	a0,s1
    6258:	c71ff0ef          	jal	ra,5ec8 <remove_timeout>
			ret = 0;
    625c:	00000913          	li	s2,0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6260:	74c40513          	addi	a0,s0,1868
    6264:	b09ff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    6268:	04051063          	bnez	a0,62a8 <z_abort_timeout+0xdc>
    626c:	000074b7          	lui	s1,0x7
    6270:	000075b7          	lui	a1,0x7
    6274:	00007537          	lui	a0,0x7
    6278:	08400693          	li	a3,132
    627c:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    6280:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    6284:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6288:	a88fb0ef          	jal	ra,1510 <printk>
    628c:	00007537          	lui	a0,0x7
    6290:	74c40593          	addi	a1,s0,1868
    6294:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    6298:	a78fb0ef          	jal	ra,1510 <printk>
    629c:	08400593          	li	a1,132
    62a0:	11c48513          	addi	a0,s1,284
    62a4:	964fc0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    62a8:	3009a7f3          	csrrs	a5,mstatus,s3
		}
	}

	return ret;
}
    62ac:	01c12083          	lw	ra,28(sp)
    62b0:	01812403          	lw	s0,24(sp)
    62b4:	01412483          	lw	s1,20(sp)
    62b8:	00c12983          	lw	s3,12(sp)
    62bc:	00090513          	mv	a0,s2
    62c0:	01012903          	lw	s2,16(sp)
    62c4:	02010113          	addi	sp,sp,32
    62c8:	00008067          	ret

000062cc <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    62cc:	fe010113          	addi	sp,sp,-32
    62d0:	00112e23          	sw	ra,28(sp)
    62d4:	00812c23          	sw	s0,24(sp)
    62d8:	00912a23          	sw	s1,20(sp)
    62dc:	01212823          	sw	s2,16(sp)
    62e0:	01312623          	sw	s3,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    62e4:	00800793          	li	a5,8
    62e8:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62ec:	00007437          	lui	s0,0x7
    62f0:	74c40513          	addi	a0,s0,1868 # 774c <timeout_lock>
	key = (mstatus & MSTATUS_IEN);
    62f4:	0087f993          	andi	s3,a5,8
    62f8:	a4dff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    62fc:	04051063          	bnez	a0,633c <z_get_next_timeout_expiry+0x70>
    6300:	000074b7          	lui	s1,0x7
    6304:	000075b7          	lui	a1,0x7
    6308:	00007537          	lui	a0,0x7
    630c:	05c00693          	li	a3,92
    6310:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    6314:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    6318:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    631c:	9f4fb0ef          	jal	ra,1510 <printk>
    6320:	00007537          	lui	a0,0x7
    6324:	74c40593          	addi	a1,s0,1868
    6328:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    632c:	9e4fb0ef          	jal	ra,1510 <printk>
    6330:	05c00593          	li	a1,92
    6334:	11c48513          	addi	a0,s1,284
    6338:	8d0fc0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    633c:	74c40513          	addi	a0,s0,1868
    6340:	a5dff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6344:	afdff0ef          	jal	ra,5e40 <next_timeout>
    6348:	00050493          	mv	s1,a0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    634c:	74c40513          	addi	a0,s0,1868
    6350:	a1dff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    6354:	04051063          	bnez	a0,6394 <z_get_next_timeout_expiry+0xc8>
    6358:	00007937          	lui	s2,0x7
    635c:	000075b7          	lui	a1,0x7
    6360:	00007537          	lui	a0,0x7
    6364:	08400693          	li	a3,132
    6368:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    636c:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    6370:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6374:	99cfb0ef          	jal	ra,1510 <printk>
    6378:	00007537          	lui	a0,0x7
    637c:	74c40593          	addi	a1,s0,1868
    6380:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    6384:	98cfb0ef          	jal	ra,1510 <printk>
    6388:	08400593          	li	a1,132
    638c:	11c90513          	addi	a0,s2,284
    6390:	878fc0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6394:	3009a7f3          	csrrs	a5,mstatus,s3
	}
	return ret;
}
    6398:	01c12083          	lw	ra,28(sp)
    639c:	01812403          	lw	s0,24(sp)
    63a0:	01012903          	lw	s2,16(sp)
    63a4:	00c12983          	lw	s3,12(sp)
    63a8:	00048513          	mv	a0,s1
    63ac:	01412483          	lw	s1,20(sp)
    63b0:	02010113          	addi	sp,sp,32
    63b4:	00008067          	ret

000063b8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    63b8:	fe010113          	addi	sp,sp,-32
    63bc:	00912a23          	sw	s1,20(sp)
    63c0:	01212823          	sw	s2,16(sp)
    63c4:	00112e23          	sw	ra,28(sp)
    63c8:	00812c23          	sw	s0,24(sp)
    63cc:	01312623          	sw	s3,12(sp)
    63d0:	01412423          	sw	s4,8(sp)
    63d4:	00050493          	mv	s1,a0
    63d8:	00058913          	mv	s2,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    63dc:	00800793          	li	a5,8
    63e0:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63e4:	00007437          	lui	s0,0x7
    63e8:	74c40513          	addi	a0,s0,1868 # 774c <timeout_lock>
	key = (mstatus & MSTATUS_IEN);
    63ec:	0087fa13          	andi	s4,a5,8
    63f0:	955ff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    63f4:	04051063          	bnez	a0,6434 <z_set_timeout_expiry+0x7c>
    63f8:	000079b7          	lui	s3,0x7
    63fc:	000075b7          	lui	a1,0x7
    6400:	00007537          	lui	a0,0x7
    6404:	05c00693          	li	a3,92
    6408:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    640c:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    6410:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6414:	8fcfb0ef          	jal	ra,1510 <printk>
    6418:	00007537          	lui	a0,0x7
    641c:	74c40593          	addi	a1,s0,1868
    6420:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    6424:	8ecfb0ef          	jal	ra,1510 <printk>
    6428:	05c00593          	li	a1,92
    642c:	11c98513          	addi	a0,s3,284
    6430:	fd9fb0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    6434:	74c40513          	addi	a0,s0,1868
    6438:	965ff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    643c:	a05ff0ef          	jal	ra,5e40 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6440:	00100793          	li	a5,1
    6444:	00a7da63          	bge	a5,a0,6458 <z_set_timeout_expiry+0xa0>
    6448:	00a4d863          	bge	s1,a0,6458 <z_set_timeout_expiry+0xa0>
			z_clock_set_timeout(ticks, is_idle);
    644c:	00090593          	mv	a1,s2
    6450:	00048513          	mv	a0,s1
    6454:	d0cfc0ef          	jal	ra,2960 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6458:	74c40513          	addi	a0,s0,1868
    645c:	911ff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    6460:	04051063          	bnez	a0,64a0 <z_set_timeout_expiry+0xe8>
    6464:	000074b7          	lui	s1,0x7
    6468:	000075b7          	lui	a1,0x7
    646c:	00007537          	lui	a0,0x7
    6470:	08400693          	li	a3,132
    6474:	11c48613          	addi	a2,s1,284 # 711c <led0_dev_cfg+0x20>
    6478:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    647c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6480:	890fb0ef          	jal	ra,1510 <printk>
    6484:	00007537          	lui	a0,0x7
    6488:	74c40593          	addi	a1,s0,1868
    648c:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    6490:	880fb0ef          	jal	ra,1510 <printk>
    6494:	08400593          	li	a1,132
    6498:	11c48513          	addi	a0,s1,284
    649c:	f6dfb0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    64a0:	300a27f3          	csrrs	a5,mstatus,s4
		}
	}
}
    64a4:	01c12083          	lw	ra,28(sp)
    64a8:	01812403          	lw	s0,24(sp)
    64ac:	01412483          	lw	s1,20(sp)
    64b0:	01012903          	lw	s2,16(sp)
    64b4:	00c12983          	lw	s3,12(sp)
    64b8:	00812a03          	lw	s4,8(sp)
    64bc:	02010113          	addi	sp,sp,32
    64c0:	00008067          	ret

000064c4 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
    64c4:	fd010113          	addi	sp,sp,-48
    64c8:	02812423          	sw	s0,40(sp)
    64cc:	03212023          	sw	s2,32(sp)
    64d0:	02112623          	sw	ra,44(sp)
    64d4:	02912223          	sw	s1,36(sp)
    64d8:	01312e23          	sw	s3,28(sp)
    64dc:	01412c23          	sw	s4,24(sp)
    64e0:	01512a23          	sw	s5,20(sp)
    64e4:	01612823          	sw	s6,16(sp)
    64e8:	01712623          	sw	s7,12(sp)
    64ec:	01812423          	sw	s8,8(sp)
    64f0:	01912223          	sw	s9,4(sp)
    64f4:	01a12023          	sw	s10,0(sp)
    64f8:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    64fc:	00800413          	li	s0,8
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6500:	e8cfe0ef          	jal	ra,4b8c <z_time_slice>
    6504:	30043473          	csrrc	s0,mstatus,s0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6508:	000074b7          	lui	s1,0x7
    650c:	74c48513          	addi	a0,s1,1868 # 774c <timeout_lock>
	key = (mstatus & MSTATUS_IEN);
    6510:	00847413          	andi	s0,s0,8
    6514:	831ff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    6518:	04051063          	bnez	a0,6558 <z_clock_announce+0x94>
    651c:	000079b7          	lui	s3,0x7
    6520:	000075b7          	lui	a1,0x7
    6524:	00007537          	lui	a0,0x7
    6528:	05c00693          	li	a3,92
    652c:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    6530:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    6534:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6538:	fd9fa0ef          	jal	ra,1510 <printk>
    653c:	00007537          	lui	a0,0x7
    6540:	74c48593          	addi	a1,s1,1868
    6544:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    6548:	fc9fa0ef          	jal	ra,1510 <printk>
    654c:	05c00593          	li	a1,92
    6550:	11c98513          	addi	a0,s3,284
    6554:	eb5fb0ef          	jal	ra,2408 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6558:	000079b7          	lui	s3,0x7
	z_spin_lock_set_owner(l);
    655c:	74c48513          	addi	a0,s1,1868
    6560:	83dff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return list->head == list;
    6564:	00007a37          	lui	s4,0x7
    6568:	7529a423          	sw	s2,1864(s3) # 7748 <announce_remaining>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    656c:	00007937          	lui	s2,0x7
    6570:	74898993          	addi	s3,s3,1864
    6574:	6bca0a13          	addi	s4,s4,1724 # 76bc <timeout_list>
    6578:	71890913          	addi	s2,s2,1816 # 7718 <curr_tick>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    657c:	00007ab7          	lui	s5,0x7
    6580:	00007bb7          	lui	s7,0x7
    6584:	00007b37          	lui	s6,0x7
    6588:	00007c37          	lui	s8,0x7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    658c:	00007cb7          	lui	s9,0x7
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6590:	0009a783          	lw	a5,0(s3)
    6594:	000a2d03          	lw	s10,0(s4)
		curr_tick += dt;
    6598:	00092683          	lw	a3,0(s2)
    659c:	00492803          	lw	a6,4(s2)
    65a0:	41f7d593          	srai	a1,a5,0x1f
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65a4:	034d0a63          	beq	s10,s4,65d8 <z_clock_announce+0x114>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    65a8:	020d0863          	beqz	s10,65d8 <z_clock_announce+0x114>
    65ac:	014d2603          	lw	a2,20(s10)
    65b0:	010d2703          	lw	a4,16(s10)
    65b4:	00c5c663          	blt	a1,a2,65c0 <z_clock_announce+0xfc>
    65b8:	0cb61663          	bne	a2,a1,6684 <z_clock_announce+0x1c0>
    65bc:	0ce7f463          	bgeu	a5,a4,6684 <z_clock_announce+0x1c0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    65c0:	40f70533          	sub	a0,a4,a5
    65c4:	00a73733          	sltu	a4,a4,a0
    65c8:	40b60633          	sub	a2,a2,a1
    65cc:	40e60733          	sub	a4,a2,a4
    65d0:	00ad2823          	sw	a0,16(s10)
    65d4:	00ed2a23          	sw	a4,20(s10)
	}

	curr_tick += announce_remaining;
    65d8:	00d786b3          	add	a3,a5,a3
    65dc:	010585b3          	add	a1,a1,a6
    65e0:	00f6b7b3          	sltu	a5,a3,a5
    65e4:	00b787b3          	add	a5,a5,a1
    65e8:	00d92023          	sw	a3,0(s2)
    65ec:	00f92223          	sw	a5,4(s2)
	announce_remaining = 0;
    65f0:	0009a023          	sw	zero,0(s3)

	z_clock_set_timeout(next_timeout(), false);
    65f4:	84dff0ef          	jal	ra,5e40 <next_timeout>
    65f8:	00000593          	li	a1,0
    65fc:	b64fc0ef          	jal	ra,2960 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6600:	74c48513          	addi	a0,s1,1868
    6604:	f68ff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    6608:	04051063          	bnez	a0,6648 <z_clock_announce+0x184>
    660c:	00007937          	lui	s2,0x7
    6610:	000075b7          	lui	a1,0x7
    6614:	00007537          	lui	a0,0x7
    6618:	08400693          	li	a3,132
    661c:	11c90613          	addi	a2,s2,284 # 711c <led0_dev_cfg+0x20>
    6620:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    6624:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6628:	ee9fa0ef          	jal	ra,1510 <printk>
    662c:	00007537          	lui	a0,0x7
    6630:	74c48593          	addi	a1,s1,1868
    6634:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    6638:	ed9fa0ef          	jal	ra,1510 <printk>
    663c:	08400593          	li	a1,132
    6640:	11c90513          	addi	a0,s2,284
    6644:	dc5fb0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6648:	30042473          	csrrs	s0,mstatus,s0

	k_spin_unlock(&timeout_lock, key);
}
    664c:	02c12083          	lw	ra,44(sp)
    6650:	02812403          	lw	s0,40(sp)
    6654:	02412483          	lw	s1,36(sp)
    6658:	02012903          	lw	s2,32(sp)
    665c:	01c12983          	lw	s3,28(sp)
    6660:	01812a03          	lw	s4,24(sp)
    6664:	01412a83          	lw	s5,20(sp)
    6668:	01012b03          	lw	s6,16(sp)
    666c:	00c12b83          	lw	s7,12(sp)
    6670:	00812c03          	lw	s8,8(sp)
    6674:	00412c83          	lw	s9,4(sp)
    6678:	00012d03          	lw	s10,0(sp)
    667c:	03010113          	addi	sp,sp,48
    6680:	00008067          	ret
		curr_tick += dt;
    6684:	00d706b3          	add	a3,a4,a3
		announce_remaining -= dt;
    6688:	40e787b3          	sub	a5,a5,a4
		curr_tick += dt;
    668c:	41f75593          	srai	a1,a4,0x1f
    6690:	00e6b633          	sltu	a2,a3,a4
    6694:	010585b3          	add	a1,a1,a6
		announce_remaining -= dt;
    6698:	00f9a023          	sw	a5,0(s3)
		t->dticks = 0;
    669c:	00000813          	li	a6,0
    66a0:	00000793          	li	a5,0
		curr_tick += dt;
    66a4:	00b605b3          	add	a1,a2,a1
		remove_timeout(t);
    66a8:	000d0513          	mv	a0,s10
		t->dticks = 0;
    66ac:	00fd2823          	sw	a5,16(s10)
    66b0:	010d2a23          	sw	a6,20(s10)
		curr_tick += dt;
    66b4:	00d92023          	sw	a3,0(s2)
    66b8:	00b92223          	sw	a1,4(s2)
		remove_timeout(t);
    66bc:	80dff0ef          	jal	ra,5ec8 <remove_timeout>
    66c0:	74c48513          	addi	a0,s1,1868
    66c4:	ea8ff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    66c8:	02051863          	bnez	a0,66f8 <z_clock_announce+0x234>
    66cc:	08400693          	li	a3,132
    66d0:	11ca8613          	addi	a2,s5,284 # 711c <led0_dev_cfg+0x20>
    66d4:	174b8593          	addi	a1,s7,372 # 7174 <led0_dev_cfg+0x78>
    66d8:	f80b0513          	addi	a0,s6,-128 # 6f80 <forks+0xc4>
    66dc:	e35fa0ef          	jal	ra,1510 <printk>
    66e0:	74c48593          	addi	a1,s1,1868
    66e4:	18cc0513          	addi	a0,s8,396 # 718c <led0_dev_cfg+0x90>
    66e8:	e29fa0ef          	jal	ra,1510 <printk>
    66ec:	08400593          	li	a1,132
    66f0:	11ca8513          	addi	a0,s5,284
    66f4:	d15fb0ef          	jal	ra,2408 <assert_post_action>
    66f8:	30042473          	csrrs	s0,mstatus,s0
		t->fn(t);
    66fc:	008d2783          	lw	a5,8(s10)
    6700:	000d0513          	mv	a0,s10
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6704:	00800413          	li	s0,8
    6708:	000780e7          	jalr	a5
    670c:	30043473          	csrrc	s0,mstatus,s0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6710:	74c48513          	addi	a0,s1,1868
	key = (mstatus & MSTATUS_IEN);
    6714:	00847413          	andi	s0,s0,8
    6718:	e2cff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    671c:	02051a63          	bnez	a0,6750 <z_clock_announce+0x28c>
    6720:	05c00693          	li	a3,92
    6724:	11ca8613          	addi	a2,s5,284
    6728:	144c8593          	addi	a1,s9,324 # 7144 <led0_dev_cfg+0x48>
    672c:	f80b0513          	addi	a0,s6,-128
    6730:	de1fa0ef          	jal	ra,1510 <printk>
    6734:	00007537          	lui	a0,0x7
    6738:	74c48593          	addi	a1,s1,1868
    673c:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    6740:	dd1fa0ef          	jal	ra,1510 <printk>
    6744:	05c00593          	li	a1,92
    6748:	11ca8513          	addi	a0,s5,284
    674c:	cbdfb0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    6750:	74c48513          	addi	a0,s1,1868
    6754:	e48ff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	return k;
    6758:	e39ff06f          	j	6590 <z_clock_announce+0xcc>

0000675c <z_tick_get>:

int64_t z_tick_get(void)
{
    675c:	fe010113          	addi	sp,sp,-32
    6760:	00112e23          	sw	ra,28(sp)
    6764:	00812c23          	sw	s0,24(sp)
    6768:	00912a23          	sw	s1,20(sp)
    676c:	01212823          	sw	s2,16(sp)
    6770:	01312623          	sw	s3,12(sp)
    6774:	01412423          	sw	s4,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6778:	00800793          	li	a5,8
    677c:	3007b7f3          	csrrc	a5,mstatus,a5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6780:	000074b7          	lui	s1,0x7
    6784:	74c48513          	addi	a0,s1,1868 # 774c <timeout_lock>
	key = (mstatus & MSTATUS_IEN);
    6788:	0087fa13          	andi	s4,a5,8
    678c:	db8ff0ef          	jal	ra,5d44 <z_spin_lock_valid>
    6790:	04051063          	bnez	a0,67d0 <z_tick_get+0x74>
    6794:	00007437          	lui	s0,0x7
    6798:	000075b7          	lui	a1,0x7
    679c:	00007537          	lui	a0,0x7
    67a0:	05c00693          	li	a3,92
    67a4:	11c40613          	addi	a2,s0,284 # 711c <led0_dev_cfg+0x20>
    67a8:	14458593          	addi	a1,a1,324 # 7144 <led0_dev_cfg+0x48>
    67ac:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    67b0:	d61fa0ef          	jal	ra,1510 <printk>
    67b4:	00007537          	lui	a0,0x7
    67b8:	74c48593          	addi	a1,s1,1868
    67bc:	15c50513          	addi	a0,a0,348 # 715c <led0_dev_cfg+0x60>
    67c0:	d51fa0ef          	jal	ra,1510 <printk>
    67c4:	05c00593          	li	a1,92
    67c8:	11c40513          	addi	a0,s0,284
    67cc:	c3dfb0ef          	jal	ra,2408 <assert_post_action>
	z_spin_lock_set_owner(l);
    67d0:	74c48513          	addi	a0,s1,1868
    67d4:	dc8ff0ef          	jal	ra,5d9c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    67d8:	98cfc0ef          	jal	ra,2964 <z_clock_elapsed>
    67dc:	000077b7          	lui	a5,0x7
    67e0:	71878793          	addi	a5,a5,1816 # 7718 <curr_tick>
    67e4:	0007a903          	lw	s2,0(a5)
    67e8:	0047a403          	lw	s0,4(a5)
    67ec:	01250933          	add	s2,a0,s2
    67f0:	00a93533          	sltu	a0,s2,a0
    67f4:	00850433          	add	s0,a0,s0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67f8:	74c48513          	addi	a0,s1,1868
    67fc:	d70ff0ef          	jal	ra,5d6c <z_spin_unlock_valid>
    6800:	04051063          	bnez	a0,6840 <z_tick_get+0xe4>
    6804:	000079b7          	lui	s3,0x7
    6808:	000075b7          	lui	a1,0x7
    680c:	00007537          	lui	a0,0x7
    6810:	08400693          	li	a3,132
    6814:	11c98613          	addi	a2,s3,284 # 711c <led0_dev_cfg+0x20>
    6818:	17458593          	addi	a1,a1,372 # 7174 <led0_dev_cfg+0x78>
    681c:	f8050513          	addi	a0,a0,-128 # 6f80 <forks+0xc4>
    6820:	cf1fa0ef          	jal	ra,1510 <printk>
    6824:	00007537          	lui	a0,0x7
    6828:	74c48593          	addi	a1,s1,1868
    682c:	18c50513          	addi	a0,a0,396 # 718c <led0_dev_cfg+0x90>
    6830:	ce1fa0ef          	jal	ra,1510 <printk>
    6834:	08400593          	li	a1,132
    6838:	11c98513          	addi	a0,s3,284
    683c:	bcdfb0ef          	jal	ra,2408 <assert_post_action>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6840:	300a27f3          	csrrs	a5,mstatus,s4
	}
	return t;
}
    6844:	01c12083          	lw	ra,28(sp)
    6848:	00040593          	mv	a1,s0
    684c:	01812403          	lw	s0,24(sp)
    6850:	01412483          	lw	s1,20(sp)
    6854:	00c12983          	lw	s3,12(sp)
    6858:	00812a03          	lw	s4,8(sp)
    685c:	00090513          	mv	a0,s2
    6860:	01012903          	lw	s2,16(sp)
    6864:	02010113          	addi	sp,sp,32
    6868:	00008067          	ret

0000686c <z_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
#else
	return (uint32_t)curr_tick;
#endif
}
    686c:	000077b7          	lui	a5,0x7
    6870:	7187a503          	lw	a0,1816(a5) # 7718 <curr_tick>
    6874:	00008067          	ret

00006878 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
    6878:	ee5ff06f          	j	675c <z_tick_get>

0000687c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    687c:	ff010113          	addi	sp,sp,-16
    6880:	00812423          	sw	s0,8(sp)
    6884:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6888:	00800413          	li	s0,8
    688c:	300437f3          	csrrc	a5,mstatus,s0
	int32_t ticks = z_get_next_timeout_expiry();
    6890:	a3dff0ef          	jal	ra,62cc <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    6894:	00a04463          	bgtz	a0,689c <idle+0x20>
    6898:	00100513          	li	a0,1
    689c:	00100593          	li	a1,1
    68a0:	b19ff0ef          	jal	ra,63b8 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    68a4:	8c8fc0ef          	jal	ra,296c <arch_cpu_idle>
    68a8:	fe5ff06f          	j	688c <idle+0x10>

000068ac <k_heap_init>:
    68ac:	00c50713          	addi	a4,a0,12
	list->head = (sys_dnode_t *)list;
    68b0:	00e52623          	sw	a4,12(a0)
	list->tail = (sys_dnode_t *)list;
    68b4:	00e52823          	sw	a4,16(a0)
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    68b8:	935fb06f          	j	21ec <sys_heap_init>

000068bc <statics_init>:
}

static int statics_init(const struct device *unused)
{
    68bc:	fe010113          	addi	sp,sp,-32
    68c0:	00812c23          	sw	s0,24(sp)
    68c4:	00912a23          	sw	s1,20(sp)
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    68c8:	00007437          	lui	s0,0x7
    68cc:	000074b7          	lui	s1,0x7
{
    68d0:	01212823          	sw	s2,16(sp)
    68d4:	01312623          	sw	s3,12(sp)
    68d8:	01412423          	sw	s4,8(sp)
    68dc:	01512223          	sw	s5,4(sp)
    68e0:	00112e23          	sw	ra,28(sp)
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    68e4:	70c40413          	addi	s0,s0,1804 # 770c <__data_ram_end>
    68e8:	70c48493          	addi	s1,s1,1804 # 770c <__data_ram_end>
    68ec:	00007937          	lui	s2,0x7
    68f0:	000079b7          	lui	s3,0x7
    68f4:	00007a37          	lui	s4,0x7
    68f8:	00007ab7          	lui	s5,0x7
    68fc:	0284f663          	bgeu	s1,s0,6928 <statics_init+0x6c>
    6900:	69498593          	addi	a1,s3,1684 # 7694 <levels.0+0x47c>
    6904:	01500693          	li	a3,21
    6908:	67090613          	addi	a2,s2,1648 # 7670 <levels.0+0x458>
    690c:	f80a0513          	addi	a0,s4,-128 # 6f80 <forks+0xc4>
    6910:	c01fa0ef          	jal	ra,1510 <printk>
    6914:	60ca8513          	addi	a0,s5,1548 # 760c <levels.0+0x3f4>
    6918:	bf9fa0ef          	jal	ra,1510 <printk>
    691c:	01500593          	li	a1,21
    6920:	67090513          	addi	a0,s2,1648
    6924:	ae5fb0ef          	jal	ra,2408 <assert_post_action>
    6928:	02946663          	bltu	s0,s1,6954 <statics_init+0x98>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    692c:	01c12083          	lw	ra,28(sp)
    6930:	01812403          	lw	s0,24(sp)
    6934:	01412483          	lw	s1,20(sp)
    6938:	01012903          	lw	s2,16(sp)
    693c:	00c12983          	lw	s3,12(sp)
    6940:	00812a03          	lw	s4,8(sp)
    6944:	00412a83          	lw	s5,4(sp)
    6948:	00000513          	li	a0,0
    694c:	02010113          	addi	sp,sp,32
    6950:	00008067          	ret
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    6954:	00842603          	lw	a2,8(s0)
    6958:	00442583          	lw	a1,4(s0)
    695c:	00040513          	mv	a0,s0
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    6960:	01840413          	addi	s0,s0,24
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    6964:	f49ff0ef          	jal	ra,68ac <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    6968:	f95ff06f          	j	68fc <statics_init+0x40>
