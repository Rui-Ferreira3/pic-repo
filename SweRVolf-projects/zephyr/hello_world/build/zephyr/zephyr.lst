
zephyr.elf:     file format elf32-littleriscv


Disassembly of section vector:

00000000 <__start>:

	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
   0:	00000297          	auipc	t0,0x0
   4:	02428293          	addi	t0,t0,36 # 24 <__irq_wrapper>
	csrw mtvec, t0
   8:	30529073          	csrw	mtvec,t0
	/*
	* To avoid having to hardcode the main clock frequency,
	* we read the actual value from register 0x8000103c
	* and store to z_clock_hw_cycles_per_sec
	*/
	li	t0, 0x80001000
   c:	800012b7          	lui	t0,0x80001
	lw	t1, 0x3c(t0)
  10:	03c2a303          	lw	t1,60(t0) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>
	la	t0, z_clock_hw_cycles_per_sec
  14:	00003297          	auipc	t0,0x3
  18:	6b428293          	addi	t0,t0,1716 # 36c8 <z_clock_hw_cycles_per_sec>
	sw	t1, 0(t0)
  1c:	0062a023          	sw	t1,0(t0)

	/* Jump to __initialize */
	tail __initialize
  20:	2450106f          	j	1a64 <__initialize>

Disassembly of section exceptions:

00000024 <__irq_wrapper>:
 * In this architecture, system call (ECALL) is used to perform context
 * switching or IRQ offloading (when enabled).
 */
SECTION_FUNC(exception.entry, __irq_wrapper)
	/* Allocate space on thread stack to save registers */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
  24:	fb010113          	addi	sp,sp,-80

	/* Save caller-saved registers on current thread stack. */
	RV_OP_STOREREG ra, __z_arch_esf_t_ra_OFFSET(sp)
  28:	00112023          	sw	ra,0(sp)
	RV_OP_STOREREG gp, __z_arch_esf_t_gp_OFFSET(sp)
  2c:	00312223          	sw	gp,4(sp)
	RV_OP_STOREREG tp, __z_arch_esf_t_tp_OFFSET(sp)
  30:	00412423          	sw	tp,8(sp)
	RV_OP_STOREREG t0, __z_arch_esf_t_t0_OFFSET(sp)
  34:	00512623          	sw	t0,12(sp)
	RV_OP_STOREREG t1, __z_arch_esf_t_t1_OFFSET(sp)
  38:	00612823          	sw	t1,16(sp)
	RV_OP_STOREREG t2, __z_arch_esf_t_t2_OFFSET(sp)
  3c:	00712a23          	sw	t2,20(sp)
	RV_OP_STOREREG t3, __z_arch_esf_t_t3_OFFSET(sp)
  40:	01c12c23          	sw	t3,24(sp)
	RV_OP_STOREREG t4, __z_arch_esf_t_t4_OFFSET(sp)
  44:	01d12e23          	sw	t4,28(sp)
	RV_OP_STOREREG t5, __z_arch_esf_t_t5_OFFSET(sp)
  48:	03e12023          	sw	t5,32(sp)
	RV_OP_STOREREG t6, __z_arch_esf_t_t6_OFFSET(sp)
  4c:	03f12223          	sw	t6,36(sp)
	RV_OP_STOREREG a0, __z_arch_esf_t_a0_OFFSET(sp)
  50:	02a12423          	sw	a0,40(sp)
	RV_OP_STOREREG a1, __z_arch_esf_t_a1_OFFSET(sp)
  54:	02b12623          	sw	a1,44(sp)
	RV_OP_STOREREG a2, __z_arch_esf_t_a2_OFFSET(sp)
  58:	02c12823          	sw	a2,48(sp)
	RV_OP_STOREREG a3, __z_arch_esf_t_a3_OFFSET(sp)
  5c:	02d12a23          	sw	a3,52(sp)
	RV_OP_STOREREG a4, __z_arch_esf_t_a4_OFFSET(sp)
  60:	02e12c23          	sw	a4,56(sp)
	RV_OP_STOREREG a5, __z_arch_esf_t_a5_OFFSET(sp)
  64:	02f12e23          	sw	a5,60(sp)
	RV_OP_STOREREG a6, __z_arch_esf_t_a6_OFFSET(sp)
  68:	05012023          	sw	a6,64(sp)
	RV_OP_STOREREG a7, __z_arch_esf_t_a7_OFFSET(sp)
  6c:	05112223          	sw	a7,68(sp)

skip_store_fp_caller_saved:
#endif

	/* Save MEPC register */
	csrr t0, mepc
  70:	341022f3          	csrr	t0,mepc
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  74:	04512423          	sw	t0,72(sp)

	/* Save SOC-specific MSTATUS register */
	csrr t0, mstatus
  78:	300022f3          	csrr	t0,mstatus
	RV_OP_STOREREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
  7c:	04512623          	sw	t0,76(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
  80:	1bc000ef          	jal	ra,23c <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	addi t1, x0, 0
  84:	00000313          	li	t1,0
	bnez a0, is_interrupt
  88:	02051e63          	bnez	a0,c4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
  8c:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
  90:	800003b7          	lui	t2,0x80000
  94:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
  98:	0072f2b3          	and	t0,t0,t2
	li t1, SOC_MCAUSE_ECALL_EXP
  9c:	00b00313          	li	t1,11

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call,
	 * otherwise handle fault
	 */
	beq t0, t1, is_syscall
  a0:	00628a63          	beq	t0,t1,b4 <is_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to no_reschedule
	 * to restore stack.
	 */
	addi a0, sp, 0
  a4:	00010513          	mv	a0,sp
	la ra, no_reschedule
  a8:	00000097          	auipc	ra,0x0
  ac:	12408093          	addi	ra,ra,292 # 1cc <no_reschedule>
	tail _Fault
  b0:	1710106f          	j	1a20 <_Fault>

000000b4 <is_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  b4:	04812283          	lw	t0,72(sp)
	addi t0, t0, 4
  b8:	00428293          	addi	t0,t0,4
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  bc:	04512423          	sw	t0,72(sp)
#endif

	/*
	 * Go to reschedule to handle context-switch
	 */
	j reschedule
  c0:	0800006f          	j	140 <reschedule>

000000c4 <is_interrupt>:
	 * Save current thread stack pointer and switch
	 * stack pointer to interrupt stack.
	 */

	/* Save thread stack pointer to temp register t0 */
	addi t0, sp, 0
  c4:	00010293          	mv	t0,sp

	/* Switch to interrupt stack */
	la t2, _kernel
  c8:	00003397          	auipc	t2,0x3
  cc:	78038393          	addi	t2,t2,1920 # 3848 <_kernel>
	RV_OP_LOADREG sp, _kernel_offset_to_irq_stack(t2)
  d0:	0043a103          	lw	sp,4(t2)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
  d4:	ff010113          	addi	sp,sp,-16
	RV_OP_STOREREG t0, 0x00(sp)
  d8:	00512023          	sw	t0,0(sp)

000000dc <on_irq_stack>:

on_irq_stack:
	/* Increment _kernel.cpus[0].nested variable */
	lw t3, _kernel_offset_to_nested(t2)
  dc:	0003ae03          	lw	t3,0(t2)
	addi t3, t3, 1
  e0:	001e0e13          	addi	t3,t3,1
	sw t3, _kernel_offset_to_nested(t2)
  e4:	01c3a023          	sw	t3,0(t2)
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
  e8:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
  ec:	800002b7          	lui	t0,0x80000
  f0:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
  f4:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
  f8:	134000ef          	jal	ra,22c <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
  fc:	00003297          	auipc	t0,0x3
 100:	12028293          	addi	t0,t0,288 # 321c <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
 104:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
 108:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	RV_OP_LOADREG a0, 0x00(t0)
 10c:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	RV_OP_LOADREG t1, RV_REGSIZE(t0)
 110:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1
 114:	000300e7          	jalr	t1

00000118 <on_thread_stack>:

on_thread_stack:
	/* Get reference to _kernel */
	la t1, _kernel
 118:	00003317          	auipc	t1,0x3
 11c:	73030313          	addi	t1,t1,1840 # 3848 <_kernel>

	/* Decrement _kernel.cpus[0].nested variable */
	lw t2, _kernel_offset_to_nested(t1)
 120:	00032383          	lw	t2,0(t1)
	addi t2, t2, -1
 124:	fff38393          	addi	t2,t2,-1
	sw t2, _kernel_offset_to_nested(t1)
 128:	00732023          	sw	t2,0(t1)

	/* Restore thread stack pointer */
	RV_OP_LOADREG t0, 0x00(sp)
 12c:	00012283          	lw	t0,0(sp)
	addi sp, t0, 0
 130:	00028113          	mv	sp,t0
	/*
	 * Check if we need to perform a reschedule
	 */

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t2, _kernel_offset_to_current(t1)
 134:	00832383          	lw	t2,8(t1)

	/*
	 * Check if next thread to schedule is current thread.
	 * If yes do not perform a reschedule
	 */
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t1)
 138:	02032e03          	lw	t3,32(t1)
	beq t3, t2, no_reschedule
 13c:	087e0863          	beq	t3,t2,1cc <no_reschedule>

00000140 <reschedule>:
reschedule:
#if CONFIG_TRACING
	call sys_trace_thread_switched_out
#endif
	/* Get reference to _kernel */
	la t0, _kernel
 140:	00003297          	auipc	t0,0x3
 144:	70828293          	addi	t0,t0,1800 # 3848 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 148:	0082a303          	lw	t1,8(t0)

	/*
	 * Save callee-saved registers of current thread
	 * prior to handle context-switching
	 */
	RV_OP_STOREREG s0, _thread_offset_to_s0(t1)
 14c:	02832e23          	sw	s0,60(t1)
	RV_OP_STOREREG s1, _thread_offset_to_s1(t1)
 150:	04932023          	sw	s1,64(t1)
	RV_OP_STOREREG s2, _thread_offset_to_s2(t1)
 154:	05232223          	sw	s2,68(t1)
	RV_OP_STOREREG s3, _thread_offset_to_s3(t1)
 158:	05332423          	sw	s3,72(t1)
	RV_OP_STOREREG s4, _thread_offset_to_s4(t1)
 15c:	05432623          	sw	s4,76(t1)
	RV_OP_STOREREG s5, _thread_offset_to_s5(t1)
 160:	05532823          	sw	s5,80(t1)
	RV_OP_STOREREG s6, _thread_offset_to_s6(t1)
 164:	05632a23          	sw	s6,84(t1)
	RV_OP_STOREREG s7, _thread_offset_to_s7(t1)
 168:	05732c23          	sw	s7,88(t1)
	RV_OP_STOREREG s8, _thread_offset_to_s8(t1)
 16c:	05832e23          	sw	s8,92(t1)
	RV_OP_STOREREG s9, _thread_offset_to_s9(t1)
 170:	07932023          	sw	s9,96(t1)
	RV_OP_STOREREG s10, _thread_offset_to_s10(t1)
 174:	07a32223          	sw	s10,100(t1)
	RV_OP_STOREREG s11, _thread_offset_to_s11(t1)
 178:	07b32423          	sw	s11,104(t1)

	/*
	 * Save stack pointer of current thread and set the default return value
	 * of z_swap to _k_neg_eagain for the thread.
	 */
	RV_OP_STOREREG sp, _thread_offset_to_sp(t1)
 17c:	02232c23          	sw	sp,56(t1)
	la t2, _k_neg_eagain
 180:	00003397          	auipc	t2,0x3
 184:	2a438393          	addi	t2,t2,676 # 3424 <_k_neg_eagain>
	lw t3, 0x00(t2)
 188:	0003ae03          	lw	t3,0(t2)
	sw t3, _thread_offset_to_swap_return_value(t1)
 18c:	07c32e23          	sw	t3,124(t1)

	/* Get next thread to schedule. */
	RV_OP_LOADREG t1, _kernel_offset_to_ready_q_cache(t0)
 190:	0202a303          	lw	t1,32(t0)

	/*
	 * Set _kernel.current to new thread loaded in t1
	 */
	RV_OP_STOREREG t1, _kernel_offset_to_current(t0)
 194:	0062a423          	sw	t1,8(t0)

	/* Switch to new thread stack */
	RV_OP_LOADREG sp, _thread_offset_to_sp(t1)
 198:	03832103          	lw	sp,56(t1)

	/* Restore callee-saved registers of new thread */
	RV_OP_LOADREG s0, _thread_offset_to_s0(t1)
 19c:	03c32403          	lw	s0,60(t1)
	RV_OP_LOADREG s1, _thread_offset_to_s1(t1)
 1a0:	04032483          	lw	s1,64(t1)
	RV_OP_LOADREG s2, _thread_offset_to_s2(t1)
 1a4:	04432903          	lw	s2,68(t1)
	RV_OP_LOADREG s3, _thread_offset_to_s3(t1)
 1a8:	04832983          	lw	s3,72(t1)
	RV_OP_LOADREG s4, _thread_offset_to_s4(t1)
 1ac:	04c32a03          	lw	s4,76(t1)
	RV_OP_LOADREG s5, _thread_offset_to_s5(t1)
 1b0:	05032a83          	lw	s5,80(t1)
	RV_OP_LOADREG s6, _thread_offset_to_s6(t1)
 1b4:	05432b03          	lw	s6,84(t1)
	RV_OP_LOADREG s7, _thread_offset_to_s7(t1)
 1b8:	05832b83          	lw	s7,88(t1)
	RV_OP_LOADREG s8, _thread_offset_to_s8(t1)
 1bc:	05c32c03          	lw	s8,92(t1)
	RV_OP_LOADREG s9, _thread_offset_to_s9(t1)
 1c0:	06032c83          	lw	s9,96(t1)
	RV_OP_LOADREG s10, _thread_offset_to_s10(t1)
 1c4:	06432d03          	lw	s10,100(t1)
	RV_OP_LOADREG s11, _thread_offset_to_s11(t1)
 1c8:	06832d83          	lw	s11,104(t1)

000001cc <no_reschedule>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 1cc:	04812283          	lw	t0,72(sp)
	csrw mepc, t0
 1d0:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 1d4:	04c12283          	lw	t0,76(sp)
	csrw mstatus, t0
 1d8:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved:
#endif

	/* Restore caller-saved registers from thread stack */
	RV_OP_LOADREG ra, __z_arch_esf_t_ra_OFFSET(sp)
 1dc:	00012083          	lw	ra,0(sp)
	RV_OP_LOADREG gp, __z_arch_esf_t_gp_OFFSET(sp)
 1e0:	00412183          	lw	gp,4(sp)
	RV_OP_LOADREG tp, __z_arch_esf_t_tp_OFFSET(sp)
 1e4:	00812203          	lw	tp,8(sp)
	RV_OP_LOADREG t0, __z_arch_esf_t_t0_OFFSET(sp)
 1e8:	00c12283          	lw	t0,12(sp)
	RV_OP_LOADREG t1, __z_arch_esf_t_t1_OFFSET(sp)
 1ec:	01012303          	lw	t1,16(sp)
	RV_OP_LOADREG t2, __z_arch_esf_t_t2_OFFSET(sp)
 1f0:	01412383          	lw	t2,20(sp)
	RV_OP_LOADREG t3, __z_arch_esf_t_t3_OFFSET(sp)
 1f4:	01812e03          	lw	t3,24(sp)
	RV_OP_LOADREG t4, __z_arch_esf_t_t4_OFFSET(sp)
 1f8:	01c12e83          	lw	t4,28(sp)
	RV_OP_LOADREG t5, __z_arch_esf_t_t5_OFFSET(sp)
 1fc:	02012f03          	lw	t5,32(sp)
	RV_OP_LOADREG t6, __z_arch_esf_t_t6_OFFSET(sp)
 200:	02412f83          	lw	t6,36(sp)
	RV_OP_LOADREG a0, __z_arch_esf_t_a0_OFFSET(sp)
 204:	02812503          	lw	a0,40(sp)
	RV_OP_LOADREG a1, __z_arch_esf_t_a1_OFFSET(sp)
 208:	02c12583          	lw	a1,44(sp)
	RV_OP_LOADREG a2, __z_arch_esf_t_a2_OFFSET(sp)
 20c:	03012603          	lw	a2,48(sp)
	RV_OP_LOADREG a3, __z_arch_esf_t_a3_OFFSET(sp)
 210:	03412683          	lw	a3,52(sp)
	RV_OP_LOADREG a4, __z_arch_esf_t_a4_OFFSET(sp)
 214:	03812703          	lw	a4,56(sp)
	RV_OP_LOADREG a5, __z_arch_esf_t_a5_OFFSET(sp)
 218:	03c12783          	lw	a5,60(sp)
	RV_OP_LOADREG a6, __z_arch_esf_t_a6_OFFSET(sp)
 21c:	04012803          	lw	a6,64(sp)
	RV_OP_LOADREG a7, __z_arch_esf_t_a7_OFFSET(sp)
 220:	04412883          	lw	a7,68(sp)

	/* Release stack space */
	addi sp, sp, __z_arch_esf_t_SIZEOF
 224:	05010113          	addi	sp,sp,80

	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 228:	30200073          	mret

0000022c <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
 22c:	00100313          	li	t1,1
	sll t0, t1, a0
 230:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
 234:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	jalr x0, ra
 238:	00008067          	ret

0000023c <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
 23c:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
 240:	80000337          	lui	t1,0x80000
	and t0, t0, t1
 244:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
 248:	00000513          	li	a0,0
	beqz t0, not_interrupt
 24c:	00028463          	beqz	t0,254 <not_interrupt>
	addi a0, a0, 1
 250:	00150513          	addi	a0,a0,1

00000254 <not_interrupt>:

not_interrupt:
	/* return */
	jalr x0, ra
 254:	00008067          	ret

00000258 <arch_swap>:
 * key is stored in a0 register
 */
SECTION_FUNC(exception.other, arch_swap)

	/* Make a system call to perform context switch */
	ecall
 258:	00000073          	ecall
	 * Prior to unlocking irq, load return value of
	 * arch_swap to temp register t2 (from
	 * _thread_offset_to_swap_return_value). Normally, it should be -EAGAIN,
	 * unless someone has previously called arch_thread_return_value_set(..).
	 */
	la t0, _kernel
 25c:	00003297          	auipc	t0,0x3
 260:	5ec28293          	addi	t0,t0,1516 # 3848 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 264:	0082a303          	lw	t1,8(t0)

	/* Load return value of arch_swap function in temp register t2 */
	lw t2, _thread_offset_to_swap_return_value(t1)
 268:	07c32383          	lw	t2,124(t1) # 8000007c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000007d>

	/*
	 * Unlock irq, following IRQ lock state in a0 register.
	 * Use atomic instruction csrrs to do so.
	 */
	andi a0, a0, MSTATUS_IEN
 26c:	00857513          	andi	a0,a0,8
	csrrs t0, mstatus, a0
 270:	300522f3          	csrrs	t0,mstatus,a0

	/* Set value of return register a0 to value of register t2 */
	addi a0, t2, 0
 274:	00038513          	mv	a0,t2

	/* Return */
	jalr x0, ra
 278:	00008067          	ret

Disassembly of section text:

0000027c <__clzsi2>:
     27c:	000107b7          	lui	a5,0x10
     280:	02f57463          	bgeu	a0,a5,2a8 <__clzsi2+0x2c>
     284:	0ff00793          	li	a5,255
     288:	02000713          	li	a4,32
     28c:	06a7e263          	bltu	a5,a0,2f0 <__clzsi2+0x74>
     290:	000037b7          	lui	a5,0x3
     294:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     298:	00a78533          	add	a0,a5,a0
     29c:	00054503          	lbu	a0,0(a0)
     2a0:	40a70533          	sub	a0,a4,a0
     2a4:	00008067          	ret
     2a8:	010007b7          	lui	a5,0x1000
     2ac:	02f57263          	bgeu	a0,a5,2d0 <__clzsi2+0x54>
     2b0:	000037b7          	lui	a5,0x3
     2b4:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     2b8:	01055513          	srli	a0,a0,0x10
     2bc:	00a78533          	add	a0,a5,a0
     2c0:	00054503          	lbu	a0,0(a0)
     2c4:	01000713          	li	a4,16
     2c8:	40a70533          	sub	a0,a4,a0
     2cc:	00008067          	ret
     2d0:	000037b7          	lui	a5,0x3
     2d4:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     2d8:	01855513          	srli	a0,a0,0x18
     2dc:	00a78533          	add	a0,a5,a0
     2e0:	00054503          	lbu	a0,0(a0)
     2e4:	00800713          	li	a4,8
     2e8:	40a70533          	sub	a0,a4,a0
     2ec:	00008067          	ret
     2f0:	000037b7          	lui	a5,0x3
     2f4:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     2f8:	00855513          	srli	a0,a0,0x8
     2fc:	00a78533          	add	a0,a5,a0
     300:	00054503          	lbu	a0,0(a0)
     304:	01800713          	li	a4,24
     308:	40a70533          	sub	a0,a4,a0
     30c:	00008067          	ret

00000310 <__udivdi3>:
     310:	00068e13          	mv	t3,a3
     314:	00060893          	mv	a7,a2
     318:	00050313          	mv	t1,a0
     31c:	00058813          	mv	a6,a1
     320:	0c069e63          	bnez	a3,3fc <__udivdi3+0xec>
     324:	12c5fa63          	bgeu	a1,a2,458 <CONFIG_MAIN_STACK_SIZE+0x58>
     328:	000107b7          	lui	a5,0x10
     32c:	20f66a63          	bltu	a2,a5,540 <CONFIG_MAIN_STACK_SIZE+0x140>
     330:	010007b7          	lui	a5,0x1000
     334:	42f66663          	bltu	a2,a5,760 <CONFIG_MAIN_STACK_SIZE+0x360>
     338:	01865713          	srli	a4,a2,0x18
     33c:	01800e13          	li	t3,24
     340:	000037b7          	lui	a5,0x3
     344:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     348:	00e787b3          	add	a5,a5,a4
     34c:	0007c783          	lbu	a5,0(a5)
     350:	02000713          	li	a4,32
     354:	01c78e33          	add	t3,a5,t3
     358:	41c707b3          	sub	a5,a4,t3
     35c:	01c70c63          	beq	a4,t3,374 <__udivdi3+0x64>
     360:	00f59833          	sll	a6,a1,a5
     364:	01c55e33          	srl	t3,a0,t3
     368:	00f618b3          	sll	a7,a2,a5
     36c:	010e6833          	or	a6,t3,a6
     370:	00f51333          	sll	t1,a0,a5
     374:	0108d593          	srli	a1,a7,0x10
     378:	02b85533          	divu	a0,a6,a1
     37c:	01089693          	slli	a3,a7,0x10
     380:	0106d693          	srli	a3,a3,0x10
     384:	01035793          	srli	a5,t1,0x10
     388:	02b87733          	remu	a4,a6,a1
     38c:	02a68633          	mul	a2,a3,a0
     390:	01071713          	slli	a4,a4,0x10
     394:	00f76833          	or	a6,a4,a5
     398:	00c87c63          	bgeu	a6,a2,3b0 <__udivdi3+0xa0>
     39c:	01180833          	add	a6,a6,a7
     3a0:	fff50793          	addi	a5,a0,-1
     3a4:	01186463          	bltu	a6,a7,3ac <__udivdi3+0x9c>
     3a8:	3ec86863          	bltu	a6,a2,798 <CONFIG_MAIN_STACK_SIZE+0x398>
     3ac:	00078513          	mv	a0,a5
     3b0:	40c80833          	sub	a6,a6,a2
     3b4:	02b85633          	divu	a2,a6,a1
     3b8:	01031313          	slli	t1,t1,0x10
     3bc:	01035313          	srli	t1,t1,0x10
     3c0:	02b87833          	remu	a6,a6,a1
     3c4:	02c686b3          	mul	a3,a3,a2
     3c8:	01081813          	slli	a6,a6,0x10
     3cc:	00686833          	or	a6,a6,t1
     3d0:	00d87e63          	bgeu	a6,a3,3ec <__udivdi3+0xdc>
     3d4:	01088833          	add	a6,a7,a6
     3d8:	fff60793          	addi	a5,a2,-1
     3dc:	01186663          	bltu	a6,a7,3e8 <__udivdi3+0xd8>
     3e0:	ffe60613          	addi	a2,a2,-2
     3e4:	00d86463          	bltu	a6,a3,3ec <__udivdi3+0xdc>
     3e8:	00078613          	mv	a2,a5
     3ec:	01051513          	slli	a0,a0,0x10
     3f0:	00c56533          	or	a0,a0,a2
     3f4:	00000593          	li	a1,0
     3f8:	00008067          	ret
     3fc:	00d5f863          	bgeu	a1,a3,40c <CONFIG_MAIN_STACK_SIZE+0xc>
     400:	00000593          	li	a1,0
     404:	00000513          	li	a0,0
     408:	00008067          	ret
     40c:	000107b7          	lui	a5,0x10
     410:	14f6e463          	bltu	a3,a5,558 <CONFIG_MAIN_STACK_SIZE+0x158>
     414:	010007b7          	lui	a5,0x1000
     418:	32f6e263          	bltu	a3,a5,73c <CONFIG_MAIN_STACK_SIZE+0x33c>
     41c:	0186d813          	srli	a6,a3,0x18
     420:	01800713          	li	a4,24
     424:	000037b7          	lui	a5,0x3
     428:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     42c:	010787b3          	add	a5,a5,a6
     430:	0007ce03          	lbu	t3,0(a5)
     434:	02000793          	li	a5,32
     438:	00ee0e33          	add	t3,t3,a4
     43c:	41c78eb3          	sub	t4,a5,t3
     440:	1dc79863          	bne	a5,t3,610 <CONFIG_MAIN_STACK_SIZE+0x210>
     444:	32b6e463          	bltu	a3,a1,76c <CONFIG_MAIN_STACK_SIZE+0x36c>
     448:	00c53633          	sltu	a2,a0,a2
     44c:	00164513          	xori	a0,a2,1
     450:	00000593          	li	a1,0
     454:	00008067          	ret
     458:	00061663          	bnez	a2,464 <CONFIG_MAIN_STACK_SIZE+0x64>
     45c:	00100793          	li	a5,1
     460:	02c7d8b3          	divu	a7,a5,a2
     464:	000107b7          	lui	a5,0x10
     468:	0cf8e063          	bltu	a7,a5,528 <CONFIG_MAIN_STACK_SIZE+0x128>
     46c:	010007b7          	lui	a5,0x1000
     470:	2ef8e263          	bltu	a7,a5,754 <CONFIG_MAIN_STACK_SIZE+0x354>
     474:	0188d713          	srli	a4,a7,0x18
     478:	01800e13          	li	t3,24
     47c:	000037b7          	lui	a5,0x3
     480:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     484:	00e787b3          	add	a5,a5,a4
     488:	0007c683          	lbu	a3,0(a5)
     48c:	02000793          	li	a5,32
     490:	01c68e33          	add	t3,a3,t3
     494:	41c782b3          	sub	t0,a5,t3
     498:	0dc79a63          	bne	a5,t3,56c <CONFIG_MAIN_STACK_SIZE+0x16c>
     49c:	01089f13          	slli	t5,a7,0x10
     4a0:	41158733          	sub	a4,a1,a7
     4a4:	0108df93          	srli	t6,a7,0x10
     4a8:	010f5f13          	srli	t5,t5,0x10
     4ac:	00100593          	li	a1,1
     4b0:	01035793          	srli	a5,t1,0x10
     4b4:	03f75533          	divu	a0,a4,t6
     4b8:	03f77733          	remu	a4,a4,t6
     4bc:	03e506b3          	mul	a3,a0,t5
     4c0:	01071713          	slli	a4,a4,0x10
     4c4:	00f767b3          	or	a5,a4,a5
     4c8:	00d7fc63          	bgeu	a5,a3,4e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
     4cc:	011787b3          	add	a5,a5,a7
     4d0:	fff50713          	addi	a4,a0,-1
     4d4:	0117e463          	bltu	a5,a7,4dc <CONFIG_MAIN_STACK_SIZE+0xdc>
     4d8:	2cd7e663          	bltu	a5,a3,7a4 <CONFIG_MAIN_STACK_SIZE+0x3a4>
     4dc:	00070513          	mv	a0,a4
     4e0:	40d787b3          	sub	a5,a5,a3
     4e4:	03f7d633          	divu	a2,a5,t6
     4e8:	01031313          	slli	t1,t1,0x10
     4ec:	01035313          	srli	t1,t1,0x10
     4f0:	03f7f7b3          	remu	a5,a5,t6
     4f4:	03e60f33          	mul	t5,a2,t5
     4f8:	01079793          	slli	a5,a5,0x10
     4fc:	0067e7b3          	or	a5,a5,t1
     500:	01e7fe63          	bgeu	a5,t5,51c <CONFIG_MAIN_STACK_SIZE+0x11c>
     504:	00f887b3          	add	a5,a7,a5
     508:	fff60713          	addi	a4,a2,-1
     50c:	0117e663          	bltu	a5,a7,518 <CONFIG_MAIN_STACK_SIZE+0x118>
     510:	ffe60613          	addi	a2,a2,-2
     514:	01e7e463          	bltu	a5,t5,51c <CONFIG_MAIN_STACK_SIZE+0x11c>
     518:	00070613          	mv	a2,a4
     51c:	01051513          	slli	a0,a0,0x10
     520:	00c56533          	or	a0,a0,a2
     524:	00008067          	ret
     528:	0ff00793          	li	a5,255
     52c:	00088713          	mv	a4,a7
     530:	f517f6e3          	bgeu	a5,a7,47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     534:	0088d713          	srli	a4,a7,0x8
     538:	00800e13          	li	t3,8
     53c:	f41ff06f          	j	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     540:	0ff00793          	li	a5,255
     544:	00060713          	mv	a4,a2
     548:	dec7fce3          	bgeu	a5,a2,340 <__udivdi3+0x30>
     54c:	00865713          	srli	a4,a2,0x8
     550:	00800e13          	li	t3,8
     554:	dedff06f          	j	340 <__udivdi3+0x30>
     558:	0ff00793          	li	a5,255
     55c:	1ed7f663          	bgeu	a5,a3,748 <CONFIG_MAIN_STACK_SIZE+0x348>
     560:	0086d813          	srli	a6,a3,0x8
     564:	00800713          	li	a4,8
     568:	ebdff06f          	j	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     56c:	005898b3          	sll	a7,a7,t0
     570:	01c5d633          	srl	a2,a1,t3
     574:	0108df93          	srli	t6,a7,0x10
     578:	03f65eb3          	divu	t4,a2,t6
     57c:	01089f13          	slli	t5,a7,0x10
     580:	010f5f13          	srli	t5,t5,0x10
     584:	00559733          	sll	a4,a1,t0
     588:	01c55e33          	srl	t3,a0,t3
     58c:	00ee6733          	or	a4,t3,a4
     590:	01075593          	srli	a1,a4,0x10
     594:	00551333          	sll	t1,a0,t0
     598:	03f676b3          	remu	a3,a2,t6
     59c:	03df07b3          	mul	a5,t5,t4
     5a0:	01069693          	slli	a3,a3,0x10
     5a4:	00b6e6b3          	or	a3,a3,a1
     5a8:	00f6fe63          	bgeu	a3,a5,5c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
     5ac:	011686b3          	add	a3,a3,a7
     5b0:	fffe8613          	addi	a2,t4,-1
     5b4:	1d16ee63          	bltu	a3,a7,790 <CONFIG_MAIN_STACK_SIZE+0x390>
     5b8:	1cf6fc63          	bgeu	a3,a5,790 <CONFIG_MAIN_STACK_SIZE+0x390>
     5bc:	ffee8e93          	addi	t4,t4,-2
     5c0:	011686b3          	add	a3,a3,a7
     5c4:	40f686b3          	sub	a3,a3,a5
     5c8:	03f6d7b3          	divu	a5,a3,t6
     5cc:	01071e13          	slli	t3,a4,0x10
     5d0:	010e5e13          	srli	t3,t3,0x10
     5d4:	03f6f6b3          	remu	a3,a3,t6
     5d8:	02ff0633          	mul	a2,t5,a5
     5dc:	01069713          	slli	a4,a3,0x10
     5e0:	01c76733          	or	a4,a4,t3
     5e4:	00c77e63          	bgeu	a4,a2,600 <CONFIG_MAIN_STACK_SIZE+0x200>
     5e8:	01170733          	add	a4,a4,a7
     5ec:	fff78693          	addi	a3,a5,-1
     5f0:	19176863          	bltu	a4,a7,780 <CONFIG_MAIN_STACK_SIZE+0x380>
     5f4:	18c77663          	bgeu	a4,a2,780 <CONFIG_MAIN_STACK_SIZE+0x380>
     5f8:	ffe78793          	addi	a5,a5,-2
     5fc:	01170733          	add	a4,a4,a7
     600:	010e9593          	slli	a1,t4,0x10
     604:	40c70733          	sub	a4,a4,a2
     608:	00f5e5b3          	or	a1,a1,a5
     60c:	ea5ff06f          	j	4b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
     610:	01c657b3          	srl	a5,a2,t3
     614:	01d696b3          	sll	a3,a3,t4
     618:	00d7e6b3          	or	a3,a5,a3
     61c:	01c5d333          	srl	t1,a1,t3
     620:	0106df13          	srli	t5,a3,0x10
     624:	03e358b3          	divu	a7,t1,t5
     628:	01069713          	slli	a4,a3,0x10
     62c:	01075713          	srli	a4,a4,0x10
     630:	01d59833          	sll	a6,a1,t4
     634:	01c55e33          	srl	t3,a0,t3
     638:	010e6833          	or	a6,t3,a6
     63c:	01085793          	srli	a5,a6,0x10
     640:	01d61633          	sll	a2,a2,t4
     644:	03e37333          	remu	t1,t1,t5
     648:	031705b3          	mul	a1,a4,a7
     64c:	01031313          	slli	t1,t1,0x10
     650:	00f367b3          	or	a5,t1,a5
     654:	00b7fe63          	bgeu	a5,a1,670 <CONFIG_MAIN_STACK_SIZE+0x270>
     658:	00d787b3          	add	a5,a5,a3
     65c:	fff88313          	addi	t1,a7,-1
     660:	12d7e463          	bltu	a5,a3,788 <CONFIG_MAIN_STACK_SIZE+0x388>
     664:	12b7f263          	bgeu	a5,a1,788 <CONFIG_MAIN_STACK_SIZE+0x388>
     668:	ffe88893          	addi	a7,a7,-2
     66c:	00d787b3          	add	a5,a5,a3
     670:	40b787b3          	sub	a5,a5,a1
     674:	03e7d333          	divu	t1,a5,t5
     678:	01081813          	slli	a6,a6,0x10
     67c:	01085813          	srli	a6,a6,0x10
     680:	03e7f7b3          	remu	a5,a5,t5
     684:	026705b3          	mul	a1,a4,t1
     688:	01079793          	slli	a5,a5,0x10
     68c:	0107e833          	or	a6,a5,a6
     690:	00b87e63          	bgeu	a6,a1,6ac <CONFIG_MAIN_STACK_SIZE+0x2ac>
     694:	00d80833          	add	a6,a6,a3
     698:	fff30793          	addi	a5,t1,-1
     69c:	0cd86e63          	bltu	a6,a3,778 <CONFIG_MAIN_STACK_SIZE+0x378>
     6a0:	0cb87c63          	bgeu	a6,a1,778 <CONFIG_MAIN_STACK_SIZE+0x378>
     6a4:	ffe30313          	addi	t1,t1,-2
     6a8:	00d80833          	add	a6,a6,a3
     6ac:	01089893          	slli	a7,a7,0x10
     6b0:	00010f37          	lui	t5,0x10
     6b4:	0068e8b3          	or	a7,a7,t1
     6b8:	ffff0793          	addi	a5,t5,-1 # ffff <_end+0xb97f>
     6bc:	00f8f733          	and	a4,a7,a5
     6c0:	0108d313          	srli	t1,a7,0x10
     6c4:	00f677b3          	and	a5,a2,a5
     6c8:	01065613          	srli	a2,a2,0x10
     6cc:	02f70e33          	mul	t3,a4,a5
     6d0:	40b80833          	sub	a6,a6,a1
     6d4:	02c70733          	mul	a4,a4,a2
     6d8:	010e5693          	srli	a3,t3,0x10
     6dc:	02f307b3          	mul	a5,t1,a5
     6e0:	00f70733          	add	a4,a4,a5
     6e4:	00e68733          	add	a4,a3,a4
     6e8:	02c30633          	mul	a2,t1,a2
     6ec:	00f77463          	bgeu	a4,a5,6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
     6f0:	01e60633          	add	a2,a2,t5
     6f4:	01075313          	srli	t1,a4,0x10
     6f8:	00c30633          	add	a2,t1,a2
     6fc:	02c86a63          	bltu	a6,a2,730 <CONFIG_MAIN_STACK_SIZE+0x330>
     700:	00c80863          	beq	a6,a2,710 <CONFIG_MAIN_STACK_SIZE+0x310>
     704:	00088513          	mv	a0,a7
     708:	00000593          	li	a1,0
     70c:	00008067          	ret
     710:	000106b7          	lui	a3,0x10
     714:	fff68693          	addi	a3,a3,-1 # ffff <_end+0xb97f>
     718:	00d77733          	and	a4,a4,a3
     71c:	01071793          	slli	a5,a4,0x10
     720:	00de7e33          	and	t3,t3,a3
     724:	01d51533          	sll	a0,a0,t4
     728:	01c787b3          	add	a5,a5,t3
     72c:	fcf57ce3          	bgeu	a0,a5,704 <CONFIG_MAIN_STACK_SIZE+0x304>
     730:	fff88513          	addi	a0,a7,-1
     734:	00000593          	li	a1,0
     738:	00008067          	ret
     73c:	0106d813          	srli	a6,a3,0x10
     740:	01000713          	li	a4,16
     744:	ce1ff06f          	j	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     748:	00068813          	mv	a6,a3
     74c:	00000713          	li	a4,0
     750:	cd5ff06f          	j	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     754:	0108d713          	srli	a4,a7,0x10
     758:	01000e13          	li	t3,16
     75c:	d21ff06f          	j	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     760:	01065713          	srli	a4,a2,0x10
     764:	01000e13          	li	t3,16
     768:	bd9ff06f          	j	340 <__udivdi3+0x30>
     76c:	00000593          	li	a1,0
     770:	00100513          	li	a0,1
     774:	00008067          	ret
     778:	00078313          	mv	t1,a5
     77c:	f31ff06f          	j	6ac <CONFIG_MAIN_STACK_SIZE+0x2ac>
     780:	00068793          	mv	a5,a3
     784:	e7dff06f          	j	600 <CONFIG_MAIN_STACK_SIZE+0x200>
     788:	00030893          	mv	a7,t1
     78c:	ee5ff06f          	j	670 <CONFIG_MAIN_STACK_SIZE+0x270>
     790:	00060e93          	mv	t4,a2
     794:	e31ff06f          	j	5c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
     798:	ffe50513          	addi	a0,a0,-2
     79c:	01180833          	add	a6,a6,a7
     7a0:	c11ff06f          	j	3b0 <__udivdi3+0xa0>
     7a4:	ffe50513          	addi	a0,a0,-2
     7a8:	011787b3          	add	a5,a5,a7
     7ac:	d35ff06f          	j	4e0 <CONFIG_MAIN_STACK_SIZE+0xe0>

000007b0 <__umoddi3>:
     7b0:	00068793          	mv	a5,a3
     7b4:	00060813          	mv	a6,a2
     7b8:	00050893          	mv	a7,a0
     7bc:	00058713          	mv	a4,a1
     7c0:	00058e13          	mv	t3,a1
     7c4:	0c069063          	bnez	a3,884 <CONFIG_ISR_STACK_SIZE+0x84>
     7c8:	12c5f063          	bgeu	a1,a2,8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     7cc:	00010737          	lui	a4,0x10
     7d0:	1ee66863          	bltu	a2,a4,9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     7d4:	010007b7          	lui	a5,0x1000
     7d8:	40f66463          	bltu	a2,a5,be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     7dc:	01865693          	srli	a3,a2,0x18
     7e0:	01800793          	li	a5,24
     7e4:	00003737          	lui	a4,0x3
     7e8:	42870713          	addi	a4,a4,1064 # 3428 <__clz_tab>
     7ec:	00d70733          	add	a4,a4,a3
     7f0:	00074703          	lbu	a4,0(a4)
     7f4:	02000693          	li	a3,32
     7f8:	00f707b3          	add	a5,a4,a5
     7fc:	40f68333          	sub	t1,a3,a5
     800:	00f68c63          	beq	a3,a5,818 <CONFIG_ISR_STACK_SIZE+0x18>
     804:	006595b3          	sll	a1,a1,t1
     808:	00f557b3          	srl	a5,a0,a5
     80c:	00661833          	sll	a6,a2,t1
     810:	00b7ee33          	or	t3,a5,a1
     814:	006518b3          	sll	a7,a0,t1
     818:	01085613          	srli	a2,a6,0x10
     81c:	02ce57b3          	divu	a5,t3,a2
     820:	01081513          	slli	a0,a6,0x10
     824:	01055513          	srli	a0,a0,0x10
     828:	0108d693          	srli	a3,a7,0x10
     82c:	02ce7e33          	remu	t3,t3,a2
     830:	02f507b3          	mul	a5,a0,a5
     834:	010e1e13          	slli	t3,t3,0x10
     838:	00de6733          	or	a4,t3,a3
     83c:	00f77a63          	bgeu	a4,a5,850 <CONFIG_ISR_STACK_SIZE+0x50>
     840:	01070733          	add	a4,a4,a6
     844:	01076663          	bltu	a4,a6,850 <CONFIG_ISR_STACK_SIZE+0x50>
     848:	00f77463          	bgeu	a4,a5,850 <CONFIG_ISR_STACK_SIZE+0x50>
     84c:	01070733          	add	a4,a4,a6
     850:	40f70733          	sub	a4,a4,a5
     854:	02c756b3          	divu	a3,a4,a2
     858:	01089793          	slli	a5,a7,0x10
     85c:	0107d793          	srli	a5,a5,0x10
     860:	02c77733          	remu	a4,a4,a2
     864:	02d50533          	mul	a0,a0,a3
     868:	01071713          	slli	a4,a4,0x10
     86c:	00f767b3          	or	a5,a4,a5
     870:	10a7ec63          	bltu	a5,a0,988 <CONFIG_ISR_STACK_SIZE+0x188>
     874:	40a78533          	sub	a0,a5,a0
     878:	00655533          	srl	a0,a0,t1
     87c:	00000593          	li	a1,0
     880:	00008067          	ret
     884:	00050813          	mv	a6,a0
     888:	fed5ece3          	bltu	a1,a3,880 <CONFIG_ISR_STACK_SIZE+0x80>
     88c:	000107b7          	lui	a5,0x10
     890:	14f6e463          	bltu	a3,a5,9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
     894:	010007b7          	lui	a5,0x1000
     898:	32f6ee63          	bltu	a3,a5,bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     89c:	0186d313          	srli	t1,a3,0x18
     8a0:	01800893          	li	a7,24
     8a4:	000037b7          	lui	a5,0x3
     8a8:	42878793          	addi	a5,a5,1064 # 3428 <__clz_tab>
     8ac:	006787b3          	add	a5,a5,t1
     8b0:	0007ce03          	lbu	t3,0(a5)
     8b4:	02000793          	li	a5,32
     8b8:	011e0e33          	add	t3,t3,a7
     8bc:	41c78333          	sub	t1,a5,t3
     8c0:	1bc79c63          	bne	a5,t3,a78 <CONFIG_ISR_STACK_SIZE+0x278>
     8c4:	00b6e463          	bltu	a3,a1,8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     8c8:	00c56a63          	bltu	a0,a2,8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     8cc:	40c50833          	sub	a6,a0,a2
     8d0:	40d585b3          	sub	a1,a1,a3
     8d4:	01053733          	sltu	a4,a0,a6
     8d8:	40e58733          	sub	a4,a1,a4
     8dc:	00080513          	mv	a0,a6
     8e0:	00070593          	mv	a1,a4
     8e4:	00008067          	ret
     8e8:	00061663          	bnez	a2,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8ec:	00100713          	li	a4,1
     8f0:	02c75833          	divu	a6,a4,a2
     8f4:	00010737          	lui	a4,0x10
     8f8:	0ae86863          	bltu	a6,a4,9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
     8fc:	010007b7          	lui	a5,0x1000
     900:	2cf86463          	bltu	a6,a5,bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
     904:	01885693          	srli	a3,a6,0x18
     908:	01800793          	li	a5,24
     90c:	00003737          	lui	a4,0x3
     910:	42870713          	addi	a4,a4,1064 # 3428 <__clz_tab>
     914:	00d70733          	add	a4,a4,a3
     918:	00074703          	lbu	a4,0(a4)
     91c:	02000693          	li	a3,32
     920:	00f707b3          	add	a5,a4,a5
     924:	40f68333          	sub	t1,a3,a5
     928:	0cf69263          	bne	a3,a5,9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
     92c:	01081e13          	slli	t3,a6,0x10
     930:	410585b3          	sub	a1,a1,a6
     934:	01085613          	srli	a2,a6,0x10
     938:	010e5e13          	srli	t3,t3,0x10
     93c:	0108d713          	srli	a4,a7,0x10
     940:	02c5d6b3          	divu	a3,a1,a2
     944:	02c5f5b3          	remu	a1,a1,a2
     948:	03c686b3          	mul	a3,a3,t3
     94c:	01059593          	slli	a1,a1,0x10
     950:	00e5e733          	or	a4,a1,a4
     954:	00d77863          	bgeu	a4,a3,964 <CONFIG_ISR_STACK_SIZE+0x164>
     958:	01070733          	add	a4,a4,a6
     95c:	01076463          	bltu	a4,a6,964 <CONFIG_ISR_STACK_SIZE+0x164>
     960:	2ad76463          	bltu	a4,a3,c08 <CONFIG_ISR_STACK_SIZE+0x408>
     964:	40d70733          	sub	a4,a4,a3
     968:	02c75533          	divu	a0,a4,a2
     96c:	01089893          	slli	a7,a7,0x10
     970:	0108d893          	srli	a7,a7,0x10
     974:	02c77733          	remu	a4,a4,a2
     978:	03c50533          	mul	a0,a0,t3
     97c:	01071713          	slli	a4,a4,0x10
     980:	011767b3          	or	a5,a4,a7
     984:	00a7fa63          	bgeu	a5,a0,998 <CONFIG_ISR_STACK_SIZE+0x198>
     988:	010787b3          	add	a5,a5,a6
     98c:	0107e663          	bltu	a5,a6,998 <CONFIG_ISR_STACK_SIZE+0x198>
     990:	00a7f463          	bgeu	a5,a0,998 <CONFIG_ISR_STACK_SIZE+0x198>
     994:	010787b3          	add	a5,a5,a6
     998:	40a78533          	sub	a0,a5,a0
     99c:	00655533          	srl	a0,a0,t1
     9a0:	00000593          	li	a1,0
     9a4:	00008067          	ret
     9a8:	0ff00713          	li	a4,255
     9ac:	00080693          	mv	a3,a6
     9b0:	f5077ee3          	bgeu	a4,a6,90c <CONFIG_ISR_STACK_SIZE+0x10c>
     9b4:	00885693          	srli	a3,a6,0x8
     9b8:	00800793          	li	a5,8
     9bc:	f51ff06f          	j	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     9c0:	0ff00713          	li	a4,255
     9c4:	00060693          	mv	a3,a2
     9c8:	e0c77ee3          	bgeu	a4,a2,7e4 <__umoddi3+0x34>
     9cc:	00865693          	srli	a3,a2,0x8
     9d0:	00800793          	li	a5,8
     9d4:	e11ff06f          	j	7e4 <__umoddi3+0x34>
     9d8:	0ff00793          	li	a5,255
     9dc:	20d7f863          	bgeu	a5,a3,bec <CONFIG_ISR_STACK_SIZE+0x3ec>
     9e0:	0086d313          	srli	t1,a3,0x8
     9e4:	00800893          	li	a7,8
     9e8:	ebdff06f          	j	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     9ec:	00681833          	sll	a6,a6,t1
     9f0:	00f5d733          	srl	a4,a1,a5
     9f4:	01085613          	srli	a2,a6,0x10
     9f8:	02c756b3          	divu	a3,a4,a2
     9fc:	01081e13          	slli	t3,a6,0x10
     a00:	00f557b3          	srl	a5,a0,a5
     a04:	010e5e13          	srli	t3,t3,0x10
     a08:	006595b3          	sll	a1,a1,t1
     a0c:	00b7e5b3          	or	a1,a5,a1
     a10:	0105de93          	srli	t4,a1,0x10
     a14:	006518b3          	sll	a7,a0,t1
     a18:	02c77733          	remu	a4,a4,a2
     a1c:	02de07b3          	mul	a5,t3,a3
     a20:	01071693          	slli	a3,a4,0x10
     a24:	01d6e6b3          	or	a3,a3,t4
     a28:	00f6fa63          	bgeu	a3,a5,a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     a2c:	010686b3          	add	a3,a3,a6
     a30:	0106e663          	bltu	a3,a6,a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     a34:	00f6f463          	bgeu	a3,a5,a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     a38:	010686b3          	add	a3,a3,a6
     a3c:	40f686b3          	sub	a3,a3,a5
     a40:	02c6d733          	divu	a4,a3,a2
     a44:	01059793          	slli	a5,a1,0x10
     a48:	0107d793          	srli	a5,a5,0x10
     a4c:	02c6f6b3          	remu	a3,a3,a2
     a50:	02ee0733          	mul	a4,t3,a4
     a54:	01069593          	slli	a1,a3,0x10
     a58:	00f5e5b3          	or	a1,a1,a5
     a5c:	00e5fa63          	bgeu	a1,a4,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a60:	010585b3          	add	a1,a1,a6
     a64:	0105e663          	bltu	a1,a6,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a68:	00e5f463          	bgeu	a1,a4,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a6c:	010585b3          	add	a1,a1,a6
     a70:	40e585b3          	sub	a1,a1,a4
     a74:	ec9ff06f          	j	93c <CONFIG_ISR_STACK_SIZE+0x13c>
     a78:	01c657b3          	srl	a5,a2,t3
     a7c:	006696b3          	sll	a3,a3,t1
     a80:	00d7e6b3          	or	a3,a5,a3
     a84:	01c5d8b3          	srl	a7,a1,t3
     a88:	0106d713          	srli	a4,a3,0x10
     a8c:	02e8deb3          	divu	t4,a7,a4
     a90:	01069f13          	slli	t5,a3,0x10
     a94:	01c557b3          	srl	a5,a0,t3
     a98:	010f5f13          	srli	t5,t5,0x10
     a9c:	006595b3          	sll	a1,a1,t1
     aa0:	00b7e5b3          	or	a1,a5,a1
     aa4:	0105d813          	srli	a6,a1,0x10
     aa8:	00661633          	sll	a2,a2,t1
     aac:	00651533          	sll	a0,a0,t1
     ab0:	02e8f8b3          	remu	a7,a7,a4
     ab4:	03df07b3          	mul	a5,t5,t4
     ab8:	01089893          	slli	a7,a7,0x10
     abc:	0108e833          	or	a6,a7,a6
     ac0:	00f87e63          	bgeu	a6,a5,adc <CONFIG_ISR_STACK_SIZE+0x2dc>
     ac4:	00d80833          	add	a6,a6,a3
     ac8:	fffe8893          	addi	a7,t4,-1
     acc:	12d86a63          	bltu	a6,a3,c00 <CONFIG_ISR_STACK_SIZE+0x400>
     ad0:	12f87863          	bgeu	a6,a5,c00 <CONFIG_ISR_STACK_SIZE+0x400>
     ad4:	ffee8e93          	addi	t4,t4,-2
     ad8:	00d80833          	add	a6,a6,a3
     adc:	40f80833          	sub	a6,a6,a5
     ae0:	02e857b3          	divu	a5,a6,a4
     ae4:	01059593          	slli	a1,a1,0x10
     ae8:	0105d593          	srli	a1,a1,0x10
     aec:	02e87833          	remu	a6,a6,a4
     af0:	02ff0f33          	mul	t5,t5,a5
     af4:	01081713          	slli	a4,a6,0x10
     af8:	00b76733          	or	a4,a4,a1
     afc:	01e77e63          	bgeu	a4,t5,b18 <CONFIG_ISR_STACK_SIZE+0x318>
     b00:	00d70733          	add	a4,a4,a3
     b04:	fff78593          	addi	a1,a5,-1 # ffffff <_end+0xffb97f>
     b08:	0ed76863          	bltu	a4,a3,bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     b0c:	0fe77663          	bgeu	a4,t5,bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     b10:	ffe78793          	addi	a5,a5,-2
     b14:	00d70733          	add	a4,a4,a3
     b18:	010e9e93          	slli	t4,t4,0x10
     b1c:	000102b7          	lui	t0,0x10
     b20:	00feeeb3          	or	t4,t4,a5
     b24:	fff28813          	addi	a6,t0,-1 # ffff <_end+0xb97f>
     b28:	010ef8b3          	and	a7,t4,a6
     b2c:	01065593          	srli	a1,a2,0x10
     b30:	010ede93          	srli	t4,t4,0x10
     b34:	01067833          	and	a6,a2,a6
     b38:	03088fb3          	mul	t6,a7,a6
     b3c:	41e70733          	sub	a4,a4,t5
     b40:	030e8833          	mul	a6,t4,a6
     b44:	010fd793          	srli	a5,t6,0x10
     b48:	02b888b3          	mul	a7,a7,a1
     b4c:	010888b3          	add	a7,a7,a6
     b50:	011787b3          	add	a5,a5,a7
     b54:	02be8eb3          	mul	t4,t4,a1
     b58:	0107f463          	bgeu	a5,a6,b60 <CONFIG_ISR_STACK_SIZE+0x360>
     b5c:	005e8eb3          	add	t4,t4,t0
     b60:	00010837          	lui	a6,0x10
     b64:	fff80813          	addi	a6,a6,-1 # ffff <_end+0xb97f>
     b68:	0107d593          	srli	a1,a5,0x10
     b6c:	0107f7b3          	and	a5,a5,a6
     b70:	01079793          	slli	a5,a5,0x10
     b74:	010fffb3          	and	t6,t6,a6
     b78:	01d585b3          	add	a1,a1,t4
     b7c:	01f787b3          	add	a5,a5,t6
     b80:	02b76863          	bltu	a4,a1,bb0 <CONFIG_ISR_STACK_SIZE+0x3b0>
     b84:	02b70463          	beq	a4,a1,bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     b88:	40f507b3          	sub	a5,a0,a5
     b8c:	00f53533          	sltu	a0,a0,a5
     b90:	40b705b3          	sub	a1,a4,a1
     b94:	40a585b3          	sub	a1,a1,a0
     b98:	01c59e33          	sll	t3,a1,t3
     b9c:	0067d533          	srl	a0,a5,t1
     ba0:	00ae6533          	or	a0,t3,a0
     ba4:	0065d5b3          	srl	a1,a1,t1
     ba8:	00008067          	ret
     bac:	fcf57ee3          	bgeu	a0,a5,b88 <CONFIG_ISR_STACK_SIZE+0x388>
     bb0:	40c78633          	sub	a2,a5,a2
     bb4:	00c7b7b3          	sltu	a5,a5,a2
     bb8:	00d787b3          	add	a5,a5,a3
     bbc:	40f585b3          	sub	a1,a1,a5
     bc0:	00060793          	mv	a5,a2
     bc4:	fc5ff06f          	j	b88 <CONFIG_ISR_STACK_SIZE+0x388>
     bc8:	01085693          	srli	a3,a6,0x10
     bcc:	01000793          	li	a5,16
     bd0:	d3dff06f          	j	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     bd4:	0106d313          	srli	t1,a3,0x10
     bd8:	01000893          	li	a7,16
     bdc:	cc9ff06f          	j	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     be0:	01065693          	srli	a3,a2,0x10
     be4:	01000793          	li	a5,16
     be8:	bfdff06f          	j	7e4 <__umoddi3+0x34>
     bec:	00068313          	mv	t1,a3
     bf0:	00000893          	li	a7,0
     bf4:	cb1ff06f          	j	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     bf8:	00058793          	mv	a5,a1
     bfc:	f1dff06f          	j	b18 <CONFIG_ISR_STACK_SIZE+0x318>
     c00:	00088e93          	mv	t4,a7
     c04:	ed9ff06f          	j	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
     c08:	01070733          	add	a4,a4,a6
     c0c:	d59ff06f          	j	964 <CONFIG_ISR_STACK_SIZE+0x164>

00000c10 <_OffsetAbsSyms>:
 * point regs
 */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 STACK_ROUND_UP(sizeof(struct k_thread)));

GEN_ABS_SYM_END
     c10:	00008067          	ret

00000c14 <main>:
#include <zephyr.h>
#include <sys/printk.h>

void main(void)
{
	printk("Hello World! %s\n", CONFIG_BOARD);
     c14:	000035b7          	lui	a1,0x3
     c18:	00003537          	lui	a0,0x3
     c1c:	52858593          	addi	a1,a1,1320 # 3528 <__clz_tab+0x100>
     c20:	53850513          	addi	a0,a0,1336 # 3538 <__clz_tab+0x110>
     c24:	5640006f          	j	1188 <printk>

00000c28 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c28:	00000513          	li	a0,0
     c2c:	00008067          	ret

00000c30 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
     c30:	fa010113          	addi	sp,sp,-96
     c34:	03812c23          	sw	s8,56(sp)
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
     c38:	00003c37          	lui	s8,0x3
{
     c3c:	04812c23          	sw	s0,88(sp)
     c40:	04912a23          	sw	s1,84(sp)
     c44:	05212823          	sw	s2,80(sp)
     c48:	05312623          	sw	s3,76(sp)
     c4c:	05412423          	sw	s4,72(sp)
     c50:	05512223          	sw	s5,68(sp)
     c54:	05612023          	sw	s6,64(sp)
     c58:	03712e23          	sw	s7,60(sp)
     c5c:	03912a23          	sw	s9,52(sp)
     c60:	03a12823          	sw	s10,48(sp)
     c64:	04112e23          	sw	ra,92(sp)
     c68:	03b12623          	sw	s11,44(sp)
     c6c:	00050993          	mv	s3,a0
     c70:	00058a13          	mv	s4,a1
     c74:	00060b93          	mv	s7,a2
     c78:	00068493          	mv	s1,a3
     c7c:	00070d13          	mv	s10,a4
     c80:	00078b13          	mv	s6,a5
     c84:	00080a93          	mv	s5,a6
     c88:	00088913          	mv	s2,a7
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     c8c:	01400413          	li	s0,20
		buf[i] = "0123456789abcdef"[num % base];
     c90:	41f75c93          	srai	s9,a4,0x1f
     c94:	54cc0c13          	addi	s8,s8,1356 # 354c <__clz_tab+0x124>
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     c98:	009be7b3          	or	a5,s7,s1
     c9c:	08079863          	bnez	a5,d2c <print_digits+0xfc>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
     ca0:	01400793          	li	a5,20
     ca4:	0cf41a63          	bne	s0,a5,d78 <print_digits+0x148>
		buf[i] = '0';
     ca8:	03000793          	li	a5,48
     cac:	00f10e23          	sb	a5,28(sp)
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     cb0:	012408b3          	add	a7,s0,s2
     cb4:	01500793          	li	a5,21
     cb8:	00000493          	li	s1,0
     cbc:	00f88863          	beq	a7,a5,ccc <print_digits+0x9c>
     cc0:	feb88493          	addi	s1,a7,-21

	for (/**/; pad > 0 && pad_before; pad--) {
     cc4:	00905463          	blez	s1,ccc <print_digits+0x9c>
     cc8:	0a0b1c63          	bnez	s6,d80 <print_digits+0x150>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
     ccc:	01500913          	li	s2,21
		out(buf[i], ctx);
     cd0:	00810793          	addi	a5,sp,8
     cd4:	008787b3          	add	a5,a5,s0
     cd8:	0007c503          	lbu	a0,0(a5)
     cdc:	000a0593          	mv	a1,s4
	for (/**/; i < DIGITS_BUFLEN; i++) {
     ce0:	00140413          	addi	s0,s0,1
		out(buf[i], ctx);
     ce4:	000980e7          	jalr	s3
	for (/**/; i < DIGITS_BUFLEN; i++) {
     ce8:	ff2414e3          	bne	s0,s2,cd0 <print_digits+0xa0>
	}
	for (/**/; pad > 0; pad--) {
     cec:	0a904463          	bgtz	s1,d94 <print_digits+0x164>
		out(pad_char, ctx);
	}
}
     cf0:	05c12083          	lw	ra,92(sp)
     cf4:	05812403          	lw	s0,88(sp)
     cf8:	05412483          	lw	s1,84(sp)
     cfc:	05012903          	lw	s2,80(sp)
     d00:	04c12983          	lw	s3,76(sp)
     d04:	04812a03          	lw	s4,72(sp)
     d08:	04412a83          	lw	s5,68(sp)
     d0c:	04012b03          	lw	s6,64(sp)
     d10:	03c12b83          	lw	s7,60(sp)
     d14:	03812c03          	lw	s8,56(sp)
     d18:	03412c83          	lw	s9,52(sp)
     d1c:	03012d03          	lw	s10,48(sp)
     d20:	02c12d83          	lw	s11,44(sp)
     d24:	06010113          	addi	sp,sp,96
     d28:	00008067          	ret
		buf[i] = "0123456789abcdef"[num % base];
     d2c:	00810793          	addi	a5,sp,8
     d30:	000d0613          	mv	a2,s10
     d34:	000c8693          	mv	a3,s9
     d38:	000b8513          	mv	a0,s7
     d3c:	00048593          	mv	a1,s1
     d40:	00878db3          	add	s11,a5,s0
     d44:	a6dff0ef          	jal	ra,7b0 <__umoddi3>
     d48:	00ac0533          	add	a0,s8,a0
     d4c:	00054783          	lbu	a5,0(a0)
		num /= base;
     d50:	00048593          	mv	a1,s1
     d54:	000b8513          	mv	a0,s7
		buf[i] = "0123456789abcdef"[num % base];
     d58:	00fd8023          	sb	a5,0(s11)
		num /= base;
     d5c:	000d0613          	mv	a2,s10
     d60:	000c8693          	mv	a3,s9
     d64:	dacff0ef          	jal	ra,310 <__udivdi3>
     d68:	00058493          	mv	s1,a1
     d6c:	00050b93          	mv	s7,a0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     d70:	fff40413          	addi	s0,s0,-1
     d74:	f25ff06f          	j	c98 <print_digits+0x68>
		i++;
     d78:	00140413          	addi	s0,s0,1
     d7c:	f35ff06f          	j	cb0 <print_digits+0x80>
		out(pad_char, ctx);
     d80:	000a0593          	mv	a1,s4
     d84:	000a8513          	mv	a0,s5
     d88:	000980e7          	jalr	s3
	for (/**/; pad > 0 && pad_before; pad--) {
     d8c:	fff48493          	addi	s1,s1,-1
     d90:	f35ff06f          	j	cc4 <print_digits+0x94>
		out(pad_char, ctx);
     d94:	000a0593          	mv	a1,s4
     d98:	000a8513          	mv	a0,s5
     d9c:	000980e7          	jalr	s3
	for (/**/; pad > 0; pad--) {
     da0:	fff48493          	addi	s1,s1,-1
     da4:	f49ff06f          	j	cec <print_digits+0xbc>

00000da8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     da8:	0005a783          	lw	a5,0(a1)
     dac:	00178793          	addi	a5,a5,1
     db0:	00f5a023          	sw	a5,0(a1)
	return _char_out(c);
     db4:	000037b7          	lui	a5,0x3
     db8:	6b07a783          	lw	a5,1712(a5) # 36b0 <_char_out>
     dbc:	00078067          	jr	a5

00000dc0 <__printk_hook_install>:
	_char_out = fn;
     dc0:	000037b7          	lui	a5,0x3
     dc4:	6aa7a823          	sw	a0,1712(a5) # 36b0 <_char_out>
}
     dc8:	00008067          	ret

00000dcc <z_vprintk>:
{
     dcc:	fb010113          	addi	sp,sp,-80
     dd0:	03512a23          	sw	s5,52(sp)
     dd4:	00003ab7          	lui	s5,0x3
     dd8:	04812423          	sw	s0,72(sp)
     ddc:	04912223          	sw	s1,68(sp)
     de0:	05212023          	sw	s2,64(sp)
     de4:	03312e23          	sw	s3,60(sp)
     de8:	03412c23          	sw	s4,56(sp)
     dec:	03612823          	sw	s6,48(sp)
     df0:	03712623          	sw	s7,44(sp)
     df4:	03812423          	sw	s8,40(sp)
     df8:	03912223          	sw	s9,36(sp)
     dfc:	03a12023          	sw	s10,32(sp)
     e00:	01b12e23          	sw	s11,28(sp)
     e04:	04112623          	sw	ra,76(sp)
     e08:	00050413          	mv	s0,a0
     e0c:	00058d13          	mv	s10,a1
     e10:	00060a13          	mv	s4,a2
     e14:	00068d93          	mv	s11,a3
	char length_mod = 0;
     e18:	00000993          	li	s3,0
	int min_width = -1;
     e1c:	fff00913          	li	s2,-1
	enum pad_type padding = PAD_NONE;
     e20:	00000493          	li	s1,0
	int might_format = 0; /* 1 if encountered a '%' */
     e24:	00000c93          	li	s9,0
			switch (*fmt) {
     e28:	07a00b13          	li	s6,122
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     e2c:	00100b93          	li	s7,1
     e30:	03000c13          	li	s8,48
     e34:	560a8a93          	addi	s5,s5,1376 # 3560 <__clz_tab+0x138>
	while (*fmt) {
     e38:	000a4503          	lbu	a0,0(s4)
     e3c:	04051063          	bnez	a0,e7c <z_vprintk+0xb0>
}
     e40:	04c12083          	lw	ra,76(sp)
     e44:	04812403          	lw	s0,72(sp)
     e48:	04412483          	lw	s1,68(sp)
     e4c:	04012903          	lw	s2,64(sp)
     e50:	03c12983          	lw	s3,60(sp)
     e54:	03812a03          	lw	s4,56(sp)
     e58:	03412a83          	lw	s5,52(sp)
     e5c:	03012b03          	lw	s6,48(sp)
     e60:	02c12b83          	lw	s7,44(sp)
     e64:	02812c03          	lw	s8,40(sp)
     e68:	02412c83          	lw	s9,36(sp)
     e6c:	02012d03          	lw	s10,32(sp)
     e70:	01c12d83          	lw	s11,28(sp)
     e74:	05010113          	addi	sp,sp,80
     e78:	00008067          	ret
		if (!might_format) {
     e7c:	000c9e63          	bnez	s9,e98 <z_vprintk+0xcc>
			if (*fmt != '%') {
     e80:	02500793          	li	a5,37
     e84:	2af50463          	beq	a0,a5,112c <z_vprintk+0x360>
				out((int)*fmt, ctx);
     e88:	000d0593          	mv	a1,s10
     e8c:	000400e7          	jalr	s0
		++fmt;
     e90:	001a0a13          	addi	s4,s4,1
     e94:	fa5ff06f          	j	e38 <z_vprintk+0x6c>
			switch (*fmt) {
     e98:	02ab6263          	bltu	s6,a0,ebc <z_vprintk+0xf0>
     e9c:	06200793          	li	a5,98
     ea0:	02a7ea63          	bltu	a5,a0,ed4 <z_vprintk+0x108>
     ea4:	07850e63          	beq	a0,s8,f20 <z_vprintk+0x154>
     ea8:	04ac6663          	bltu	s8,a0,ef4 <z_vprintk+0x128>
     eac:	02500793          	li	a5,37
     eb0:	26f50663          	beq	a0,a5,111c <z_vprintk+0x350>
     eb4:	02d00793          	li	a5,45
     eb8:	28f50463          	beq	a0,a5,1140 <z_vprintk+0x374>
				out((int)'%', ctx);
     ebc:	000d0593          	mv	a1,s10
     ec0:	02500513          	li	a0,37
     ec4:	000400e7          	jalr	s0
				out((int)*fmt, ctx);
     ec8:	000a4503          	lbu	a0,0(s4)
     ecc:	000d0593          	mv	a1,s10
     ed0:	2540006f          	j	1124 <z_vprintk+0x358>
     ed4:	f9d50793          	addi	a5,a0,-99
     ed8:	0ff7f793          	andi	a5,a5,255
     edc:	01700713          	li	a4,23
     ee0:	fcf76ee3          	bltu	a4,a5,ebc <z_vprintk+0xf0>
     ee4:	00279793          	slli	a5,a5,0x2
     ee8:	015787b3          	add	a5,a5,s5
     eec:	0007a783          	lw	a5,0(a5)
     ef0:	00078067          	jr	a5
			switch (*fmt) {
     ef4:	03900793          	li	a5,57
     ef8:	04a7f063          	bgeu	a5,a0,f38 <z_vprintk+0x16c>
     efc:	05800793          	li	a5,88
     f00:	faf51ee3          	bne	a0,a5,ebc <z_vprintk+0xf0>
				if (*fmt == 'p') {
     f04:	000a4783          	lbu	a5,0(s4)
     f08:	07000713          	li	a4,112
     f0c:	14e79a63          	bne	a5,a4,1060 <z_vprintk+0x294>
					x = va_arg(ap, unsigned int);
     f10:	000da603          	lw	a2,0(s11)
     f14:	00000693          	li	a3,0
     f18:	004d8d93          	addi	s11,s11,4
     f1c:	1680006f          	j	1084 <z_vprintk+0x2b8>
				if (min_width < 0 && padding == PAD_NONE) {
     f20:	00095e63          	bgez	s2,f3c <z_vprintk+0x170>
     f24:	22048263          	beqz	s1,1148 <z_vprintk+0x37c>
					min_width = *fmt - '0';
     f28:	fd050913          	addi	s2,a0,-48
				if (padding == PAD_NONE) {
     f2c:	f60492e3          	bnez	s1,e90 <z_vprintk+0xc4>
					padding = PAD_SPACE_BEFORE;
     f30:	00200493          	li	s1,2
     f34:	f5dff06f          	j	e90 <z_vprintk+0xc4>
				if (min_width < 0) {
     f38:	fe0948e3          	bltz	s2,f28 <z_vprintk+0x15c>
					min_width = 10 * min_width + *fmt - '0';
     f3c:	00a00793          	li	a5,10
     f40:	02f90933          	mul	s2,s2,a5
     f44:	fd090913          	addi	s2,s2,-48
     f48:	01250933          	add	s2,a0,s2
     f4c:	fe1ff06f          	j	f2c <z_vprintk+0x160>
				if (*fmt == 'h' && length_mod == 'h') {
     f50:	06800793          	li	a5,104
     f54:	00f51863          	bne	a0,a5,f64 <z_vprintk+0x198>
     f58:	00a99c63          	bne	s3,a0,f70 <z_vprintk+0x1a4>
					length_mod = 'H';
     f5c:	04800993          	li	s3,72
     f60:	f31ff06f          	j	e90 <z_vprintk+0xc4>
				} else if (*fmt == 'l' && length_mod == 'l') {
     f64:	06c00793          	li	a5,108
     f68:	00f51463          	bne	a0,a5,f70 <z_vprintk+0x1a4>
     f6c:	1ea98263          	beq	s3,a0,1150 <z_vprintk+0x384>
				} else if (length_mod == 0) {
     f70:	f40996e3          	bnez	s3,ebc <z_vprintk+0xf0>
     f74:	00050993          	mv	s3,a0
     f78:	f19ff06f          	j	e90 <z_vprintk+0xc4>
				if (length_mod == 'z') {
     f7c:	05699463          	bne	s3,s6,fc4 <z_vprintk+0x1f8>
					d = va_arg(ap, long);
     f80:	000da603          	lw	a2,0(s11)
     f84:	004d8c93          	addi	s9,s11,4
     f88:	41f65693          	srai	a3,a2,0x1f
				if (*fmt != 'u' && negative(d)) {
     f8c:	07500793          	li	a5,117
     f90:	06f51a63          	bne	a0,a5,1004 <z_vprintk+0x238>
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
     f94:	ffd48793          	addi	a5,s1,-3
     f98:	00f037b3          	snez	a5,a5
     f9c:	03000813          	li	a6,48
     fa0:	01748463          	beq	s1,s7,fa8 <z_vprintk+0x1dc>
     fa4:	02000813          	li	a6,32
     fa8:	00090893          	mv	a7,s2
     fac:	00a00713          	li	a4,10
     fb0:	000d0593          	mv	a1,s10
     fb4:	00040513          	mv	a0,s0
     fb8:	c79ff0ef          	jal	ra,c30 <print_digits>
				char *s = va_arg(ap, char *);
     fbc:	000c8d93          	mv	s11,s9
     fc0:	0ec0006f          	j	10ac <z_vprintk+0x2e0>
				} else if (length_mod == 'l') {
     fc4:	06c00793          	li	a5,108
     fc8:	faf98ce3          	beq	s3,a5,f80 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
     fcc:	04c00793          	li	a5,76
     fd0:	00f99e63          	bne	s3,a5,fec <z_vprintk+0x220>
					long long lld = va_arg(ap, long long);
     fd4:	007d8313          	addi	t1,s11,7
     fd8:	ff837313          	andi	t1,t1,-8
					d = (printk_val_t) lld;
     fdc:	00032603          	lw	a2,0(t1)
     fe0:	00432683          	lw	a3,4(t1)
					long long lld = va_arg(ap, long long);
     fe4:	00830c93          	addi	s9,t1,8
					d = (printk_val_t) lld;
     fe8:	fa5ff06f          	j	f8c <z_vprintk+0x1c0>
				} else if (*fmt == 'u') {
     fec:	07500793          	li	a5,117
					d = va_arg(ap, unsigned int);
     ff0:	000da603          	lw	a2,0(s11)
					d = va_arg(ap, ssize_t);
     ff4:	004d8c93          	addi	s9,s11,4
					d = va_arg(ap, unsigned int);
     ff8:	00000693          	li	a3,0
				} else if (*fmt == 'u') {
     ffc:	f8f50ce3          	beq	a0,a5,f94 <z_vprintk+0x1c8>
					d = va_arg(ap, int);
    1000:	41f65693          	srai	a3,a2,0x1f
				if (*fmt != 'u' && negative(d)) {
    1004:	f806d8e3          	bgez	a3,f94 <z_vprintk+0x1c8>
					out((int)'-', ctx);
    1008:	000d0593          	mv	a1,s10
    100c:	02d00513          	li	a0,45
    1010:	00d12623          	sw	a3,12(sp)
    1014:	00c12423          	sw	a2,8(sp)
    1018:	000400e7          	jalr	s0
					d = -d;
    101c:	00812603          	lw	a2,8(sp)
    1020:	00c12683          	lw	a3,12(sp)
					min_width--;
    1024:	fff90913          	addi	s2,s2,-1
					d = -d;
    1028:	00c037b3          	snez	a5,a2
    102c:	40d006b3          	neg	a3,a3
    1030:	40f686b3          	sub	a3,a3,a5
    1034:	40c00633          	neg	a2,a2
					min_width--;
    1038:	f5dff06f          	j	f94 <z_vprintk+0x1c8>
				out('0', ctx);
    103c:	000d0593          	mv	a1,s10
    1040:	03000513          	li	a0,48
    1044:	000400e7          	jalr	s0
				out('x', ctx);
    1048:	000d0593          	mv	a1,s10
    104c:	07800513          	li	a0,120
    1050:	000400e7          	jalr	s0
				min_width = sizeof(void *) * 2;
    1054:	00800913          	li	s2,8
				padding = PAD_ZERO_BEFORE;
    1058:	00100493          	li	s1,1
    105c:	ea9ff06f          	j	f04 <z_vprintk+0x138>
				} else if (length_mod == 'l') {
    1060:	06c00793          	li	a5,108
    1064:	eaf986e3          	beq	s3,a5,f10 <z_vprintk+0x144>
				} else if (length_mod == 'L') {
    1068:	04c00793          	li	a5,76
    106c:	eaf992e3          	bne	s3,a5,f10 <z_vprintk+0x144>
					x = va_arg(ap, unsigned long long);
    1070:	007d8693          	addi	a3,s11,7
    1074:	ff86f693          	andi	a3,a3,-8
    1078:	0006a603          	lw	a2,0(a3)
    107c:	00868d93          	addi	s11,a3,8
    1080:	0046a683          	lw	a3,4(a3)
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    1084:	ffd48793          	addi	a5,s1,-3
    1088:	00f037b3          	snez	a5,a5
    108c:	03000813          	li	a6,48
    1090:	01748463          	beq	s1,s7,1098 <z_vprintk+0x2cc>
    1094:	02000813          	li	a6,32
    1098:	00090893          	mv	a7,s2
    109c:	01000713          	li	a4,16
    10a0:	000d0593          	mv	a1,s10
    10a4:	00040513          	mv	a0,s0
    10a8:	b89ff0ef          	jal	ra,c30 <print_digits>
			might_format = 0;
    10ac:	00000c93          	li	s9,0
    10b0:	de1ff06f          	j	e90 <z_vprintk+0xc4>
				char *s = va_arg(ap, char *);
    10b4:	004d8c93          	addi	s9,s11,4
    10b8:	000dad83          	lw	s11,0(s11)
    10bc:	000d8793          	mv	a5,s11
				while (*s) {
    10c0:	0007c503          	lbu	a0,0(a5)
    10c4:	02051663          	bnez	a0,10f0 <z_vprintk+0x324>
				if (padding == PAD_SPACE_AFTER) {
    10c8:	00300693          	li	a3,3
    10cc:	eed498e3          	bne	s1,a3,fbc <z_vprintk+0x1f0>
					int remaining = min_width - (s - start);
    10d0:	41b787b3          	sub	a5,a5,s11
    10d4:	40f90db3          	sub	s11,s2,a5
					while (remaining-- > 0) {
    10d8:	efb052e3          	blez	s11,fbc <z_vprintk+0x1f0>
						out(' ', ctx);
    10dc:	000d0593          	mv	a1,s10
    10e0:	02000513          	li	a0,32
    10e4:	000400e7          	jalr	s0
    10e8:	fffd8d93          	addi	s11,s11,-1
    10ec:	fedff06f          	j	10d8 <z_vprintk+0x30c>
					out((int)(*s++), ctx);
    10f0:	00178793          	addi	a5,a5,1
    10f4:	000d0593          	mv	a1,s10
    10f8:	00f12423          	sw	a5,8(sp)
    10fc:	000400e7          	jalr	s0
    1100:	00812783          	lw	a5,8(sp)
    1104:	fbdff06f          	j	10c0 <z_vprintk+0x2f4>
				out(c, ctx);
    1108:	000da503          	lw	a0,0(s11)
    110c:	000d0593          	mv	a1,s10
				int c = va_arg(ap, int);
    1110:	004d8c93          	addi	s9,s11,4
				out(c, ctx);
    1114:	000400e7          	jalr	s0
				break;
    1118:	ea5ff06f          	j	fbc <z_vprintk+0x1f0>
				out((int)'%', ctx);
    111c:	000d0593          	mv	a1,s10
    1120:	02500513          	li	a0,37
				out((int)*fmt, ctx);
    1124:	000400e7          	jalr	s0
				break;
    1128:	f85ff06f          	j	10ac <z_vprintk+0x2e0>
				length_mod = 0;
    112c:	00000993          	li	s3,0
				min_width = -1;
    1130:	fff00913          	li	s2,-1
				padding = PAD_NONE;
    1134:	00000493          	li	s1,0
				might_format = 1;
    1138:	00100c93          	li	s9,1
    113c:	d55ff06f          	j	e90 <z_vprintk+0xc4>
			switch (*fmt) {
    1140:	00300493          	li	s1,3
    1144:	d4dff06f          	j	e90 <z_vprintk+0xc4>
					padding = PAD_ZERO_BEFORE;
    1148:	00100493          	li	s1,1
    114c:	d45ff06f          	j	e90 <z_vprintk+0xc4>
					length_mod = 'L';
    1150:	04c00993          	li	s3,76
    1154:	d3dff06f          	j	e90 <z_vprintk+0xc4>

00001158 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1158:	fe010113          	addi	sp,sp,-32
    115c:	00050613          	mv	a2,a0
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    1160:	00001537          	lui	a0,0x1
{
    1164:	00058693          	mv	a3,a1
	z_vprintk(char_out, &ctx, fmt, ap);
    1168:	da850513          	addi	a0,a0,-600 # da8 <char_out>
    116c:	00c10593          	addi	a1,sp,12
{
    1170:	00112e23          	sw	ra,28(sp)
	struct out_context ctx = { 0 };
    1174:	00012623          	sw	zero,12(sp)
	z_vprintk(char_out, &ctx, fmt, ap);
    1178:	c55ff0ef          	jal	ra,dcc <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    117c:	01c12083          	lw	ra,28(sp)
    1180:	02010113          	addi	sp,sp,32
    1184:	00008067          	ret

00001188 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    1188:	fc010113          	addi	sp,sp,-64
    118c:	02b12223          	sw	a1,36(sp)
	va_list ap;

	va_start(ap, fmt);
    1190:	02410593          	addi	a1,sp,36
{
    1194:	00112e23          	sw	ra,28(sp)
    1198:	02c12423          	sw	a2,40(sp)
    119c:	02d12623          	sw	a3,44(sp)
    11a0:	02e12823          	sw	a4,48(sp)
    11a4:	02f12a23          	sw	a5,52(sp)
    11a8:	03012c23          	sw	a6,56(sp)
    11ac:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    11b0:	00b12623          	sw	a1,12(sp)

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    11b4:	fa5ff0ef          	jal	ra,1158 <vprintk>
	}
	va_end(ap);
}
    11b8:	01c12083          	lw	ra,28(sp)
    11bc:	04010113          	addi	sp,sp,64
    11c0:	00008067          	ret

000011c4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    11c4:	ff010113          	addi	sp,sp,-16
    11c8:	00050793          	mv	a5,a0
    11cc:	00058513          	mv	a0,a1
    11d0:	00060593          	mv	a1,a2
	entry(p1, p2, p3);
    11d4:	00068613          	mv	a2,a3
{
    11d8:	00112623          	sw	ra,12(sp)
	entry(p1, p2, p3);
    11dc:	000780e7          	jalr	a5
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
    11e0:	089010ef          	jal	ra,2a68 <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
    11e4:	22d010ef          	jal	ra,2c10 <z_impl_k_thread_abort>

000011e8 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    11e8:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    11ec:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    11f0:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    11f4:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    11f8:	00f76a63          	bltu	a4,a5,120c <chunk_field+0x24>
		return ((uint32_t *)cmem)[f];
    11fc:	00261613          	slli	a2,a2,0x2
    1200:	00c585b3          	add	a1,a1,a2
    1204:	0005a503          	lw	a0,0(a1)
    1208:	00008067          	ret
	} else {
		return ((uint16_t *)cmem)[f];
    120c:	00161613          	slli	a2,a2,0x1
    1210:	00c585b3          	add	a1,a1,a2
    1214:	0005d503          	lhu	a0,0(a1)
	}
}
    1218:	00008067          	ret

0000121c <chunk_set>:
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    121c:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    1220:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    1224:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    1228:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    122c:	00f76a63          	bltu	a4,a5,1240 <chunk_set+0x24>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    1230:	00261613          	slli	a2,a2,0x2
    1234:	00c585b3          	add	a1,a1,a2
    1238:	00d5a023          	sw	a3,0(a1)
    123c:	00008067          	ret
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    1240:	00161613          	slli	a2,a2,0x1
    1244:	00c585b3          	add	a1,a1,a2
    1248:	00d59023          	sh	a3,0(a1)
	}
}
    124c:	00008067          	ret

00001250 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    1250:	ff010113          	addi	sp,sp,-16
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    1254:	00100613          	li	a2,1
{
    1258:	00112623          	sw	ra,12(sp)
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    125c:	f8dff0ef          	jal	ra,11e8 <chunk_field>
}
    1260:	00c12083          	lw	ra,12(sp)
    1264:	00155513          	srli	a0,a0,0x1
    1268:	01010113          	addi	sp,sp,16
    126c:	00008067          	ret

00001270 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    1270:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    1274:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    1278:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    127c:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    1280:	02f76063          	bltu	a4,a5,12a0 <set_chunk_used+0x30>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    1284:	0045a783          	lw	a5,4(a1)
		if (used) {
    1288:	00060863          	beqz	a2,1298 <set_chunk_used+0x28>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    128c:	0017e793          	ori	a5,a5,1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    1290:	00f5a223          	sw	a5,4(a1)
    1294:	00008067          	ret
    1298:	ffe7f793          	andi	a5,a5,-2
    129c:	ff5ff06f          	j	1290 <set_chunk_used+0x20>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    12a0:	0025d783          	lhu	a5,2(a1)
		if (used) {
    12a4:	00060863          	beqz	a2,12b4 <set_chunk_used+0x44>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    12a8:	0017e793          	ori	a5,a5,1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    12ac:	00f59123          	sh	a5,2(a1)
		}
	}
}
    12b0:	00008067          	ret
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    12b4:	ffe7f793          	andi	a5,a5,-2
    12b8:	ff5ff06f          	j	12ac <set_chunk_used+0x3c>

000012bc <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    12bc:	00161693          	slli	a3,a2,0x1
    12c0:	00100613          	li	a2,1
    12c4:	f59ff06f          	j	121c <chunk_set>

000012c8 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
    12c8:	ff010113          	addi	sp,sp,-16
    12cc:	00112623          	sw	ra,12(sp)
	return big_heap(h) ? 8 : 4;
    12d0:	000087b7          	lui	a5,0x8
    12d4:	02f57863          	bgeu	a0,a5,1304 <bucket_idx.isra.0+0x3c>
    12d8:	00400793          	li	a5,4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    12dc:	00878793          	addi	a5,a5,8 # 8008 <_end+0x3988>
    12e0:	0037d793          	srli	a5,a5,0x3
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    12e4:	00158593          	addi	a1,a1,1
	return 31 - __builtin_clz(usable_sz);
    12e8:	40f58533          	sub	a0,a1,a5
    12ec:	f91fe0ef          	jal	ra,27c <__clzsi2>
}
    12f0:	00c12083          	lw	ra,12(sp)
    12f4:	01f00793          	li	a5,31
    12f8:	40a78533          	sub	a0,a5,a0
    12fc:	01010113          	addi	sp,sp,16
    1300:	00008067          	ret
	return big_heap(h) ? 8 : 4;
    1304:	00800793          	li	a5,8
    1308:	fd5ff06f          	j	12dc <bucket_idx.isra.0+0x14>

0000130c <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    130c:	fe010113          	addi	sp,sp,-32
    1310:	01212823          	sw	s2,16(sp)
	return big_heap_chunks(h->len);
    1314:	00852903          	lw	s2,8(a0)
    1318:	00812c23          	sw	s0,24(sp)
    131c:	00912a23          	sw	s1,20(sp)
    1320:	00112e23          	sw	ra,28(sp)
    1324:	00058493          	mv	s1,a1
    1328:	01312623          	sw	s3,12(sp)
    132c:	00050413          	mv	s0,a0
	return big_heap(h) && chunk_size(h, c) == 1;
    1330:	f21ff0ef          	jal	ra,1250 <chunk_size>
    1334:	000087b7          	lui	a5,0x8
    1338:	00050593          	mv	a1,a0
    133c:	00f96663          	bltu	s2,a5,1348 <free_list_add+0x3c>
	if (!solo_free_header(h, c)) {
    1340:	00100793          	li	a5,1
    1344:	0cf50a63          	beq	a0,a5,1418 <free_list_add+0x10c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    1348:	00090513          	mv	a0,s2
    134c:	f7dff0ef          	jal	ra,12c8 <bucket_idx.isra.0>
	if (b->next == 0) {
    1350:	00251793          	slli	a5,a0,0x2
    1354:	00f407b3          	add	a5,s0,a5
    1358:	0107a903          	lw	s2,16(a5) # 8010 <_end+0x3990>
    135c:	04091e63          	bnez	s2,13b8 <free_list_add+0xac>
		h->avail_buckets |= (1 << bidx);
    1360:	00100713          	li	a4,1
    1364:	00a71733          	sll	a4,a4,a0
    1368:	00c42503          	lw	a0,12(s0)
	chunk_set(h, c, FREE_PREV, prev);
    136c:	00048693          	mv	a3,s1
    1370:	00200613          	li	a2,2
    1374:	00e56533          	or	a0,a0,a4
    1378:	00a42623          	sw	a0,12(s0)
    137c:	00048593          	mv	a1,s1
		b->next = c;
    1380:	0097a823          	sw	s1,16(a5)
    1384:	00040513          	mv	a0,s0
    1388:	e95ff0ef          	jal	ra,121c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    138c:	00048693          	mv	a3,s1
    1390:	00300613          	li	a2,3
    1394:	00048593          	mv	a1,s1
	chunk_set(h, c, FREE_PREV, prev);
    1398:	00040513          	mv	a0,s0
		free_list_add_bidx(h, c, bidx);
	}
}
    139c:	01812403          	lw	s0,24(sp)
    13a0:	01c12083          	lw	ra,28(sp)
    13a4:	01412483          	lw	s1,20(sp)
    13a8:	01012903          	lw	s2,16(sp)
    13ac:	00c12983          	lw	s3,12(sp)
    13b0:	02010113          	addi	sp,sp,32
    13b4:	e69ff06f          	j	121c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    13b8:	00200613          	li	a2,2
    13bc:	00090593          	mv	a1,s2
    13c0:	00040513          	mv	a0,s0
    13c4:	e25ff0ef          	jal	ra,11e8 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    13c8:	00050693          	mv	a3,a0
	return chunk_field(h, c, FREE_PREV);
    13cc:	00050993          	mv	s3,a0
	chunk_set(h, c, FREE_PREV, prev);
    13d0:	00200613          	li	a2,2
    13d4:	00048593          	mv	a1,s1
    13d8:	00040513          	mv	a0,s0
    13dc:	e41ff0ef          	jal	ra,121c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    13e0:	00090693          	mv	a3,s2
    13e4:	00300613          	li	a2,3
    13e8:	00048593          	mv	a1,s1
    13ec:	00040513          	mv	a0,s0
    13f0:	e2dff0ef          	jal	ra,121c <chunk_set>
    13f4:	00048693          	mv	a3,s1
    13f8:	00300613          	li	a2,3
    13fc:	00098593          	mv	a1,s3
    1400:	00040513          	mv	a0,s0
    1404:	e19ff0ef          	jal	ra,121c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    1408:	00048693          	mv	a3,s1
    140c:	00200613          	li	a2,2
    1410:	00090593          	mv	a1,s2
    1414:	f85ff06f          	j	1398 <free_list_add+0x8c>
    1418:	01c12083          	lw	ra,28(sp)
    141c:	01812403          	lw	s0,24(sp)
    1420:	01412483          	lw	s1,20(sp)
    1424:	01012903          	lw	s2,16(sp)
    1428:	00c12983          	lw	s3,12(sp)
    142c:	02010113          	addi	sp,sp,32
    1430:	00008067          	ret

00001434 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1434:	fe010113          	addi	sp,sp,-32
    1438:	00812c23          	sw	s0,24(sp)
    143c:	00112e23          	sw	ra,28(sp)
    1440:	00912a23          	sw	s1,20(sp)
    1444:	01212823          	sw	s2,16(sp)
    1448:	01312623          	sw	s3,12(sp)
	return big_heap_bytes(size) ? 8 : 4;
    144c:	000407b7          	lui	a5,0x40
    1450:	00400413          	li	s0,4
    1454:	00f66463          	bltu	a2,a5,145c <sys_heap_init+0x28>
    1458:	00800413          	li	s0,8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    145c:	40860433          	sub	s0,a2,s0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1460:	00758493          	addi	s1,a1,7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1464:	00858433          	add	s0,a1,s0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1468:	ff84f493          	andi	s1,s1,-8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    146c:	ff847413          	andi	s0,s0,-8
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    1470:	40940433          	sub	s0,s0,s1

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1474:	00952023          	sw	s1,0(a0)
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    1478:	00345413          	srli	s0,s0,0x3
	h->chunk0_hdr_area = 0;
    147c:	00000793          	li	a5,0
    1480:	00000813          	li	a6,0
    1484:	00f4a023          	sw	a5,0(s1)
    1488:	0104a223          	sw	a6,4(s1)
	h->len = buf_sz;
    148c:	0084a423          	sw	s0,8(s1)
	h->avail_buckets = 0;
    1490:	0004a623          	sw	zero,12(s1)

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    1494:	00040593          	mv	a1,s0
    1498:	00040513          	mv	a0,s0
    149c:	e2dff0ef          	jal	ra,12c8 <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    14a0:	00251913          	slli	s2,a0,0x2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    14a4:	01b90913          	addi	s2,s2,27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    14a8:	00150693          	addi	a3,a0,1
    14ac:	00395913          	srli	s2,s2,0x3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    14b0:	01048713          	addi	a4,s1,16
    14b4:	00000793          	li	a5,0
    14b8:	0ad7c263          	blt	a5,a3,155c <sys_heap_init+0x128>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    14bc:	00090613          	mv	a2,s2
    14c0:	00048513          	mv	a0,s1
    14c4:	00000593          	li	a1,0
    14c8:	df5ff0ef          	jal	ra,12bc <set_chunk_size>
	set_chunk_used(h, 0, true);
    14cc:	00048513          	mv	a0,s1
    14d0:	00100613          	li	a2,1
    14d4:	00000593          	li	a1,0
    14d8:	d99ff0ef          	jal	ra,1270 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    14dc:	412409b3          	sub	s3,s0,s2
    14e0:	00098613          	mv	a2,s3
    14e4:	00090593          	mv	a1,s2
    14e8:	00048513          	mv	a0,s1
    14ec:	dd1ff0ef          	jal	ra,12bc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    14f0:	00090693          	mv	a3,s2
    14f4:	00090593          	mv	a1,s2
    14f8:	00048513          	mv	a0,s1
    14fc:	00000613          	li	a2,0
    1500:	d1dff0ef          	jal	ra,121c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    1504:	00040593          	mv	a1,s0
    1508:	00048513          	mv	a0,s1
    150c:	00000613          	li	a2,0
    1510:	dadff0ef          	jal	ra,12bc <set_chunk_size>
    1514:	00098693          	mv	a3,s3
    1518:	00040593          	mv	a1,s0
    151c:	00048513          	mv	a0,s1
    1520:	00000613          	li	a2,0
    1524:	cf9ff0ef          	jal	ra,121c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    1528:	00040593          	mv	a1,s0
    152c:	00048513          	mv	a0,s1
    1530:	00100613          	li	a2,1
    1534:	d3dff0ef          	jal	ra,1270 <set_chunk_used>

	free_list_add(h, chunk0_size);
}
    1538:	01812403          	lw	s0,24(sp)
    153c:	01c12083          	lw	ra,28(sp)
    1540:	00c12983          	lw	s3,12(sp)
	free_list_add(h, chunk0_size);
    1544:	00090593          	mv	a1,s2
    1548:	00048513          	mv	a0,s1
}
    154c:	01012903          	lw	s2,16(sp)
    1550:	01412483          	lw	s1,20(sp)
    1554:	02010113          	addi	sp,sp,32
	free_list_add(h, chunk0_size);
    1558:	db5ff06f          	j	130c <free_list_add>
		h->buckets[i].next = 0;
    155c:	00072023          	sw	zero,0(a4)
	for (int i = 0; i < nb_buckets; i++) {
    1560:	00178793          	addi	a5,a5,1 # 40001 <_end+0x3b981>
    1564:	00470713          	addi	a4,a4,4
    1568:	f51ff06f          	j	14b8 <sys_heap_init+0x84>

0000156c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    156c:	00008067          	ret

00001570 <soc_interrupt_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;
	ulong_t mstatus;

	__asm__ volatile ("csrrc %0, mstatus, %1"
    1570:	00800793          	li	a5,8
    1574:	3007b7f3          	csrrc	a5,mstatus,a5
void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
    1578:	30405073          	csrwi	mie,0
    157c:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
    1580:	00008067          	ret

00001584 <fix_baud_rate>:
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1584:	800017b7          	lui	a5,0x80001
    1588:	03c7a783          	lw	a5,60(a5) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>

	/*
	 * calculate baud rate divisor. a variant of
	 * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)
	 */
	divisor = ((sys_clk_freq + (baud_rate << 3))
    158c:	000e1737          	lui	a4,0xe1
	return *(volatile uint8_t *)addr;
    1590:	800026b7          	lui	a3,0x80002
    1594:	00e787b3          	add	a5,a5,a4
		   / baud_rate) >> 4;
    1598:	0001c737          	lui	a4,0x1c
    159c:	20070713          	addi	a4,a4,512 # 1c200 <_end+0x17b80>
    15a0:	02e7d7b3          	divu	a5,a5,a4
    15a4:	00c6c703          	lbu	a4,12(a3) # 8000200c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000200d>
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);

	sys_write8(lcr_cache, REG_LCR);

	return 0;
}
    15a8:	00000513          	li	a0,0
    15ac:	0ff77613          	andi	a2,a4,255
	sys_write8(lcr_cache | LCR_DLAB, REG_LCR);
    15b0:	f8076713          	ori	a4,a4,-128
    15b4:	0ff77713          	andi	a4,a4,255
	*(volatile uint8_t *)addr = data;
    15b8:	00e68623          	sb	a4,12(a3)
	divisor = ((sys_clk_freq + (baud_rate << 3))
    15bc:	0047d713          	srli	a4,a5,0x4
	sys_write8( divisor       & 0xff, REG_BRDL);
    15c0:	0ff77713          	andi	a4,a4,255
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);
    15c4:	00c7d793          	srli	a5,a5,0xc
    15c8:	00e68023          	sb	a4,0(a3)
    15cc:	0ff7f793          	andi	a5,a5,255
    15d0:	00f68223          	sb	a5,4(a3)
    15d4:	00c68623          	sb	a2,12(a3)
}
    15d8:	00008067          	ret

000015dc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    15dc:	ff010113          	addi	sp,sp,-16
    15e0:	00112623          	sw	ra,12(sp)
    15e4:	00812423          	sw	s0,8(sp)
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    15e8:	00003537          	lui	a0,0x3
    15ec:	5d450513          	addi	a0,a0,1492 # 35d4 <led0_dev_cfg+0xc>
    15f0:	31d000ef          	jal	ra,210c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    15f4:	000037b7          	lui	a5,0x3
	__stdout_hook_install(console_out);
    15f8:	00001437          	lui	s0,0x1
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    15fc:	72a7a423          	sw	a0,1832(a5) # 3728 <uart_console_dev>
	__stdout_hook_install(console_out);
    1600:	62440513          	addi	a0,s0,1572 # 1624 <console_out>
    1604:	574000ef          	jal	ra,1b78 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1608:	62440513          	addi	a0,s0,1572
    160c:	fb4ff0ef          	jal	ra,dc0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1610:	00c12083          	lw	ra,12(sp)
    1614:	00812403          	lw	s0,8(sp)
    1618:	00000513          	li	a0,0
    161c:	01010113          	addi	sp,sp,16
    1620:	00008067          	ret

00001624 <console_out>:
{
    1624:	ff010113          	addi	sp,sp,-16
    1628:	00812423          	sw	s0,8(sp)
    162c:	00912223          	sw	s1,4(sp)
    1630:	00112623          	sw	ra,12(sp)
    1634:	000034b7          	lui	s1,0x3
	if ('\n' == c) {
    1638:	00a00793          	li	a5,10
{
    163c:	00050413          	mv	s0,a0
    1640:	72848493          	addi	s1,s1,1832 # 3728 <uart_console_dev>
	if ('\n' == c) {
    1644:	00f51c63          	bne	a0,a5,165c <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
    1648:	0004a503          	lw	a0,0(s1)
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    164c:	00852783          	lw	a5,8(a0)
    1650:	00d00593          	li	a1,13
    1654:	0047a783          	lw	a5,4(a5)
    1658:	000780e7          	jalr	a5
	uart_poll_out(uart_console_dev, c);
    165c:	0004a503          	lw	a0,0(s1)
    1660:	00852783          	lw	a5,8(a0)
    1664:	0ff47593          	andi	a1,s0,255
    1668:	0047a783          	lw	a5,4(a5)
    166c:	000780e7          	jalr	a5
}
    1670:	00c12083          	lw	ra,12(sp)
    1674:	00040513          	mv	a0,s0
    1678:	00812403          	lw	s0,8(sp)
    167c:	00412483          	lw	s1,4(sp)
    1680:	01010113          	addi	sp,sp,16
    1684:	00008067          	ret

00001688 <swerv_pic_init>:
	return *(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg);
}

static void swerv_pic_write(uint32_t reg, uint32_t val)
{
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    1688:	f00c37b7          	lui	a5,0xf00c3
    168c:	0007a023          	sw	zero,0(a5) # f00c3000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c3001>
    1690:	f00c27b7          	lui	a5,0xf00c2
    1694:	00478713          	addi	a4,a5,4 # f00c2004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c2005>

	/* Init priority order to 0, 0=lowest to 15=highest */
	swerv_pic_write(SWERV_PIC_mpiccfg, 0);

	/* Ensure that all interrupts are disabled initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    1698:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    169c:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16a0:	00470713          	addi	a4,a4,4
    16a4:	fef71ce3          	bne	a4,a5,169c <swerv_pic_init+0x14>
    16a8:	f00c07b7          	lui	a5,0xf00c0
    16ac:	00478713          	addi	a4,a5,4 # f00c0004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0005>
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    16b0:	00f00693          	li	a3,15
		swerv_pic_write(SWERV_PIC_meie(i), 0);
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16b4:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    16b8:	00d72023          	sw	a3,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16bc:	00470713          	addi	a4,a4,4
    16c0:	fef71ce3          	bne	a4,a5,16b8 <swerv_pic_init+0x30>
    16c4:	f00c47b7          	lui	a5,0xf00c4
    16c8:	00478713          	addi	a4,a5,4 # f00c4004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c4005>
		swerv_pic_write(SWERV_PIC_meipl(i), 15);
	}

	/* Set property of each interrupt line to level-triggered/high */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16cc:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    16d0:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16d4:	00470713          	addi	a4,a4,4
    16d8:	fef71ce3          	bne	a4,a5,16d0 <swerv_pic_init+0x48>
    16dc:	f00c57b7          	lui	a5,0xf00c5
    16e0:	00478713          	addi	a4,a5,4 # f00c5004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c5005>
		swerv_pic_write(SWERV_PIC_meigwctrl(i), (0<<1)|(0<<0));
	}

	/* clear pending of each interrupt line */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16e4:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    16e8:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    16ec:	00470713          	addi	a4,a4,4
    16f0:	fef71ce3          	bne	a4,a5,16e8 <swerv_pic_init+0x60>
		swerv_pic_write(SWERV_PIC_meigwclr(i), 0);
	}

	/* No interrupts masked */
	__asm__ swerv_pic_writecsr(meipt, 0);
    16f4:	bc905073          	csrwi	0xbc9,0
	__asm__ swerv_pic_writecsr(meicidpl, 0);
    16f8:	bcb05073          	csrwi	0xbcb,0
	__asm__ swerv_pic_writecsr(meicurpl, 0);
    16fc:	bcc05073          	csrwi	0xbcc,0

	/*
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
    1700:	000017b7          	lui	a5,0x1
    1704:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
    1708:	3047a7f3          	csrrs	a5,mie,a5
}
    170c:	00000513          	li	a0,0
    1710:	00008067          	ret

00001714 <swerv_pic_irq_handler>:
{
    1714:	ff010113          	addi	sp,sp,-16
    1718:	00112623          	sw	ra,12(sp)
    171c:	00812423          	sw	s0,8(sp)
	__asm__ swerv_pic_writecsr(meicpct, 0);
    1720:	bca05073          	csrwi	0xbca,0
	__asm__ swerv_pic_readcsr(meihap, tmp);
    1724:	fc802473          	csrr	s0,0xfc8
	irq = (tmp >> 2) & 0xff;
    1728:	00245413          	srli	s0,s0,0x2
    172c:	0ff47413          	andi	s0,s0,255
	save_irq = irq;
    1730:	000037b7          	lui	a5,0x3
    1734:	7287a623          	sw	s0,1836(a5) # 372c <save_irq>
	if (irq == 0U || irq >= 64) {
    1738:	fff40713          	addi	a4,s0,-1
    173c:	03e00793          	li	a5,62
    1740:	00e7f663          	bgeu	a5,a4,174c <swerv_pic_irq_handler+0x38>
		z_irq_spurious(NULL);
    1744:	00000513          	li	a0,0
    1748:	2f0000ef          	jal	ra,1a38 <z_irq_spurious>
	irq += RISCV_MAX_GENERIC_IRQ;
    174c:	00b40713          	addi	a4,s0,11
	if (ite->isr)
    1750:	000037b7          	lui	a5,0x3
    1754:	00371713          	slli	a4,a4,0x3
    1758:	21c78793          	addi	a5,a5,540 # 321c <_sw_isr_table>
    175c:	00e787b3          	add	a5,a5,a4
    1760:	0047a703          	lw	a4,4(a5)
    1764:	00070663          	beqz	a4,1770 <swerv_pic_irq_handler+0x5c>
		ite->isr(ite->arg);
    1768:	0007a503          	lw	a0,0(a5)
    176c:	000700e7          	jalr	a4
	swerv_pic_write(SWERV_PIC_meigwclr(irq), 0);
    1770:	000017b7          	lui	a5,0x1
    1774:	40b78793          	addi	a5,a5,1035 # 140b <free_list_add+0xff>
    1778:	00f40433          	add	s0,s0,a5
    177c:	00241413          	slli	s0,s0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    1780:	f00c07b7          	lui	a5,0xf00c0
    1784:	00f40433          	add	s0,s0,a5
}
    1788:	00c12083          	lw	ra,12(sp)
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    178c:	00042023          	sw	zero,0(s0)
}
    1790:	00812403          	lw	s0,8(sp)
    1794:	01010113          	addi	sp,sp,16
    1798:	00008067          	ret

0000179c <swerv_pic_irq_enable>:
	if ((irq >= SWERV_PIC_MAX_ID) || (irq < RISCV_MAX_GENERIC_IRQ)) {
    179c:	ff550713          	addi	a4,a0,-11
    17a0:	03f00793          	li	a5,63
    17a4:	02e7e663          	bltu	a5,a4,17d0 <swerv_pic_irq_enable+0x34>
    17a8:	00800793          	li	a5,8
    17ac:	3007b7f3          	csrrc	a5,mstatus,a5
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    17b0:	7f550513          	addi	a0,a0,2037
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    17b4:	f00c0737          	lui	a4,0xf00c0
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    17b8:	00251513          	slli	a0,a0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    17bc:	00e50533          	add	a0,a0,a4
    17c0:	00100713          	li	a4,1
    17c4:	00e52023          	sw	a4,0(a0)
			  : "=r" (mstatus)
			  : "r" (MSTATUS_IEN)
			  : "memory");

	key = (mstatus & MSTATUS_IEN);
    17c8:	0087f793          	andi	a5,a5,8
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	ulong_t mstatus;

	__asm__ volatile ("csrrs %0, mstatus, %1"
    17cc:	3007a7f3          	csrrs	a5,mstatus,a5
}
    17d0:	00008067          	ret

000017d4 <arch_irq_enable>:
	if (irq > RISCV_MAX_GENERIC_IRQ) {
    17d4:	00b00793          	li	a5,11
    17d8:	00a7f463          	bgeu	a5,a0,17e0 <arch_irq_enable+0xc>
		swerv_pic_irq_enable(irq);
    17dc:	fc1ff06f          	j	179c <swerv_pic_irq_enable>
			  : "=r" (mie)
			  : "r" (1 << irq));
    17e0:	00100793          	li	a5,1
    17e4:	00a79533          	sll	a0,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
    17e8:	30452573          	csrrs	a0,mie,a0
}
    17ec:	00008067          	ret

000017f0 <mtime>:
	volatile uint32_t *r = (uint32_t *)RISCV_MTIME_BASE;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
    17f0:	800017b7          	lui	a5,0x80001
    17f4:	0247a703          	lw	a4,36(a5) # 80001024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001025>
		lo = r[0];
    17f8:	0207a503          	lw	a0,32(a5)
	} while (r[1] != hi);
    17fc:	0247a583          	lw	a1,36(a5)
    1800:	fee59ae3          	bne	a1,a4,17f4 <mtime+0x4>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
    1804:	00008067          	ret

00001808 <timer_isr>:

static void timer_isr(const void *arg)
{
    1808:	fe010113          	addi	sp,sp,-32
    180c:	01212823          	sw	s2,16(sp)
    1810:	00112e23          	sw	ra,28(sp)
    1814:	00812c23          	sw	s0,24(sp)
    1818:	00912a23          	sw	s1,20(sp)
    181c:	01312623          	sw	s3,12(sp)
    1820:	01412423          	sw	s4,8(sp)
    1824:	01512223          	sw	s5,4(sp)
    1828:	01612023          	sw	s6,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    182c:	00800913          	li	s2,8
    1830:	30093973          	csrrc	s2,mstatus,s2
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint64_t now = mtime();
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    1834:	00003437          	lui	s0,0x3
    1838:	71040413          	addi	s0,s0,1808 # 3710 <last_count>
	uint64_t now = mtime();
    183c:	fb5ff0ef          	jal	ra,17f0 <mtime>
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    1840:	00042b03          	lw	s6,0(s0)
    1844:	00442483          	lw	s1,4(s0)
	key = (mstatus & MSTATUS_IEN);
    1848:	00897913          	andi	s2,s2,8
    184c:	41650b33          	sub	s6,a0,s6
    1850:	016537b3          	sltu	a5,a0,s6
    1854:	409584b3          	sub	s1,a1,s1
	uint64_t now = mtime();
    1858:	00050a13          	mv	s4,a0
    185c:	00058993          	mv	s3,a1
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    1860:	40f484b3          	sub	s1,s1,a5

static inline int z_impl_z_clock_hw_cycles_per_sec_runtime_get(void)
{
	extern int z_clock_hw_cycles_per_sec;

	return z_clock_hw_cycles_per_sec;
    1864:	00003ab7          	lui	s5,0x3
    1868:	6c8aa503          	lw	a0,1736(s5) # 36c8 <z_clock_hw_cycles_per_sec>
    186c:	06400613          	li	a2,100
    1870:	00000693          	li	a3,0
    1874:	41f55593          	srai	a1,a0,0x1f
    1878:	a99fe0ef          	jal	ra,310 <__udivdi3>
    187c:	00050613          	mv	a2,a0
    1880:	00000693          	li	a3,0
    1884:	000b0513          	mv	a0,s6
    1888:	00048593          	mv	a1,s1
    188c:	a85fe0ef          	jal	ra,310 <__udivdi3>
    1890:	00050493          	mv	s1,a0

	last_count += dticks * CYC_PER_TICK;
    1894:	6c8aa503          	lw	a0,1736(s5)
    1898:	06400613          	li	a2,100
    189c:	00000693          	li	a3,0
    18a0:	41f55593          	srai	a1,a0,0x1f
    18a4:	a6dfe0ef          	jal	ra,310 <__udivdi3>
    18a8:	02a487b3          	mul	a5,s1,a0
    18ac:	00042703          	lw	a4,0(s0)
    18b0:	00442503          	lw	a0,4(s0)
    18b4:	00e78733          	add	a4,a5,a4
    18b8:	00f737b3          	sltu	a5,a4,a5
    18bc:	00a787b3          	add	a5,a5,a0
    18c0:	00e42023          	sw	a4,0(s0)
    18c4:	00f42223          	sw	a5,4(s0)

	if (!TICKLESS) {
		uint64_t next = last_count + CYC_PER_TICK;
    18c8:	6c8aa503          	lw	a0,1736(s5)
    18cc:	06400613          	li	a2,100
    18d0:	00000693          	li	a3,0
    18d4:	41f55593          	srai	a1,a0,0x1f
    18d8:	a39fe0ef          	jal	ra,310 <__udivdi3>
    18dc:	00042483          	lw	s1,0(s0)
    18e0:	00442783          	lw	a5,4(s0)
    18e4:	009504b3          	add	s1,a0,s1
    18e8:	00a4b433          	sltu	s0,s1,a0
    18ec:	00f40433          	add	s0,s0,a5

		if ((int64_t)(next - now) < MIN_DELAY) {
    18f0:	41448a33          	sub	s4,s1,s4
    18f4:	0144b5b3          	sltu	a1,s1,s4
    18f8:	413409b3          	sub	s3,s0,s3
    18fc:	40b989b3          	sub	s3,s3,a1
		uint64_t next = last_count + CYC_PER_TICK;
    1900:	00048513          	mv	a0,s1
    1904:	00040713          	mv	a4,s0
		if ((int64_t)(next - now) < MIN_DELAY) {
    1908:	03304a63          	bgtz	s3,193c <timer_isr+0x134>
    190c:	000a8793          	mv	a5,s5
    1910:	00099663          	bnez	s3,191c <timer_isr+0x114>
    1914:	3e700693          	li	a3,999
    1918:	0346e263          	bltu	a3,s4,193c <timer_isr+0x134>
			next += CYC_PER_TICK;
    191c:	6c87a503          	lw	a0,1736(a5)
    1920:	06400613          	li	a2,100
    1924:	00000693          	li	a3,0
    1928:	41f55593          	srai	a1,a0,0x1f
    192c:	9e5fe0ef          	jal	ra,310 <__udivdi3>
    1930:	00a48533          	add	a0,s1,a0
    1934:	009534b3          	sltu	s1,a0,s1
    1938:	00848733          	add	a4,s1,s0
	r[1] = 0xffffffff;
    193c:	800017b7          	lui	a5,0x80001
    1940:	fff00693          	li	a3,-1
    1944:	02d7a623          	sw	a3,44(a5) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    1948:	02a7a423          	sw	a0,40(a5)
	r[1] = (uint32_t)(time >> 32);
    194c:	02e7a623          	sw	a4,44(a5)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1950:	30092973          	csrrs	s2,mstatus,s2
		set_mtimecmp(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    1954:	01812403          	lw	s0,24(sp)
    1958:	01c12083          	lw	ra,28(sp)
    195c:	01412483          	lw	s1,20(sp)
    1960:	01012903          	lw	s2,16(sp)
    1964:	00c12983          	lw	s3,12(sp)
    1968:	00812a03          	lw	s4,8(sp)
    196c:	00412a83          	lw	s5,4(sp)
    1970:	00012b03          	lw	s6,0(sp)
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1974:	00100513          	li	a0,1
}
    1978:	02010113          	addi	sp,sp,32
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    197c:	6900106f          	j	300c <z_clock_announce>

00001980 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
    1980:	ff010113          	addi	sp,sp,-16
    1984:	00812423          	sw	s0,8(sp)
	ARG_UNUSED(device);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
	last_count = mtime();
    1988:	00003437          	lui	s0,0x3
{
    198c:	00112623          	sw	ra,12(sp)
	last_count = mtime();
    1990:	71040413          	addi	s0,s0,1808 # 3710 <last_count>
    1994:	e5dff0ef          	jal	ra,17f0 <mtime>
    1998:	00a42023          	sw	a0,0(s0)
    199c:	00b42223          	sw	a1,4(s0)
    19a0:	000037b7          	lui	a5,0x3
	set_mtimecmp(last_count + CYC_PER_TICK);
    19a4:	6c87a503          	lw	a0,1736(a5) # 36c8 <z_clock_hw_cycles_per_sec>
    19a8:	06400613          	li	a2,100
    19ac:	00000693          	li	a3,0
    19b0:	41f55593          	srai	a1,a0,0x1f
    19b4:	95dfe0ef          	jal	ra,310 <__udivdi3>
    19b8:	00042783          	lw	a5,0(s0)
    19bc:	00442703          	lw	a4,4(s0)
	r[1] = 0xffffffff;
    19c0:	fff00693          	li	a3,-1
	set_mtimecmp(last_count + CYC_PER_TICK);
    19c4:	00f507b3          	add	a5,a0,a5
    19c8:	00a7b533          	sltu	a0,a5,a0
    19cc:	00e50533          	add	a0,a0,a4
	r[1] = 0xffffffff;
    19d0:	80001737          	lui	a4,0x80001
    19d4:	02d72623          	sw	a3,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    19d8:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    19dc:	02a72623          	sw	a0,44(a4)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    19e0:	00700513          	li	a0,7
    19e4:	df1ff0ef          	jal	ra,17d4 <arch_irq_enable>
	return 0;
}
    19e8:	00c12083          	lw	ra,12(sp)
    19ec:	00812403          	lw	s0,8(sp)
    19f0:	00000513          	li	a0,0
    19f4:	01010113          	addi	sp,sp,16
    19f8:	00008067          	ret

000019fc <z_clock_set_timeout>:
	}

	set_mtimecmp(cyc + last_count);
	k_spin_unlock(&lock, key);
#endif
}
    19fc:	00008067          	ret

00001a00 <z_clock_elapsed>:
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;

	k_spin_unlock(&lock, key);
	return ret;
}
    1a00:	00000513          	li	a0,0
    1a04:	00008067          	ret

00001a08 <arch_cpu_idle>:
    1a08:	00800793          	li	a5,8
    1a0c:	3007a7f3          	csrrs	a5,mstatus,a5
 */

void __weak arch_cpu_idle(void)
{
	irq_unlock(MSTATUS_IEN);
}
    1a10:	00008067          	ret

00001a14 <z_riscv_fatal_error>:
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf)
{
    1a14:	ff010113          	addi	sp,sp,-16
    1a18:	00112623          	sw	ra,12(sp)
			esf->a2, esf->a3, esf->a4, esf->a5);
		LOG_ERR("  a6: 0x%08lx  a7: 0x%08lx\n",
			esf->a6, esf->a7);
	}

	z_fatal_error(reason, esf);
    1a1c:	7ac000ef          	jal	ra,21c8 <z_fatal_error>

00001a20 <_Fault>:
		return "unknown";
	}
}

FUNC_NORETURN void _Fault(const z_arch_esf_t *esf)
{
    1a20:	ff010113          	addi	sp,sp,-16
    1a24:	00112623          	sw	ra,12(sp)
    1a28:	00050593          	mv	a1,a0
	ulong_t mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    1a2c:	342027f3          	csrr	a5,mcause
	z_fatal_error(reason, esf);
    1a30:	00000513          	li	a0,0
    1a34:	794000ef          	jal	ra,21c8 <z_fatal_error>

00001a38 <z_irq_spurious>:
#include <kernel_internal.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
    1a38:	ff010113          	addi	sp,sp,-16
    1a3c:	00112623          	sw	ra,12(sp)
	ulong_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    1a40:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    1a44:	00000593          	li	a1,0
    1a48:	00100513          	li	a0,1
    1a4c:	fc9ff0ef          	jal	ra,1a14 <z_riscv_fatal_error>

00001a50 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    1a50:	ff010113          	addi	sp,sp,-16
    1a54:	00112623          	sw	ra,12(sp)
	z_bss_zero();
    1a58:	7cc000ef          	jal	ra,2224 <z_bss_zero>
#ifdef CONFIG_XIP
	z_data_copy();
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
    1a5c:	b15ff0ef          	jal	ra,1570 <soc_interrupt_init>
#endif
	z_cstart();
    1a60:	04d000ef          	jal	ra,22ac <z_cstart>

00001a64 <__initialize>:
SECTION_FUNC(TEXT, __initialize)
	/*
	 * This will boot master core, just halt other cores.
	 * Note: need to be updated for complete SMP support
	 */
	csrr a0, mhartid
    1a64:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_master_core
    1a68:	00050663          	beqz	a0,1a74 <boot_master_core>

00001a6c <loop_slave_core>:

loop_slave_core:
	wfi
    1a6c:	10500073          	wfi
	j loop_slave_core
    1a70:	ffdff06f          	j	1a6c <loop_slave_core>

00001a74 <boot_master_core>:

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + CONFIG_ISR_STACK_SIZE
	 */
	la sp, z_interrupt_stacks
    1a74:	00002117          	auipc	sp,0x2
    1a78:	40c10113          	addi	sp,sp,1036 # 3e80 <z_interrupt_stacks>
	li t0, CONFIG_ISR_STACK_SIZE
    1a7c:	000012b7          	lui	t0,0x1
    1a80:	80028293          	addi	t0,t0,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
	add sp, sp, t0
    1a84:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
    1a88:	fc9ff0ef          	jal	ra,1a50 <_PrepC>

00001a8c <z_thread_entry_wrapper>:
	 * in registers a0, a1, a2 and a3. These registers are used as arguments
	 * to function z_thread_entry. Hence, just call z_thread_entry with
	 * return address set to 0 to indicate a non-returning function call.
	 */

	jal x0, z_thread_entry
    1a8c:	f38ff06f          	j	11c4 <z_thread_entry>

00001a90 <arch_new_thread>:
	stack_init = Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr);

	/* Setup the initial stack frame */
	stack_init->a0 = (ulong_t)entry;
	stack_init->a1 = (ulong_t)p1;
	stack_init->a2 = (ulong_t)p2;
    1a90:	fef62023          	sw	a5,-32(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry_wrapper, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
    1a94:	000027b7          	lui	a5,0x2
    1a98:	88078793          	addi	a5,a5,-1920 # 1880 <timer_isr+0x78>
    1a9c:	fef62e23          	sw	a5,-4(a2)
	if ((thread->base.user_options & K_FP_REGS) != 0) {
		stack_init->mstatus |= MSTATUS_FS_INIT;
	}
	stack_init->fp_state = 0;
#endif
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    1aa0:	000027b7          	lui	a5,0x2
    1aa4:	a8c78793          	addi	a5,a5,-1396 # 1a8c <z_thread_entry_wrapper>
	stack_init->a0 = (ulong_t)entry;
    1aa8:	fcd62c23          	sw	a3,-40(a2)
	stack_init->a1 = (ulong_t)p1;
    1aac:	fce62e23          	sw	a4,-36(a2)
	stack_init->a3 = (ulong_t)p3;
    1ab0:	ff062223          	sw	a6,-28(a2)
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    1ab4:	fef62c23          	sw	a5,-8(a2)
	stack_init = Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr);
    1ab8:	fb060613          	addi	a2,a2,-80

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (ulong_t)stack_init;
    1abc:	02c52c23          	sw	a2,56(a0)
}
    1ac0:	00008067          	ret

00001ac4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1ac4:	00054783          	lbu	a5,0(a0)
    1ac8:	0005c703          	lbu	a4,0(a1)
    1acc:	00e79463          	bne	a5,a4,1ad4 <strcmp+0x10>
    1ad0:	00079663          	bnez	a5,1adc <strcmp+0x18>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1ad4:	40e78533          	sub	a0,a5,a4
    1ad8:	00008067          	ret
		s1++;
    1adc:	00150513          	addi	a0,a0,1
		s2++;
    1ae0:	00158593          	addi	a1,a1,1
    1ae4:	fe1ff06f          	j	1ac4 <strcmp>

00001ae8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1ae8:	0ff5f693          	andi	a3,a1,255
	unsigned char *d_byte = (unsigned char *)buf;
    1aec:	00050793          	mv	a5,a0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    1af0:	0037f713          	andi	a4,a5,3
    1af4:	04071863          	bnez	a4,1b44 <memset+0x5c>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    1af8:	0ff5f593          	andi	a1,a1,255

	c_word |= c_word << 8;
    1afc:	00859713          	slli	a4,a1,0x8
    1b00:	00b765b3          	or	a1,a4,a1
	c_word |= c_word << 16;
    1b04:	01059713          	slli	a4,a1,0x10
    1b08:	00b765b3          	or	a1,a4,a1
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    1b0c:	00c78333          	add	t1,a5,a2
    1b10:	00078713          	mv	a4,a5
    1b14:	00300813          	li	a6,3
    1b18:	40e308b3          	sub	a7,t1,a4
    1b1c:	03186e63          	bltu	a6,a7,1b58 <memset+0x70>
    1b20:	ffc67593          	andi	a1,a2,-4
    1b24:	00265713          	srli	a4,a2,0x2
    1b28:	00b787b3          	add	a5,a5,a1
    1b2c:	ffc00593          	li	a1,-4
    1b30:	02b70733          	mul	a4,a4,a1
    1b34:	00c70633          	add	a2,a4,a2
    1b38:	00c78633          	add	a2,a5,a2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1b3c:	02c79463          	bne	a5,a2,1b64 <memset+0x7c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1b40:	00008067          	ret
		if (n == 0) {
    1b44:	fe060ee3          	beqz	a2,1b40 <memset+0x58>
		*(d_byte++) = c_byte;
    1b48:	00178793          	addi	a5,a5,1
		n--;
    1b4c:	fff60613          	addi	a2,a2,-1
		*(d_byte++) = c_byte;
    1b50:	fed78fa3          	sb	a3,-1(a5)
		n--;
    1b54:	f9dff06f          	j	1af0 <memset+0x8>
		*(d_word++) = c_word;
    1b58:	00470713          	addi	a4,a4,4
    1b5c:	feb72e23          	sw	a1,-4(a4)
		n -= sizeof(mem_word_t);
    1b60:	fb9ff06f          	j	1b18 <memset+0x30>
		*(d_byte++) = c_byte;
    1b64:	00178793          	addi	a5,a5,1
    1b68:	fed78fa3          	sb	a3,-1(a5)
		n--;
    1b6c:	fd1ff06f          	j	1b3c <memset+0x54>

00001b70 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    1b70:	fff00513          	li	a0,-1
    1b74:	00008067          	ret

00001b78 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b78:	000037b7          	lui	a5,0x3
    1b7c:	6aa7aa23          	sw	a0,1716(a5) # 36b4 <_stdout_hook>
}
    1b80:	00008067          	ret

00001b84 <gpio_mmio32_config>:

static int gpio_mmio32_config(const struct device *dev,
			      gpio_pin_t pin, gpio_flags_t flags)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    1b84:	00c52783          	lw	a5,12(a0)
    1b88:	0047a683          	lw	a3,4(a5)

	if ((config->mask & (1 << pin)) == 0) {
    1b8c:	00100793          	li	a5,1
    1b90:	00b795b3          	sll	a1,a5,a1
    1b94:	0086a783          	lw	a5,8(a3)
    1b98:	00f5f7b3          	and	a5,a1,a5
    1b9c:	06078c63          	beqz	a5,1c14 <gpio_mmio32_config+0x90>
		return -EINVAL; /* Pin not in our validity mask */
	}

	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    1ba0:	fffff7b7          	lui	a5,0xfffff
    1ba4:	0fe78793          	addi	a5,a5,254 # fffff0fe <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff0ff>
    1ba8:	00f677b3          	and	a5,a2,a5
		      GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH |
		      GPIO_ACTIVE_LOW)) {
		/* We ignore direction and fake polarity, rest is unsupported */
		return -ENOTSUP;
    1bac:	fdd00513          	li	a0,-35
	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    1bb0:	06079463          	bnez	a5,1c18 <gpio_mmio32_config+0x94>
	}

	if ((flags & GPIO_OUTPUT) != 0) {
    1bb4:	20067793          	andi	a5,a2,512
			*reg = (*reg & (config->mask & ~(1 << pin)));
		}
		irq_unlock(key);
	}

	return 0;
    1bb8:	00000513          	li	a0,0
	if ((flags & GPIO_OUTPUT) != 0) {
    1bbc:	04078e63          	beqz	a5,1c18 <gpio_mmio32_config+0x94>
		volatile uint32_t *reg = config->reg;
    1bc0:	0046a703          	lw	a4,4(a3)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1bc4:	00800793          	li	a5,8
    1bc8:	3007b7f3          	csrrc	a5,mstatus,a5
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1bcc:	00b65513          	srli	a0,a2,0xb
    1bd0:	00157513          	andi	a0,a0,1
	key = (mstatus & MSTATUS_IEN);
    1bd4:	0087f793          	andi	a5,a5,8
    1bd8:	00050e63          	beqz	a0,1bf4 <gpio_mmio32_config+0x70>
			*reg = (*reg | (1 << pin));
    1bdc:	00072683          	lw	a3,0(a4)
    1be0:	00d5e5b3          	or	a1,a1,a3
			*reg = (*reg & (config->mask & ~(1 << pin)));
    1be4:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1be8:	3007a7f3          	csrrs	a5,mstatus,a5
	return 0;
    1bec:	00000513          	li	a0,0
			  : "=r" (mstatus)
			  : "r" (key & MSTATUS_IEN)
			  : "memory");
}
    1bf0:	00008067          	ret
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1bf4:	40067613          	andi	a2,a2,1024
    1bf8:	fe0608e3          	beqz	a2,1be8 <gpio_mmio32_config+0x64>
			*reg = (*reg & (config->mask & ~(1 << pin)));
    1bfc:	0086a683          	lw	a3,8(a3)
    1c00:	00072603          	lw	a2,0(a4)
    1c04:	fff5c593          	not	a1,a1
    1c08:	00d5f5b3          	and	a1,a1,a3
    1c0c:	00c5f5b3          	and	a1,a1,a2
    1c10:	fd5ff06f          	j	1be4 <gpio_mmio32_config+0x60>
		return -EINVAL; /* Pin not in our validity mask */
    1c14:	fea00513          	li	a0,-22
}
    1c18:	00008067          	ret

00001c1c <gpio_mmio32_port_get_raw>:

static int gpio_mmio32_port_get_raw(const struct device *dev, uint32_t *value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    1c1c:	00c52783          	lw	a5,12(a0)

	*value = *config->reg & config->mask;

	return 0;
}
    1c20:	00000513          	li	a0,0
	const struct gpio_mmio32_config *config = context->config;
    1c24:	0047a703          	lw	a4,4(a5)
	*value = *config->reg & config->mask;
    1c28:	00472783          	lw	a5,4(a4)
    1c2c:	0007a683          	lw	a3,0(a5)
    1c30:	00872783          	lw	a5,8(a4)
    1c34:	00d7f7b3          	and	a5,a5,a3
    1c38:	00f5a023          	sw	a5,0(a1)
}
    1c3c:	00008067          	ret

00001c40 <gpio_mmio32_port_set_masked_raw>:
static int gpio_mmio32_port_set_masked_raw(const struct device *dev,
					   uint32_t mask,
					   uint32_t value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    1c40:	00c52783          	lw	a5,12(a0)
    1c44:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    1c48:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    1c4c:	0087a783          	lw	a5,8(a5)
    1c50:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1c54:	00800793          	li	a5,8
    1c58:	3007b7f3          	csrrc	a5,mstatus,a5
	value &= mask;

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask) | value;
    1c5c:	00072683          	lw	a3,0(a4)
	key = (mstatus & MSTATUS_IEN);
    1c60:	0087f793          	andi	a5,a5,8
    1c64:	00c6c633          	xor	a2,a3,a2
    1c68:	00b67633          	and	a2,a2,a1
    1c6c:	00d64633          	xor	a2,a2,a3
    1c70:	00c72023          	sw	a2,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1c74:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    1c78:	00000513          	li	a0,0
    1c7c:	00008067          	ret

00001c80 <gpio_mmio32_port_set_bits_raw>:

static int gpio_mmio32_port_set_bits_raw(const struct device *dev,
					 uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    1c80:	00c52783          	lw	a5,12(a0)
    1c84:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    1c88:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    1c8c:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1c90:	00800793          	li	a5,8
	mask &= config->mask;
    1c94:	00e5f733          	and	a4,a1,a4
    1c98:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg | mask);
    1c9c:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    1ca0:	0087f793          	andi	a5,a5,8
    1ca4:	00e5e5b3          	or	a1,a1,a4
    1ca8:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1cac:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    1cb0:	00000513          	li	a0,0
    1cb4:	00008067          	ret

00001cb8 <gpio_mmio32_port_clear_bits_raw>:

static int gpio_mmio32_port_clear_bits_raw(const struct device *dev,
					   uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    1cb8:	00c52783          	lw	a5,12(a0)
    1cbc:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    1cc0:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    1cc4:	0087a783          	lw	a5,8(a5)
    1cc8:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1ccc:	00800793          	li	a5,8
    1cd0:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask);
    1cd4:	00072683          	lw	a3,0(a4)
    1cd8:	fff5c593          	not	a1,a1
	key = (mstatus & MSTATUS_IEN);
    1cdc:	0087f793          	andi	a5,a5,8
    1ce0:	00d5f5b3          	and	a1,a1,a3
    1ce4:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1ce8:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    1cec:	00000513          	li	a0,0
    1cf0:	00008067          	ret

00001cf4 <gpio_mmio32_port_toggle_bits>:

static int gpio_mmio32_port_toggle_bits(const struct device *dev,
					uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    1cf4:	00c52783          	lw	a5,12(a0)
    1cf8:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    1cfc:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    1d00:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1d04:	00800793          	li	a5,8
	mask &= config->mask;
    1d08:	00e5f733          	and	a4,a1,a4
    1d0c:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg ^ mask);
    1d10:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    1d14:	0087f793          	andi	a5,a5,8
    1d18:	00e5c5b3          	xor	a1,a1,a4
    1d1c:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1d20:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    1d24:	00000513          	li	a0,0
    1d28:	00008067          	ret

00001d2c <gpio_mmio32_pin_interrupt_configure>:
static int gpio_mmio32_pin_interrupt_configure(const struct device *dev,
					       gpio_pin_t pin,
					       enum gpio_int_mode mode,
					       enum gpio_int_trig trig)
{
	if (mode != GPIO_INT_MODE_DISABLED) {
    1d2c:	000027b7          	lui	a5,0x2
		return -ENOTSUP;
	}

	return 0;
    1d30:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    1d34:	00f60463          	beq	a2,a5,1d3c <gpio_mmio32_pin_interrupt_configure+0x10>
		return -ENOTSUP;
    1d38:	fdd00513          	li	a0,-35
}
    1d3c:	00008067          	ret

00001d40 <gpio_mmio32_init>:
int gpio_mmio32_init(const struct device *dev)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = dev->config;

	context->config = config;
    1d40:	00c52783          	lw	a5,12(a0)
    1d44:	00452703          	lw	a4,4(a0)

	return 0;
}
    1d48:	00000513          	li	a0,0
	context->config = config;
    1d4c:	00e7a223          	sw	a4,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
}
    1d50:	00008067          	ret

00001d54 <gpio_swervolf_init>:
/* Driver functions */

static int gpio_swervolf_init(const struct device *dev)
{
	return 0;
}
    1d54:	00000513          	li	a0,0
    1d58:	00008067          	ret

00001d5c <gpio_swervolf_configure>:

static int gpio_swervolf_configure(const struct device *dev,
				gpio_pin_t pin, gpio_flags_t flags)
{
	return 0;
}
    1d5c:	00000513          	li	a0,0
    1d60:	00008067          	ret

00001d64 <gpio_swervolf_port_get_raw>:

static int gpio_swervolf_port_get_raw(const struct device *dev,
				   gpio_port_value_t *value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1d64:	00452783          	lw	a5,4(a0)

	*value = sys_read32(addr);
	return 0;
}
    1d68:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1d6c:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    1d70:	0007a783          	lw	a5,0(a5)
	*value = sys_read32(addr);
    1d74:	00f5a023          	sw	a5,0(a1)
}
    1d78:	00008067          	ret

00001d7c <gpio_swervolf_port_set_masked_raw>:

static int gpio_swervolf_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1d7c:	00452783          	lw	a5,4(a0)
	port_val = sys_read32(addr);
	port_val = (port_val & ~mask) | (value & mask);
	sys_write32(port_val, addr);

	return 0;
}
    1d80:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1d84:	0007a783          	lw	a5,0(a5)
    1d88:	0007a703          	lw	a4,0(a5)
	port_val = (port_val & ~mask) | (value & mask);
    1d8c:	00e64633          	xor	a2,a2,a4
    1d90:	00b67633          	and	a2,a2,a1
    1d94:	00e64633          	xor	a2,a2,a4
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1d98:	00c7a023          	sw	a2,0(a5)
}
    1d9c:	00008067          	ret

00001da0 <gpio_swervolf_port_set_bits_raw>:

static int gpio_swervolf_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1da0:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) | pins;
	sys_write32(port_val, addr);

	return 0;
}
    1da4:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1da8:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    1dac:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) | pins;
    1db0:	00e5e5b3          	or	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    1db4:	00b7a023          	sw	a1,0(a5)
}
    1db8:	00008067          	ret

00001dbc <gpio_swervolf_port_clear_bits_raw>:

static int gpio_swervolf_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1dbc:	00452783          	lw	a5,4(a0)
	uint32_t port_val;

	port_val = sys_read32(addr) & ~pins;
    1dc0:	fff5c593          	not	a1,a1
	sys_write32(port_val, addr);

	return 0;
}
    1dc4:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1dc8:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    1dcc:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) & ~pins;
    1dd0:	00e5f5b3          	and	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    1dd4:	00b7a023          	sw	a1,0(a5)
}
    1dd8:	00008067          	ret

00001ddc <gpio_swervolf_port_toggle_bits>:

static int gpio_swervolf_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1ddc:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) ^ pins;
	sys_write32(port_val, addr);

	return 0;
}
    1de0:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    1de4:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    1de8:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) ^ pins;
    1dec:	00e5c5b3          	xor	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    1df0:	00b7a023          	sw	a1,0(a5)
}
    1df4:	00008067          	ret

00001df8 <gpio_swervolf_pin_interrupt_configure>:
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
	int ret = 0;

	if (mode != GPIO_INT_MODE_DISABLED) {
    1df8:	000027b7          	lui	a5,0x2
	int ret = 0;
    1dfc:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    1e00:	00f60463          	beq	a2,a5,1e08 <gpio_swervolf_pin_interrupt_configure+0x10>
		ret = -ENOTSUP;
    1e04:	fdd00513          	li	a0,-35
	}
	return ret;
}
    1e08:	00008067          	ret

00001e0c <uart_ns16550_configure>:
}

static int uart_ns16550_configure(const struct device *dev,
				  const struct uart_config *cfg)
{
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
    1e0c:	00c52883          	lw	a7,12(a0)
{
    1e10:	00050793          	mv	a5,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1e14:	00800693          	li	a3,8
    1e18:	3006b6f3          	csrrc	a3,mstatus,a3
		OUTWORD(PCP(dev), pcp & ~PCP_UPDATE);
		OUTWORD(PCP(dev), pcp | PCP_UPDATE);
	}
#endif

	set_baud_rate(dev, cfg->baudrate);
    1e1c:	0005a503          	lw	a0,0(a1)
	key = (mstatus & MSTATUS_IEN);
    1e20:	0086f693          	andi	a3,a3,8
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    1e24:	06050863          	beqz	a0,1e94 <uart_ns16550_configure+0x88>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
    1e28:	0047a603          	lw	a2,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    1e2c:	00462803          	lw	a6,4(a2)
    1e30:	06080263          	beqz	a6,1e94 <uart_ns16550_configure+0x88>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    1e34:	00351713          	slli	a4,a0,0x3
    1e38:	01070733          	add	a4,a4,a6
					/ baud_rate) >> 4;
    1e3c:	02a75733          	divu	a4,a4,a0
		lcr_cache = INBYTE(LCR(dev));
    1e40:	00062803          	lw	a6,0(a2)
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
    1e44:	00c7a303          	lw	t1,12(a5)
	return *(volatile uint8_t *)addr;
    1e48:	00c84603          	lbu	a2,12(a6)
    1e4c:	0ff67e13          	andi	t3,a2,255
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
    1e50:	f8066613          	ori	a2,a2,-128
    1e54:	0ff67613          	andi	a2,a2,255
	*(volatile uint8_t *)addr = data;
    1e58:	00c80623          	sb	a2,12(a6)
	return DEVICE_MMIO_GET(dev);
    1e5c:	0047a803          	lw	a6,4(a5)
    1e60:	00082803          	lw	a6,0(a6)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    1e64:	00475613          	srli	a2,a4,0x4
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
    1e68:	0ff67613          	andi	a2,a2,255
    1e6c:	00c80023          	sb	a2,0(a6)
	return DEVICE_MMIO_GET(dev);
    1e70:	0047a603          	lw	a2,4(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    1e74:	00c75713          	srli	a4,a4,0xc
    1e78:	0ff77713          	andi	a4,a4,255
    1e7c:	00062603          	lw	a2,0(a2)
    1e80:	00e60223          	sb	a4,4(a2)
	return DEVICE_MMIO_GET(dev);
    1e84:	0047a703          	lw	a4,4(a5)
		OUTBYTE(LCR(dev), lcr_cache);
    1e88:	00072703          	lw	a4,0(a4)
    1e8c:	01c70623          	sb	t3,12(a4)
		dev_data->uart_config.baudrate = baud_rate;
    1e90:	00a32023          	sw	a0,0(t1)

	/* Local structure to hold temporary values to pass to OUTBYTE() */
	struct uart_config uart_cfg;

	switch (cfg->data_bits) {
    1e94:	0065c603          	lbu	a2,6(a1)
    1e98:	00300713          	li	a4,3
		break;
	case UART_CFG_DATA_BITS_8:
		uart_cfg.data_bits = LCR_CS8;
		break;
	default:
		ret = -ENOTSUP;
    1e9c:	fdd00513          	li	a0,-35
    1ea0:	08c76663          	bltu	a4,a2,1f2c <uart_ns16550_configure+0x120>
		goto out;
	}

	switch (cfg->stop_bits) {
    1ea4:	0055c803          	lbu	a6,5(a1)
    1ea8:	00100513          	li	a0,1
    1eac:	08a80463          	beq	a6,a0,1f34 <uart_ns16550_configure+0x128>
    1eb0:	fdd00513          	li	a0,-35
    1eb4:	06e81c63          	bne	a6,a4,1f2c <uart_ns16550_configure+0x120>
    1eb8:	00400813          	li	a6,4
	default:
		ret = -ENOTSUP;
		goto out;
	}

	switch (cfg->parity) {
    1ebc:	0045c703          	lbu	a4,4(a1)
    1ec0:	00070a63          	beqz	a4,1ed4 <uart_ns16550_configure+0xc8>
    1ec4:	00200313          	li	t1,2
    1ec8:	fdd00513          	li	a0,-35
    1ecc:	06671063          	bne	a4,t1,1f2c <uart_ns16550_configure+0x120>
    1ed0:	01000713          	li	a4,16
	default:
		ret = -ENOTSUP;
		goto out;
	}

	dev_data->uart_config = *cfg;
    1ed4:	0005a503          	lw	a0,0(a1)

	/* data bits, stop bits, parity, clear DLAB */
	OUTBYTE(LCR(dev),
    1ed8:	01066633          	or	a2,a2,a6
    1edc:	00c76733          	or	a4,a4,a2
	return DEVICE_MMIO_GET(dev);
    1ee0:	0047a603          	lw	a2,4(a5)
	dev_data->uart_config = *cfg;
    1ee4:	00a8a023          	sw	a0,0(a7)
    1ee8:	0045a583          	lw	a1,4(a1)
	OUTBYTE(LCR(dev),
    1eec:	00062603          	lw	a2,0(a2)
	int ret = 0;
    1ef0:	00000513          	li	a0,0
	dev_data->uart_config = *cfg;
    1ef4:	00b8a223          	sw	a1,4(a7)
    1ef8:	00e60623          	sb	a4,12(a2)
	return DEVICE_MMIO_GET(dev);
    1efc:	0047a703          	lw	a4,4(a5)
    1f00:	00b00613          	li	a2,11
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS) {
		mdc |= MCR_AFCE;
	}
#endif

	OUTBYTE(MDC(dev), mdc);
    1f04:	00072703          	lw	a4,0(a4)
    1f08:	00c70823          	sb	a2,16(a4)
	return DEVICE_MMIO_GET(dev);
    1f0c:	0047a703          	lw	a4,4(a5)
    1f10:	f8700613          	li	a2,-121
	/*
	 * Program FIFO: enabled, mode 0 (set for compatibility with quark),
	 * generate the interrupt at 8th byte
	 * Clear TX and RX FIFO
	 */
	OUTBYTE(FCR(dev),
    1f14:	00072703          	lw	a4,0(a4)
    1f18:	00c70423          	sb	a2,8(a4)
	return DEVICE_MMIO_GET(dev);
    1f1c:	0047a783          	lw	a5,4(a5)
    1f20:	0007a783          	lw	a5,0(a5)
	return *(volatile uint8_t *)addr;
    1f24:	0007c703          	lbu	a4,0(a5)
	*(volatile uint8_t *)addr = data;
    1f28:	00078223          	sb	zero,4(a5)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1f2c:	3006a6f3          	csrrs	a3,mstatus,a3
	OUTBYTE(IER(dev), 0x00);

out:
	k_spin_unlock(&dev_data->lock, key);
	return ret;
};
    1f30:	00008067          	ret
		uart_cfg.stop_bits = LCR_1_STB;
    1f34:	00000813          	li	a6,0
    1f38:	f85ff06f          	j	1ebc <uart_ns16550_configure+0xb0>

00001f3c <uart_ns16550_config_get>:

static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data_t *data = DEV_DATA(dev);
    1f3c:	00c52783          	lw	a5,12(a0)
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
    1f40:	00000513          	li	a0,0
	cfg->baudrate = data->uart_config.baudrate;
    1f44:	0007a703          	lw	a4,0(a5)
    1f48:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
    1f4c:	0047c703          	lbu	a4,4(a5)
    1f50:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
    1f54:	0057c703          	lbu	a4,5(a5)
    1f58:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
    1f5c:	0067c703          	lbu	a4,6(a5)
    1f60:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
    1f64:	0077c783          	lbu	a5,7(a5)
    1f68:	00f583a3          	sb	a5,7(a1)
}
    1f6c:	00008067          	ret

00001f70 <uart_ns16550_init>:
 */
static int uart_ns16550_init(const struct device *dev)
{
	int ret;

	ret = uart_ns16550_configure(dev, &DEV_DATA(dev)->uart_config);
    1f70:	00c52583          	lw	a1,12(a0)
    1f74:	e99ff06f          	j	1e0c <uart_ns16550_configure>

00001f78 <uart_ns16550_poll_in>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1f78:	00800793          	li	a5,8
    1f7c:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    1f80:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    1f84:	0087f793          	andi	a5,a5,8
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
	int ret = -1;
    1f88:	fff00513          	li	a0,-1
	return DEVICE_MMIO_GET(dev);
    1f8c:	00072683          	lw	a3,0(a4)
	return *(volatile uint8_t *)addr;
    1f90:	0146c703          	lbu	a4,20(a3)
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
    1f94:	00177713          	andi	a4,a4,1
    1f98:	00070863          	beqz	a4,1fa8 <uart_ns16550_poll_in+0x30>
    1f9c:	0006c703          	lbu	a4,0(a3)
		/* got a character */
		*c = INBYTE(RDR(dev));
		ret = 0;
    1fa0:	00000513          	li	a0,0
		*c = INBYTE(RDR(dev));
    1fa4:	00e58023          	sb	a4,0(a1)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1fa8:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return ret;
}
    1fac:	00008067          	ret

00001fb0 <uart_ns16550_poll_out>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1fb0:	00800793          	li	a5,8
    1fb4:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    1fb8:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    1fbc:	0087f793          	andi	a5,a5,8
    1fc0:	00072683          	lw	a3,0(a4)
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
    1fc4:	01468613          	addi	a2,a3,20
    1fc8:	00064703          	lbu	a4,0(a2)
    1fcc:	02077713          	andi	a4,a4,32
    1fd0:	fe070ce3          	beqz	a4,1fc8 <uart_ns16550_poll_out+0x18>
	*(volatile uint8_t *)addr = data;
    1fd4:	00b68023          	sb	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1fd8:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
}
    1fdc:	00008067          	ret

00001fe0 <uart_ns16550_err_check>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    1fe0:	00800793          	li	a5,8
    1fe4:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    1fe8:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    1fec:	0087f793          	andi	a5,a5,8
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    1ff0:	00072703          	lw	a4,0(a4)
	return *(volatile uint8_t *)addr;
    1ff4:	01474503          	lbu	a0,20(a4)
    1ff8:	0ff57513          	andi	a0,a0,255
	__asm__ volatile ("csrrs %0, mstatus, %1"
    1ffc:	3007a7f3          	csrrs	a5,mstatus,a5
    2000:	01e57513          	andi	a0,a0,30

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return check >> 1;
}
    2004:	00155513          	srli	a0,a0,0x1
    2008:	00008067          	ret

0000200c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    200c:	00251713          	slli	a4,a0,0x2
    2010:	000037b7          	lui	a5,0x3
    2014:	00150513          	addi	a0,a0,1
    2018:	65c78793          	addi	a5,a5,1628 # 365c <levels.0>
    201c:	00251513          	slli	a0,a0,0x2
{
    2020:	fe010113          	addi	sp,sp,-32
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2024:	00e78733          	add	a4,a5,a4
    2028:	00a78533          	add	a0,a5,a0
{
    202c:	00912a23          	sw	s1,20(sp)
    2030:	01412423          	sw	s4,8(sp)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2034:	00072483          	lw	s1,0(a4)
    2038:	00052a03          	lw	s4,0(a0)
{
    203c:	01212823          	sw	s2,16(sp)
    2040:	01312623          	sw	s3,12(sp)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    2044:	00003937          	lui	s2,0x3
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2048:	000039b7          	lui	s3,0x3
{
    204c:	01512223          	sw	s5,4(sp)
    2050:	00112e23          	sw	ra,28(sp)
    2054:	00812c23          	sw	s0,24(sp)
				(dev - __device_start));
    2058:	6cc90913          	addi	s2,s2,1740 # 36cc <__device_led0>
    205c:	70c98993          	addi	s3,s3,1804 # 370c <__device_APPLICATION_start>
	*(volatile uint32_t *)addr = temp | (1 << bit);
    2060:	00100a93          	li	s5,1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2064:	0344e463          	bltu	s1,s4,208c <z_sys_init_run_level+0x80>
		}
	}
}
    2068:	01c12083          	lw	ra,28(sp)
    206c:	01812403          	lw	s0,24(sp)
    2070:	01412483          	lw	s1,20(sp)
    2074:	01012903          	lw	s2,16(sp)
    2078:	00c12983          	lw	s3,12(sp)
    207c:	00812a03          	lw	s4,8(sp)
    2080:	00412a83          	lw	s5,4(sp)
    2084:	02010113          	addi	sp,sp,32
    2088:	00008067          	ret
		const struct device *dev = entry->dev;
    208c:	0044a403          	lw	s0,4(s1)
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    2090:	0004a783          	lw	a5,0(s1)
    2094:	00040513          	mv	a0,s0
    2098:	000780e7          	jalr	a5
    209c:	02050663          	beqz	a0,20c8 <z_sys_init_run_level+0xbc>
    20a0:	02040463          	beqz	s0,20c8 <z_sys_init_run_level+0xbc>
				(dev - __device_start));
    20a4:	41240433          	sub	s0,s0,s2
    20a8:	40445413          	srai	s0,s0,0x4
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    20ac:	00545793          	srli	a5,s0,0x5
    20b0:	00279793          	slli	a5,a5,0x2
    20b4:	013787b3          	add	a5,a5,s3
	uint32_t temp = *(volatile uint32_t *)addr;
    20b8:	0007a703          	lw	a4,0(a5)
	*(volatile uint32_t *)addr = temp | (1 << bit);
    20bc:	008a9433          	sll	s0,s5,s0
    20c0:	00e46433          	or	s0,s0,a4
    20c4:	0087a023          	sw	s0,0(a5)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    20c8:	00848493          	addi	s1,s1,8
    20cc:	f99ff06f          	j	2064 <z_sys_init_run_level+0x58>

000020d0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    20d0:	000037b7          	lui	a5,0x3
    20d4:	6cc78793          	addi	a5,a5,1740 # 36cc <__device_led0>
    20d8:	40f50533          	sub	a0,a0,a5
    20dc:	40455513          	srai	a0,a0,0x4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    20e0:	00555793          	srli	a5,a0,0x5
    20e4:	00003737          	lui	a4,0x3
    20e8:	70c70713          	addi	a4,a4,1804 # 370c <__device_APPLICATION_start>
    20ec:	00279793          	slli	a5,a5,0x2
    20f0:	00e787b3          	add	a5,a5,a4
	uint32_t temp = *(volatile uint32_t *)addr;
    20f4:	0007a703          	lw	a4,0(a5)
	return temp & (1 << bit);
    20f8:	00100793          	li	a5,1
    20fc:	00a79533          	sll	a0,a5,a0
    2100:	00e57533          	and	a0,a0,a4
}
    2104:	00153513          	seqz	a0,a0
    2108:	00008067          	ret

0000210c <z_impl_device_get_binding>:
{
    210c:	fe010113          	addi	sp,sp,-32
	for (dev = __device_start; dev != __device_end; dev++) {
    2110:	000037b7          	lui	a5,0x3
{
    2114:	00912a23          	sw	s1,20(sp)
	for (dev = __device_start; dev != __device_end; dev++) {
    2118:	000034b7          	lui	s1,0x3
{
    211c:	00812c23          	sw	s0,24(sp)
    2120:	01212823          	sw	s2,16(sp)
    2124:	01312623          	sw	s3,12(sp)
    2128:	00112e23          	sw	ra,28(sp)
    212c:	00050913          	mv	s2,a0
	for (dev = __device_start; dev != __device_end; dev++) {
    2130:	6cc78413          	addi	s0,a5,1740 # 36cc <__device_led0>
    2134:	6cc78993          	addi	s3,a5,1740
    2138:	70c48493          	addi	s1,s1,1804 # 370c <__device_APPLICATION_start>
    213c:	00941a63          	bne	s0,s1,2150 <z_impl_device_get_binding+0x44>
	for (dev = __device_start; dev != __device_end; dev++) {
    2140:	00098413          	mv	s0,s3
    2144:	02941463          	bne	s0,s1,216c <z_impl_device_get_binding+0x60>
	return NULL;
    2148:	00000413          	li	s0,0
    214c:	0440006f          	j	2190 <z_impl_device_get_binding+0x84>
		if (z_device_ready(dev) && (dev->name == name)) {
    2150:	00040513          	mv	a0,s0
    2154:	f7dff0ef          	jal	ra,20d0 <z_device_ready>
    2158:	00050663          	beqz	a0,2164 <z_impl_device_get_binding+0x58>
    215c:	00042783          	lw	a5,0(s0)
    2160:	03278863          	beq	a5,s2,2190 <z_impl_device_get_binding+0x84>
	for (dev = __device_start; dev != __device_end; dev++) {
    2164:	01040413          	addi	s0,s0,16
    2168:	fd5ff06f          	j	213c <z_impl_device_get_binding+0x30>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    216c:	00040513          	mv	a0,s0
    2170:	f61ff0ef          	jal	ra,20d0 <z_device_ready>
    2174:	00051663          	bnez	a0,2180 <z_impl_device_get_binding+0x74>
	for (dev = __device_start; dev != __device_end; dev++) {
    2178:	01040413          	addi	s0,s0,16
    217c:	fc9ff06f          	j	2144 <z_impl_device_get_binding+0x38>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2180:	00042583          	lw	a1,0(s0)
    2184:	00090513          	mv	a0,s2
    2188:	93dff0ef          	jal	ra,1ac4 <strcmp>
    218c:	fe0516e3          	bnez	a0,2178 <z_impl_device_get_binding+0x6c>
}
    2190:	01c12083          	lw	ra,28(sp)
    2194:	00040513          	mv	a0,s0
    2198:	01812403          	lw	s0,24(sp)
    219c:	01412483          	lw	s1,20(sp)
    21a0:	01012903          	lw	s2,16(sp)
    21a4:	00c12983          	lw	s3,12(sp)
    21a8:	02010113          	addi	sp,sp,32
    21ac:	00008067          	ret

000021b0 <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    21b0:	00800793          	li	a5,8
    21b4:	3007b7f3          	csrrc	a5,mstatus,a5
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    21b8:	0000006f          	j	21b8 <arch_system_halt+0x8>

000021bc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    21bc:	ff010113          	addi	sp,sp,-16
    21c0:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    21c4:	fedff0ef          	jal	ra,21b0 <arch_system_halt>

000021c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    21c8:	fe010113          	addi	sp,sp,-32
    21cc:	00812c23          	sw	s0,24(sp)
    21d0:	01212823          	sw	s2,16(sp)
    21d4:	00112e23          	sw	ra,28(sp)
    21d8:	00912a23          	sw	s1,20(sp)
    21dc:	00050913          	mv	s2,a0
    21e0:	00b12623          	sw	a1,12(sp)
    21e4:	00800413          	li	s0,8
    21e8:	30043473          	csrrc	s0,mstatus,s0
	return z_impl_k_current_get();
    21ec:	07d000ef          	jal	ra,2a68 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    21f0:	00c12583          	lw	a1,12(sp)
    21f4:	00050493          	mv	s1,a0
    21f8:	00090513          	mv	a0,s2
    21fc:	fc1ff0ef          	jal	ra,21bc <k_sys_fatal_error_handler>
	key = (mstatus & MSTATUS_IEN);
    2200:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2204:	30042473          	csrrs	s0,mstatus,s0
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    2208:	01812403          	lw	s0,24(sp)
    220c:	01c12083          	lw	ra,28(sp)
    2210:	01012903          	lw	s2,16(sp)
	z_impl_k_thread_abort(thread);
    2214:	00048513          	mv	a0,s1
    2218:	01412483          	lw	s1,20(sp)
    221c:	02010113          	addi	sp,sp,32
    2220:	1f10006f          	j	2c10 <z_impl_k_thread_abort>

00002224 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2224:	00003537          	lui	a0,0x3
    2228:	000047b7          	lui	a5,0x4
    222c:	71050613          	addi	a2,a0,1808 # 3710 <last_count>
    2230:	87478793          	addi	a5,a5,-1932 # 3874 <sched_spinlock>
    2234:	40c78633          	sub	a2,a5,a2
    2238:	00000593          	li	a1,0
    223c:	71050513          	addi	a0,a0,1808
    2240:	8a9ff06f          	j	1ae8 <memset>

00002244 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2244:	ff010113          	addi	sp,sp,-16
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    2248:	000037b7          	lui	a5,0x3
    224c:	00100713          	li	a4,1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2250:	00200513          	li	a0,2
{
    2254:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
    2258:	74e78023          	sb	a4,1856(a5) # 3740 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    225c:	db1ff0ef          	jal	ra,200c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    2260:	00003637          	lui	a2,0x3
    2264:	000035b7          	lui	a1,0x3
    2268:	00003537          	lui	a0,0x3
    226c:	54860613          	addi	a2,a2,1352 # 3548 <__clz_tab+0x120>
    2270:	67058593          	addi	a1,a1,1648 # 3670 <levels.0+0x14>
    2274:	68050513          	addi	a0,a0,1664 # 3680 <levels.0+0x24>
    2278:	f11fe0ef          	jal	ra,1188 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    227c:	00300513          	li	a0,3
    2280:	d8dff0ef          	jal	ra,200c <z_sys_init_run_level>

	z_init_static_threads();
    2284:	075000ef          	jal	ra,2af8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    2288:	98dfe0ef          	jal	ra,c14 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    228c:	000037b7          	lui	a5,0x3
    2290:	7c878793          	addi	a5,a5,1992 # 37c8 <z_main_thread>
    2294:	00c7c703          	lbu	a4,12(a5)
    2298:	ffe77713          	andi	a4,a4,-2
    229c:	00e78623          	sb	a4,12(a5)

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    22a0:	00c12083          	lw	ra,12(sp)
    22a4:	01010113          	addi	sp,sp,16
    22a8:	00008067          	ret

000022ac <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    22ac:	f5010113          	addi	sp,sp,-176
    22b0:	0a812423          	sw	s0,168(sp)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    22b4:	10100793          	li	a5,257
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    22b8:	00004437          	lui	s0,0x4
    22bc:	84840413          	addi	s0,s0,-1976 # 3848 <_kernel>
	dummy_thread->base.user_options = K_ESSENTIAL;
    22c0:	00f11e23          	sh	a5,28(sp)

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    22c4:	00000513          	li	a0,0
	_current_cpu->current = dummy_thread;
    22c8:	01010793          	addi	a5,sp,16
{
    22cc:	0a112623          	sw	ra,172(sp)
    22d0:	00f42423          	sw	a5,8(s0)
    22d4:	0a912223          	sw	s1,164(sp)
    22d8:	0b212023          	sw	s2,160(sp)
    22dc:	09312e23          	sw	s3,156(sp)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    22e0:	d2dff0ef          	jal	ra,200c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    22e4:	00100513          	li	a0,1
    22e8:	d25ff0ef          	jal	ra,200c <z_sys_init_run_level>
	z_sched_init();
    22ec:	75c000ef          	jal	ra,2a48 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    22f0:	000037b7          	lui	a5,0x3
	_kernel.ready_q.cache = &z_main_thread;
    22f4:	000034b7          	lui	s1,0x3
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    22f8:	00100993          	li	s3,1
    22fc:	6a878793          	addi	a5,a5,1704 # 36a8 <levels.0+0x4c>
    2300:	000026b7          	lui	a3,0x2
    2304:	000045b7          	lui	a1,0x4
	_kernel.ready_q.cache = &z_main_thread;
    2308:	7c848913          	addi	s2,s1,1992 # 37c8 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    230c:	00f12223          	sw	a5,4(sp)
    2310:	00000893          	li	a7,0
    2314:	00000813          	li	a6,0
    2318:	00000713          	li	a4,0
    231c:	24468693          	addi	a3,a3,580 # 2244 <bg_thread_main>
    2320:	40000613          	li	a2,1024
    2324:	88058593          	addi	a1,a1,-1920 # 3880 <z_main_stack>
    2328:	01312023          	sw	s3,0(sp)
    232c:	00000793          	li	a5,0
    2330:	7c848513          	addi	a0,s1,1992
	_kernel.ready_q.cache = &z_main_thread;
    2334:	03242023          	sw	s2,32(s0)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2338:	73c000ef          	jal	ra,2a74 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    233c:	00d94783          	lbu	a5,13(s2)
	z_ready_thread(&z_main_thread);
    2340:	7c848513          	addi	a0,s1,1992
    2344:	ffb7f793          	andi	a5,a5,-5
    2348:	00f906a3          	sb	a5,13(s2)
    234c:	3bc000ef          	jal	ra,2708 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2350:	00003537          	lui	a0,0x3
    2354:	000036b7          	lui	a3,0x3
    2358:	000045b7          	lui	a1,0x4
    235c:	74850493          	addi	s1,a0,1864 # 3748 <z_idle_threads>
    2360:	00012223          	sw	zero,4(sp)
    2364:	01312023          	sw	s3,0(sp)
    2368:	00f00893          	li	a7,15
    236c:	00000813          	li	a6,0
    2370:	00000793          	li	a5,0
    2374:	00000713          	li	a4,0
    2378:	14868693          	addi	a3,a3,328 # 3148 <idle>
    237c:	20000613          	li	a2,512
    2380:	c8058593          	addi	a1,a1,-896 # 3c80 <z_idle_stacks>
    2384:	74850513          	addi	a0,a0,1864
    2388:	6ec000ef          	jal	ra,2a74 <z_setup_new_thread>
    238c:	00d4c783          	lbu	a5,13(s1)
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2390:	00942623          	sw	s1,12(s0)
		_kernel.cpus[i].id = i;
    2394:	00040a23          	sb	zero,20(s0)
    2398:	ffb7f793          	andi	a5,a5,-5
    239c:	00f486a3          	sb	a5,13(s1)
		_kernel.cpus[i].irq_stack =
    23a0:	000047b7          	lui	a5,0x4
    23a4:	68078793          	addi	a5,a5,1664 # 4680 <_end>
    23a8:	00f42223          	sw	a5,4(s0)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    23ac:	000047b7          	lui	a5,0x4
    23b0:	86078793          	addi	a5,a5,-1952 # 3860 <_kernel+0x18>
    23b4:	00f42c23          	sw	a5,24(s0)
	list->tail = (sys_dnode_t *)list;
    23b8:	00f42e23          	sw	a5,28(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    23bc:	00800513          	li	a0,8
    23c0:	30053573          	csrrc	a0,mstatus,a0
	ret = arch_swap(key);
    23c4:	00857513          	andi	a0,a0,8
    23c8:	e91fd0ef          	jal	ra,258 <arch_swap>

000023cc <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    23cc:	00452703          	lw	a4,4(a0)
    23d0:	00052783          	lw	a5,0(a0)
    23d4:	00f72023          	sw	a5,0(a4)
	node->next->prev = node->prev;
    23d8:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    23dc:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    23e0:	00052223          	sw	zero,4(a0)
	sys_dnode_init(node);
}
    23e4:	00008067          	ret

000023e8 <unpend_thread_no_timeout>:

	return ret;
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
    23e8:	ff010113          	addi	sp,sp,-16
    23ec:	00812423          	sw	s0,8(sp)
    23f0:	00112623          	sw	ra,12(sp)
    23f4:	00050413          	mv	s0,a0
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    23f8:	fd5ff0ef          	jal	ra,23cc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    23fc:	00d44783          	lbu	a5,13(s0)
}
    2400:	00c12083          	lw	ra,12(sp)
	thread->base.pended_on = NULL;
    2404:	00042423          	sw	zero,8(s0)
    2408:	ffd7f793          	andi	a5,a5,-3
    240c:	00f406a3          	sb	a5,13(s0)
}
    2410:	00812403          	lw	s0,8(sp)
    2414:	01010113          	addi	sp,sp,16
    2418:	00008067          	ret

0000241c <z_reset_time_slice>:
{
    241c:	ff010113          	addi	sp,sp,-16
    2420:	00812423          	sw	s0,8(sp)
	if (slice_time != 0) {
    2424:	00003437          	lui	s0,0x3
    2428:	73840413          	addi	s0,s0,1848 # 3738 <slice_time>
    242c:	00042783          	lw	a5,0(s0)
{
    2430:	00112623          	sw	ra,12(sp)
	if (slice_time != 0) {
    2434:	02078863          	beqz	a5,2464 <z_reset_time_slice+0x48>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2438:	dc8ff0ef          	jal	ra,1a00 <z_clock_elapsed>
    243c:	00050793          	mv	a5,a0
    2440:	00042503          	lw	a0,0(s0)
}
    2444:	00812403          	lw	s0,8(sp)
    2448:	00c12083          	lw	ra,12(sp)
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    244c:	00f507b3          	add	a5,a0,a5
    2450:	00004737          	lui	a4,0x4
    2454:	84f72c23          	sw	a5,-1960(a4) # 3858 <_kernel+0x10>
		z_set_timeout_expiry(slice_time, false);
    2458:	00000593          	li	a1,0
}
    245c:	01010113          	addi	sp,sp,16
		z_set_timeout_expiry(slice_time, false);
    2460:	3550006f          	j	2fb4 <z_set_timeout_expiry>
}
    2464:	00c12083          	lw	ra,12(sp)
    2468:	00812403          	lw	s0,8(sp)
    246c:	01010113          	addi	sp,sp,16
    2470:	00008067          	ret

00002474 <k_sched_time_slice_set>:
{
    2474:	ff010113          	addi	sp,sp,-16
    2478:	00812423          	sw	s0,8(sp)
    247c:	00912223          	sw	s1,4(sp)
    2480:	00112623          	sw	ra,12(sp)
    2484:	00050793          	mv	a5,a0
    2488:	00058493          	mv	s1,a1
    248c:	00800413          	li	s0,8
    2490:	30043473          	csrrc	s0,mstatus,s0
		_current_cpu->slice_ticks = 0;
    2494:	00004737          	lui	a4,0x4
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
    2498:	00950513          	addi	a0,a0,9
    249c:	84072c23          	sw	zero,-1960(a4) # 3858 <_kernel+0x10>
	key = (mstatus & MSTATUS_IEN);
    24a0:	00847413          	andi	s0,s0,8
    24a4:	00f535b3          	sltu	a1,a0,a5
		if (result32 && (t < BIT64(32))) {
    24a8:	02f56c63          	bltu	a0,a5,24e0 <k_sched_time_slice_set+0x6c>
			return ((uint32_t)t) / (from_hz / to_hz);
    24ac:	00a00793          	li	a5,10
    24b0:	02f55533          	divu	a0,a0,a5
		slice_time = k_ms_to_ticks_ceil32(slice);
    24b4:	000037b7          	lui	a5,0x3
    24b8:	72a7ac23          	sw	a0,1848(a5) # 3738 <slice_time>
		slice_max_prio = prio;
    24bc:	000037b7          	lui	a5,0x3
    24c0:	7297aa23          	sw	s1,1844(a5) # 3734 <slice_max_prio>
		z_reset_time_slice();
    24c4:	f59ff0ef          	jal	ra,241c <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    24c8:	30042473          	csrrs	s0,mstatus,s0
}
    24cc:	00c12083          	lw	ra,12(sp)
    24d0:	00812403          	lw	s0,8(sp)
    24d4:	00412483          	lw	s1,4(sp)
    24d8:	01010113          	addi	sp,sp,16
    24dc:	00008067          	ret
		} else {
			return t / (from_hz / to_hz);
    24e0:	00a00613          	li	a2,10
    24e4:	00000693          	li	a3,0
    24e8:	e29fd0ef          	jal	ra,310 <__udivdi3>
    24ec:	fc9ff06f          	j	24b4 <k_sched_time_slice_set+0x40>

000024f0 <z_reschedule>:
	 * have the single bit set).  But there is a mask applied to
	 * the argument in arch_irq_unlock() that has me worried
	 * that something elseswhere might try to set a bit?  Do it
	 * the safe way for now.
	 */
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    24f0:	0085f713          	andi	a4,a1,8
{
    24f4:	00058513          	mv	a0,a1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    24f8:	02070263          	beqz	a4,251c <z_reschedule+0x2c>
FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf);

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    24fc:	000047b7          	lui	a5,0x4
    2500:	84878793          	addi	a5,a5,-1976 # 3848 <_kernel>
    2504:	0007a683          	lw	a3,0(a5)
    2508:	00069a63          	bnez	a3,251c <z_reschedule+0x2c>
	if (resched(key.key) && need_swap()) {
    250c:	0207a683          	lw	a3,32(a5)
    2510:	0087a783          	lw	a5,8(a5)
    2514:	00f68463          	beq	a3,a5,251c <z_reschedule+0x2c>
    2518:	d41fd06f          	j	258 <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    251c:	30072773          	csrrs	a4,mstatus,a4
}
    2520:	00008067          	ret

00002524 <z_reschedule_irqlock>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    2524:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2528:	00078a63          	beqz	a5,253c <z_reschedule_irqlock+0x18>
    252c:	00004737          	lui	a4,0x4
    2530:	84872703          	lw	a4,-1976(a4) # 3848 <_kernel>
    2534:	00071463          	bnez	a4,253c <z_reschedule_irqlock+0x18>
    2538:	d21fd06f          	j	258 <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    253c:	3007a7f3          	csrrs	a5,mstatus,a5
}
    2540:	00008067          	ret

00002544 <z_reschedule_unlocked>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2544:	00800513          	li	a0,8
    2548:	30053573          	csrrc	a0,mstatus,a0
	(void) z_reschedule_irqlock(arch_irq_lock());
    254c:	00857513          	andi	a0,a0,8
    2550:	fd5ff06f          	j	2524 <z_reschedule_irqlock>

00002554 <k_sched_lock>:
    2554:	00800793          	li	a5,8
    2558:	3007b7f3          	csrrc	a5,mstatus,a5
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    255c:	00004737          	lui	a4,0x4
    2560:	85072683          	lw	a3,-1968(a4) # 3850 <_kernel+0x8>
    2564:	00f6c703          	lbu	a4,15(a3)
    2568:	fff70713          	addi	a4,a4,-1
    256c:	00e687a3          	sb	a4,15(a3)
	key = (mstatus & MSTATUS_IEN);
    2570:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2574:	3007a7f3          	csrrs	a5,mstatus,a5
}
    2578:	00008067          	ret

0000257c <z_priq_dumb_best>:
}

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    257c:	00050793          	mv	a5,a0
	return list->head == list;
    2580:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2584:	00a79463          	bne	a5,a0,258c <z_priq_dumb_best+0x10>
	struct k_thread *thread = NULL;
    2588:	00000513          	li	a0,0

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    258c:	00008067          	ret

00002590 <update_cache>:
{
    2590:	fe010113          	addi	sp,sp,-32
    2594:	00812c23          	sw	s0,24(sp)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2598:	00004437          	lui	s0,0x4
{
    259c:	01312623          	sw	s3,12(sp)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    25a0:	84840993          	addi	s3,s0,-1976 # 3848 <_kernel>
{
    25a4:	01212823          	sw	s2,16(sp)
    25a8:	00050913          	mv	s2,a0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    25ac:	02498513          	addi	a0,s3,36
{
    25b0:	00912a23          	sw	s1,20(sp)
    25b4:	00112e23          	sw	ra,28(sp)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    25b8:	fc5ff0ef          	jal	ra,257c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    25bc:	0089a783          	lw	a5,8(s3)
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    25c0:	00050493          	mv	s1,a0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    25c4:	84840413          	addi	s0,s0,-1976
    25c8:	00d7c703          	lbu	a4,13(a5)
    25cc:	02077693          	andi	a3,a4,32
    25d0:	00068663          	beqz	a3,25dc <update_cache+0x4c>
		_current->base.thread_state |= _THREAD_DEAD;
    25d4:	00876713          	ori	a4,a4,8
    25d8:	00e786a3          	sb	a4,13(a5)
	return thread ? thread : _current_cpu->idle_thread;
    25dc:	00049463          	bnez	s1,25e4 <update_cache+0x54>
    25e0:	00c42483          	lw	s1,12(s0)
	if (preempt_ok != 0) {
    25e4:	02091e63          	bnez	s2,2620 <update_cache+0x90>
	if (z_is_thread_prevented_from_running(_current)) {
    25e8:	00d7c703          	lbu	a4,13(a5)
    25ec:	01f77713          	andi	a4,a4,31
    25f0:	02071863          	bnez	a4,2620 <update_cache+0x90>
	if (is_preempt(_current) || is_metairq(thread)) {
    25f4:	00e7d683          	lhu	a3,14(a5)
    25f8:	07f00713          	li	a4,127
    25fc:	02d77263          	bgeu	a4,a3,2620 <update_cache+0x90>
		_kernel.ready_q.cache = _current;
    2600:	02f42023          	sw	a5,32(s0)
}
    2604:	01c12083          	lw	ra,28(sp)
    2608:	01812403          	lw	s0,24(sp)
    260c:	01412483          	lw	s1,20(sp)
    2610:	01012903          	lw	s2,16(sp)
    2614:	00c12983          	lw	s3,12(sp)
    2618:	02010113          	addi	sp,sp,32
    261c:	00008067          	ret
		if (thread != _current) {
    2620:	00978463          	beq	a5,s1,2628 <update_cache+0x98>
			z_reset_time_slice();
    2624:	df9ff0ef          	jal	ra,241c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2628:	02942023          	sw	s1,32(s0)
}
    262c:	fd9ff06f          	j	2604 <update_cache+0x74>

00002630 <k_sched_unlock>:
{
    2630:	ff010113          	addi	sp,sp,-16
    2634:	00812423          	sw	s0,8(sp)
    2638:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    263c:	00800413          	li	s0,8
    2640:	30043473          	csrrc	s0,mstatus,s0
		++_current->base.sched_locked;
    2644:	000047b7          	lui	a5,0x4
    2648:	8507a703          	lw	a4,-1968(a5) # 3850 <_kernel+0x8>
		update_cache(0);
    264c:	00000513          	li	a0,0
	key = (mstatus & MSTATUS_IEN);
    2650:	00847413          	andi	s0,s0,8
		++_current->base.sched_locked;
    2654:	00f74783          	lbu	a5,15(a4)
    2658:	00178793          	addi	a5,a5,1
    265c:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
    2660:	f31ff0ef          	jal	ra,2590 <update_cache>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2664:	30042473          	csrrs	s0,mstatus,s0
}
    2668:	00812403          	lw	s0,8(sp)
    266c:	00c12083          	lw	ra,12(sp)
    2670:	01010113          	addi	sp,sp,16
	z_reschedule_unlocked();
    2674:	ed1ff06f          	j	2544 <z_reschedule_unlocked>

00002678 <ready_thread>:
	uint8_t state = thread->base.thread_state;
    2678:	00d54683          	lbu	a3,13(a0)
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    267c:	01f6f793          	andi	a5,a3,31
    2680:	08079263          	bnez	a5,2704 <ready_thread+0x8c>
	if (z_is_thread_ready(thread)) {
    2684:	01852783          	lw	a5,24(a0)
    2688:	06079e63          	bnez	a5,2704 <ready_thread+0x8c>
	return list->head == list;
    268c:	00004737          	lui	a4,0x4
    2690:	84870613          	addi	a2,a4,-1976 # 3848 <_kernel>
    2694:	02462783          	lw	a5,36(a2)
	return (node == list->tail) ? NULL : node->next;
    2698:	02862583          	lw	a1,40(a2)
    269c:	00004637          	lui	a2,0x4
    26a0:	86c60613          	addi	a2,a2,-1940 # 386c <_kernel+0x24>
    26a4:	84870713          	addi	a4,a4,-1976
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26a8:	04c78263          	beq	a5,a2,26ec <ready_thread+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26ac:	04078063          	beqz	a5,26ec <ready_thread+0x74>
	if (thread_1->base.prio < thread_2->base.prio) {
    26b0:	00e50803          	lb	a6,14(a0)
    26b4:	00e78883          	lb	a7,14(a5)
    26b8:	03185463          	bge	a6,a7,26e0 <ready_thread+0x68>
	node->prev = successor->prev;
    26bc:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    26c0:	00f52023          	sw	a5,0(a0)
	node->prev = successor->prev;
    26c4:	00e52223          	sw	a4,4(a0)
	successor->prev->next = node;
    26c8:	00a72023          	sw	a0,0(a4)
	successor->prev = node;
    26cc:	00a7a223          	sw	a0,4(a5)
	thread->base.thread_state |= states;
    26d0:	f806e693          	ori	a3,a3,-128
    26d4:	00d506a3          	sb	a3,13(a0)
		update_cache(0);
    26d8:	00000513          	li	a0,0
    26dc:	eb5ff06f          	j	2590 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    26e0:	00b78663          	beq	a5,a1,26ec <ready_thread+0x74>
    26e4:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26e8:	fc0796e3          	bnez	a5,26b4 <ready_thread+0x3c>
	node->prev = list->tail;
    26ec:	00b52223          	sw	a1,4(a0)
	list->tail->next = node;
    26f0:	02872783          	lw	a5,40(a4)
	node->next = list;
    26f4:	00c52023          	sw	a2,0(a0)
	list->tail->next = node;
    26f8:	00a7a023          	sw	a0,0(a5)
	list->tail = node;
    26fc:	02a72423          	sw	a0,40(a4)
}
    2700:	fd1ff06f          	j	26d0 <ready_thread+0x58>
}
    2704:	00008067          	ret

00002708 <z_ready_thread>:
{
    2708:	ff010113          	addi	sp,sp,-16
    270c:	00812423          	sw	s0,8(sp)
    2710:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2714:	00800413          	li	s0,8
    2718:	30043473          	csrrc	s0,mstatus,s0
		ready_thread(thread);
    271c:	f5dff0ef          	jal	ra,2678 <ready_thread>
	key = (mstatus & MSTATUS_IEN);
    2720:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2724:	30042473          	csrrs	s0,mstatus,s0
}
    2728:	00c12083          	lw	ra,12(sp)
    272c:	00812403          	lw	s0,8(sp)
    2730:	01010113          	addi	sp,sp,16
    2734:	00008067          	ret

00002738 <z_sched_start>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2738:	00800593          	li	a1,8
    273c:	3005b5f3          	csrrc	a1,mstatus,a1
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    2740:	00d54703          	lbu	a4,13(a0)
	key = (mstatus & MSTATUS_IEN);
    2744:	0085f593          	andi	a1,a1,8
	if (z_has_thread_started(thread)) {
    2748:	00477693          	andi	a3,a4,4
    274c:	00069663          	bnez	a3,2758 <z_sched_start+0x20>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2750:	3005a5f3          	csrrs	a1,mstatus,a1
		return;
    2754:	00008067          	ret
{
    2758:	fe010113          	addi	sp,sp,-32
    275c:	00112e23          	sw	ra,28(sp)
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2760:	ffb77713          	andi	a4,a4,-5
    2764:	00e506a3          	sb	a4,13(a0)
    2768:	00b12623          	sw	a1,12(sp)
	ready_thread(thread);
    276c:	f0dff0ef          	jal	ra,2678 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2770:	00c12583          	lw	a1,12(sp)
}
    2774:	01c12083          	lw	ra,28(sp)
	z_reschedule(&sched_spinlock, key);
    2778:	00004537          	lui	a0,0x4
    277c:	87450513          	addi	a0,a0,-1932 # 3874 <sched_spinlock>
}
    2780:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    2784:	d6dff06f          	j	24f0 <z_reschedule>

00002788 <z_thread_timeout>:
{
    2788:	fe010113          	addi	sp,sp,-32
    278c:	00812c23          	sw	s0,24(sp)
    2790:	00912a23          	sw	s1,20(sp)
    2794:	00112e23          	sw	ra,28(sp)
    2798:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    279c:	00800413          	li	s0,8
    27a0:	30043473          	csrrc	s0,mstatus,s0
		if (thread->base.pended_on != NULL) {
    27a4:	ff04a783          	lw	a5,-16(s1)
	key = (mstatus & MSTATUS_IEN);
    27a8:	00847413          	andi	s0,s0,8
		struct k_thread *thread = CONTAINER_OF(timeout,
    27ac:	fe850513          	addi	a0,a0,-24
		if (thread->base.pended_on != NULL) {
    27b0:	00078863          	beqz	a5,27c0 <z_thread_timeout+0x38>
			unpend_thread_no_timeout(thread);
    27b4:	00a12623          	sw	a0,12(sp)
    27b8:	c31ff0ef          	jal	ra,23e8 <unpend_thread_no_timeout>
    27bc:	00c12503          	lw	a0,12(sp)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    27c0:	ff54c783          	lbu	a5,-11(s1)
    27c4:	feb7f793          	andi	a5,a5,-21
    27c8:	fef48aa3          	sb	a5,-11(s1)
		ready_thread(thread);
    27cc:	eadff0ef          	jal	ra,2678 <ready_thread>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    27d0:	30042473          	csrrs	s0,mstatus,s0
}
    27d4:	01c12083          	lw	ra,28(sp)
    27d8:	01812403          	lw	s0,24(sp)
    27dc:	01412483          	lw	s1,20(sp)
    27e0:	02010113          	addi	sp,sp,32
    27e4:	00008067          	ret

000027e8 <move_thread_to_end_of_prio_q>:
{
    27e8:	ff010113          	addi	sp,sp,-16
    27ec:	00812423          	sw	s0,8(sp)
    27f0:	00112623          	sw	ra,12(sp)
	if (z_is_thread_queued(thread)) {
    27f4:	00d50783          	lb	a5,13(a0)
{
    27f8:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    27fc:	0007d463          	bgez	a5,2804 <move_thread_to_end_of_prio_q+0x1c>
	sys_dlist_remove(&thread->base.qnode_dlist);
    2800:	bcdff0ef          	jal	ra,23cc <sys_dlist_remove>
	return list->head == list;
    2804:	00004737          	lui	a4,0x4
    2808:	84870693          	addi	a3,a4,-1976 # 3848 <_kernel>
    280c:	0246a783          	lw	a5,36(a3)
	return (node == list->tail) ? NULL : node->next;
    2810:	0286a603          	lw	a2,40(a3)
    2814:	000046b7          	lui	a3,0x4
    2818:	86c68693          	addi	a3,a3,-1940 # 386c <_kernel+0x24>
    281c:	84870713          	addi	a4,a4,-1976
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2820:	04d78e63          	beq	a5,a3,287c <move_thread_to_end_of_prio_q+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2824:	04078c63          	beqz	a5,287c <move_thread_to_end_of_prio_q+0x94>
	if (thread_1->base.prio < thread_2->base.prio) {
    2828:	00e40583          	lb	a1,14(s0)
    282c:	00e78503          	lb	a0,14(a5)
    2830:	04a5d063          	bge	a1,a0,2870 <move_thread_to_end_of_prio_q+0x88>
	node->prev = successor->prev;
    2834:	0047a683          	lw	a3,4(a5)
	node->next = successor;
    2838:	00f42023          	sw	a5,0(s0)
	node->prev = successor->prev;
    283c:	00d42223          	sw	a3,4(s0)
	successor->prev->next = node;
    2840:	0086a023          	sw	s0,0(a3)
	successor->prev = node;
    2844:	0087a223          	sw	s0,4(a5)
	thread->base.thread_state |= states;
    2848:	00d44783          	lbu	a5,13(s0)
	update_cache(thread == _current);
    284c:	00872503          	lw	a0,8(a4)
}
    2850:	00c12083          	lw	ra,12(sp)
    2854:	f807e793          	ori	a5,a5,-128
    2858:	00f406a3          	sb	a5,13(s0)
	update_cache(thread == _current);
    285c:	40850533          	sub	a0,a0,s0
}
    2860:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    2864:	00153513          	seqz	a0,a0
}
    2868:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    286c:	d25ff06f          	j	2590 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2870:	00f60663          	beq	a2,a5,287c <move_thread_to_end_of_prio_q+0x94>
    2874:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2878:	fa079ae3          	bnez	a5,282c <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
    287c:	00c42223          	sw	a2,4(s0)
	list->tail->next = node;
    2880:	02872783          	lw	a5,40(a4)
	node->next = list;
    2884:	00d42023          	sw	a3,0(s0)
	list->tail->next = node;
    2888:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    288c:	02872423          	sw	s0,40(a4)
}
    2890:	fb9ff06f          	j	2848 <move_thread_to_end_of_prio_q+0x60>

00002894 <z_time_slice>:
{
    2894:	ff010113          	addi	sp,sp,-16
    2898:	00812423          	sw	s0,8(sp)
    289c:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    28a0:	00800413          	li	s0,8
    28a4:	30043473          	csrrc	s0,mstatus,s0
	if (slice_time && sliceable(_current)) {
    28a8:	000037b7          	lui	a5,0x3
    28ac:	7387a703          	lw	a4,1848(a5) # 3738 <slice_time>
    28b0:	000047b7          	lui	a5,0x4
	key = (mstatus & MSTATUS_IEN);
    28b4:	00847413          	andi	s0,s0,8
    28b8:	84878793          	addi	a5,a5,-1976 # 3848 <_kernel>
    28bc:	06070863          	beqz	a4,292c <z_time_slice+0x98>
    28c0:	00050693          	mv	a3,a0
    28c4:	0087a503          	lw	a0,8(a5)
		&& !z_is_idle_thread_object(thread);
    28c8:	07f00713          	li	a4,127
    28cc:	00e55603          	lhu	a2,14(a0)
    28d0:	04c76e63          	bltu	a4,a2,292c <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
    28d4:	00d54703          	lbu	a4,13(a0)
    28d8:	01f77713          	andi	a4,a4,31
    28dc:	04071863          	bnez	a4,292c <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    28e0:	00003737          	lui	a4,0x3
    28e4:	00e50603          	lb	a2,14(a0)
    28e8:	73472703          	lw	a4,1844(a4) # 3734 <slice_max_prio>
    28ec:	04e64063          	blt	a2,a4,292c <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    28f0:	00003737          	lui	a4,0x3
    28f4:	74870713          	addi	a4,a4,1864 # 3748 <z_idle_threads>
    28f8:	02e50a63          	beq	a0,a4,292c <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
    28fc:	0107a703          	lw	a4,16(a5)
    2900:	02e6c063          	blt	a3,a4,2920 <z_time_slice+0x8c>
			move_thread_to_end_of_prio_q(_current);
    2904:	ee5ff0ef          	jal	ra,27e8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    2908:	b15ff0ef          	jal	ra,241c <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    290c:	30042473          	csrrs	s0,mstatus,s0
}
    2910:	00c12083          	lw	ra,12(sp)
    2914:	00812403          	lw	s0,8(sp)
    2918:	01010113          	addi	sp,sp,16
    291c:	00008067          	ret
			_current_cpu->slice_ticks -= ticks;
    2920:	40d70733          	sub	a4,a4,a3
    2924:	00e7a823          	sw	a4,16(a5)
    2928:	fe5ff06f          	j	290c <z_time_slice+0x78>
		_current_cpu->slice_ticks = 0;
    292c:	0007a823          	sw	zero,16(a5)
    2930:	fddff06f          	j	290c <z_time_slice+0x78>

00002934 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2934:	07052783          	lw	a5,112(a0)
{
    2938:	fe010113          	addi	sp,sp,-32
    293c:	00812c23          	sw	s0,24(sp)
    2940:	00112e23          	sw	ra,28(sp)
    2944:	00912a23          	sw	s1,20(sp)
    2948:	01212823          	sw	s2,16(sp)
    294c:	01312623          	sw	s3,12(sp)
    2950:	00050413          	mv	s0,a0
	if (thread->fn_abort != NULL) {
    2954:	00078463          	beqz	a5,295c <z_thread_single_abort+0x28>
		thread->fn_abort();
    2958:	000780e7          	jalr	a5
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    295c:	01840513          	addi	a0,s0,24
    2960:	5e0000ef          	jal	ra,2f40 <z_abort_timeout>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2964:	00800913          	li	s2,8
    2968:	30093973          	csrrc	s2,mstatus,s2
	uint8_t state = thread->base.thread_state;
    296c:	00d44783          	lbu	a5,13(s0)
	key = (mstatus & MSTATUS_IEN);
    2970:	00897913          	andi	s2,s2,8
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2974:	01f7f713          	andi	a4,a5,31
    2978:	06071e63          	bnez	a4,29f4 <z_thread_single_abort+0xc0>
		if (z_is_thread_ready(thread)) {
    297c:	01842703          	lw	a4,24(s0)
    2980:	06071a63          	bnez	a4,29f4 <z_thread_single_abort+0xc0>
			if (z_is_thread_queued(thread)) {
    2984:	01879793          	slli	a5,a5,0x18
    2988:	4187d793          	srai	a5,a5,0x18
    298c:	0007dc63          	bgez	a5,29a4 <z_thread_single_abort+0x70>
	sys_dlist_remove(&thread->base.qnode_dlist);
    2990:	00040513          	mv	a0,s0
    2994:	a39ff0ef          	jal	ra,23cc <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    2998:	00d44783          	lbu	a5,13(s0)
    299c:	07f7f793          	andi	a5,a5,127
    29a0:	00f406a3          	sb	a5,13(s0)
			update_cache(thread == _current);
    29a4:	000047b7          	lui	a5,0x4
    29a8:	8507a503          	lw	a0,-1968(a5) # 3850 <_kernel+0x8>
    29ac:	40850533          	sub	a0,a0,s0
    29b0:	00153513          	seqz	a0,a0
    29b4:	bddff0ef          	jal	ra,2590 <update_cache>
		thread->base.thread_state |= mask;
    29b8:	00d44783          	lbu	a5,13(s0)
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    29bc:	03040993          	addi	s3,s0,48
    29c0:	0087e793          	ori	a5,a5,8
    29c4:	00f406a3          	sb	a5,13(s0)
	return list->head == list;
    29c8:	03042483          	lw	s1,48(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    29cc:	01348463          	beq	s1,s3,29d4 <z_thread_single_abort+0xa0>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    29d0:	04049463          	bnez	s1,2a18 <z_thread_single_abort+0xe4>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    29d4:	30092973          	csrrs	s2,mstatus,s2
}
    29d8:	01c12083          	lw	ra,28(sp)
    29dc:	01812403          	lw	s0,24(sp)
    29e0:	01412483          	lw	s1,20(sp)
    29e4:	01012903          	lw	s2,16(sp)
    29e8:	00c12983          	lw	s3,12(sp)
    29ec:	02010113          	addi	sp,sp,32
    29f0:	00008067          	ret
			if (z_is_thread_pending(thread)) {
    29f4:	0027f793          	andi	a5,a5,2
    29f8:	fc0780e3          	beqz	a5,29b8 <z_thread_single_abort+0x84>
	sys_dlist_remove(&thread->base.qnode_dlist);
    29fc:	00040513          	mv	a0,s0
    2a00:	9cdff0ef          	jal	ra,23cc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2a04:	00d44783          	lbu	a5,13(s0)
				thread->base.pended_on = NULL;
    2a08:	00042423          	sw	zero,8(s0)
    2a0c:	ffd7f793          	andi	a5,a5,-3
    2a10:	00f406a3          	sb	a5,13(s0)
    2a14:	fa5ff06f          	j	29b8 <z_thread_single_abort+0x84>
    2a18:	01848513          	addi	a0,s1,24
    2a1c:	524000ef          	jal	ra,2f40 <z_abort_timeout>
	sys_dlist_remove(&thread->base.qnode_dlist);
    2a20:	00048513          	mv	a0,s1
    2a24:	9a9ff0ef          	jal	ra,23cc <sys_dlist_remove>
    2a28:	00d4c783          	lbu	a5,13(s1)
			waiter->base.pended_on = NULL;
    2a2c:	0004a423          	sw	zero,8(s1)
	thread->arch.swap_return_value = value;
    2a30:	0604ae23          	sw	zero,124(s1)
    2a34:	ffd7f793          	andi	a5,a5,-3
    2a38:	00f486a3          	sb	a5,13(s1)
			ready_thread(waiter);
    2a3c:	00048513          	mv	a0,s1
    2a40:	c39ff0ef          	jal	ra,2678 <ready_thread>
    2a44:	f85ff06f          	j	29c8 <z_thread_single_abort+0x94>

00002a48 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    2a48:	000047b7          	lui	a5,0x4
    2a4c:	84878793          	addi	a5,a5,-1976 # 3848 <_kernel>
    2a50:	02478713          	addi	a4,a5,36
    2a54:	02e7a223          	sw	a4,36(a5)
	list->tail = (sys_dnode_t *)list;
    2a58:	02e7a423          	sw	a4,40(a5)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2a5c:	00000593          	li	a1,0
    2a60:	00000513          	li	a0,0
    2a64:	a11ff06f          	j	2474 <k_sched_time_slice_set>

00002a68 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2a68:	000047b7          	lui	a5,0x4
    2a6c:	8507a503          	lw	a0,-1968(a5) # 3850 <_kernel+0x8>
    2a70:	00008067          	ret

00002a74 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2a74:	ff010113          	addi	sp,sp,-16
    2a78:	00812423          	sw	s0,8(sp)
    2a7c:	00912223          	sw	s1,4(sp)
    2a80:	00112623          	sw	ra,12(sp)
	sys_dlist_init(&w->waitq);
    2a84:	03050313          	addi	t1,a0,48
	list->head = (sys_dnode_t *)list;
    2a88:	02652823          	sw	t1,48(a0)
	list->tail = (sys_dnode_t *)list;
    2a8c:	02652a23          	sw	t1,52(a0)
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    2a90:	01012303          	lw	t1,16(sp)
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2a94:	00f60613          	addi	a2,a2,15
    2a98:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
    2a9c:	00c584b3          	add	s1,a1,a2
	thread_base->user_options = (uint8_t)options;
    2aa0:	00650623          	sb	t1,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    2aa4:	00400313          	li	t1,4
    2aa8:	006506a3          	sb	t1,13(a0)

	thread_base->prio = priority;
    2aac:	01150723          	sb	a7,14(a0)

	thread_base->sched_locked = 0U;
    2ab0:	000507a3          	sb	zero,15(a0)
	node->next = NULL;
    2ab4:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
    2ab8:	00052e23          	sw	zero,28(a0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2abc:	00048613          	mv	a2,s1
{
    2ac0:	00050413          	mv	s0,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2ac4:	fcdfe0ef          	jal	ra,1a90 <arch_new_thread>
	new_thread->resource_pool = _current->resource_pool;
    2ac8:	000047b7          	lui	a5,0x4
    2acc:	8507a783          	lw	a5,-1968(a5) # 3850 <_kernel+0x8>
}
    2ad0:	00c12083          	lw	ra,12(sp)
	new_thread->init_data = NULL;
    2ad4:	06042623          	sw	zero,108(s0)
	new_thread->resource_pool = _current->resource_pool;
    2ad8:	0787a783          	lw	a5,120(a5)
	new_thread->fn_abort = NULL;
    2adc:	06042823          	sw	zero,112(s0)
}
    2ae0:	00048513          	mv	a0,s1
	new_thread->resource_pool = _current->resource_pool;
    2ae4:	06f42c23          	sw	a5,120(s0)
}
    2ae8:	00812403          	lw	s0,8(sp)
    2aec:	00412483          	lw	s1,4(sp)
    2af0:	01010113          	addi	sp,sp,16
    2af4:	00008067          	ret

00002af8 <z_init_static_threads>:
{
    2af8:	fd010113          	addi	sp,sp,-48
	_FOREACH_STATIC_THREAD(thread_data) {
    2afc:	000037b7          	lui	a5,0x3
{
    2b00:	03212023          	sw	s2,32(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    2b04:	00003937          	lui	s2,0x3
{
    2b08:	02812423          	sw	s0,40(sp)
    2b0c:	02912223          	sw	s1,36(sp)
    2b10:	02112623          	sw	ra,44(sp)
    2b14:	01312e23          	sw	s3,28(sp)
    2b18:	01412c23          	sw	s4,24(sp)
    2b1c:	01512a23          	sw	s5,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    2b20:	71078413          	addi	s0,a5,1808 # 3710 <last_count>
    2b24:	71078493          	addi	s1,a5,1808
    2b28:	71090913          	addi	s2,s2,1808 # 3710 <last_count>
    2b2c:	05246063          	bltu	s0,s2,2b6c <z_init_static_threads+0x74>
	k_sched_lock();
    2b30:	a25ff0ef          	jal	ra,2554 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2b34:	00048413          	mv	s0,s1
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2b38:	fff00993          	li	s3,-1
		t += off;
    2b3c:	00900a13          	li	s4,9
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2b40:	00002ab7          	lui	s5,0x2
	_FOREACH_STATIC_THREAD(thread_data) {
    2b44:	07246663          	bltu	s0,s2,2bb0 <z_init_static_threads+0xb8>
}
    2b48:	02812403          	lw	s0,40(sp)
    2b4c:	02c12083          	lw	ra,44(sp)
    2b50:	02412483          	lw	s1,36(sp)
    2b54:	02012903          	lw	s2,32(sp)
    2b58:	01c12983          	lw	s3,28(sp)
    2b5c:	01812a03          	lw	s4,24(sp)
    2b60:	01412a83          	lw	s5,20(sp)
    2b64:	03010113          	addi	sp,sp,48
	k_sched_unlock();
    2b68:	ac9ff06f          	j	2630 <k_sched_unlock>
		z_setup_new_thread(
    2b6c:	02c42783          	lw	a5,44(s0)
    2b70:	00f12223          	sw	a5,4(sp)
    2b74:	02042783          	lw	a5,32(s0)
    2b78:	00f12023          	sw	a5,0(sp)
    2b7c:	01442783          	lw	a5,20(s0)
    2b80:	01c42883          	lw	a7,28(s0)
    2b84:	01842803          	lw	a6,24(s0)
    2b88:	01042703          	lw	a4,16(s0)
    2b8c:	00c42683          	lw	a3,12(s0)
    2b90:	00842603          	lw	a2,8(s0)
    2b94:	00442583          	lw	a1,4(s0)
    2b98:	00042503          	lw	a0,0(s0)
    2b9c:	ed9ff0ef          	jal	ra,2a74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2ba0:	00042783          	lw	a5,0(s0)
    2ba4:	0687a623          	sw	s0,108(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
    2ba8:	03040413          	addi	s0,s0,48
    2bac:	f81ff06f          	j	2b2c <z_init_static_threads+0x34>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2bb0:	02442783          	lw	a5,36(s0)
    2bb4:	03378863          	beq	a5,s3,2be4 <z_init_static_threads+0xec>
			schedule_new_thread(thread_data->init_thread,
    2bb8:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
    2bbc:	0007d463          	bgez	a5,2bc4 <z_init_static_threads+0xcc>
    2bc0:	00000793          	li	a5,0
    2bc4:	00978513          	addi	a0,a5,9
    2bc8:	41f7d593          	srai	a1,a5,0x1f
    2bcc:	00f537b3          	sltu	a5,a0,a5
    2bd0:	00b785b3          	add	a1,a5,a1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2bd4:	01451c63          	bne	a0,s4,2bec <z_init_static_threads+0xf4>
    2bd8:	00059a63          	bnez	a1,2bec <z_init_static_threads+0xf4>
	z_sched_start(thread);
    2bdc:	00048513          	mv	a0,s1
    2be0:	b59ff0ef          	jal	ra,2738 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2be4:	03040413          	addi	s0,s0,48
    2be8:	f5dff06f          	j	2b44 <z_init_static_threads+0x4c>
			return t / (from_hz / to_hz);
    2bec:	00a00613          	li	a2,10
    2bf0:	00000693          	li	a3,0
    2bf4:	f1cfd0ef          	jal	ra,310 <__udivdi3>
    2bf8:	00050613          	mv	a2,a0
    2bfc:	00058693          	mv	a3,a1
    2c00:	01848513          	addi	a0,s1,24
    2c04:	788a8593          	addi	a1,s5,1928 # 2788 <z_thread_timeout>
    2c08:	170000ef          	jal	ra,2d78 <z_add_timeout>
    2c0c:	fd9ff06f          	j	2be4 <z_init_static_threads+0xec>

00002c10 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
    2c10:	ff010113          	addi	sp,sp,-16
    2c14:	00812423          	sw	s0,8(sp)
    2c18:	00112623          	sw	ra,12(sp)
    2c1c:	00050413          	mv	s0,a0
	z_thread_single_abort(thread);
    2c20:	d15ff0ef          	jal	ra,2934 <z_thread_single_abort>
	return _kernel.cpus[0].nested != 0U;
    2c24:	000047b7          	lui	a5,0x4
    2c28:	84878793          	addi	a5,a5,-1976 # 3848 <_kernel>

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
    2c2c:	0007a703          	lw	a4,0(a5)
    2c30:	04071063          	bnez	a4,2c70 <z_impl_k_thread_abort+0x60>
		if (thread == _current) {
    2c34:	0087a783          	lw	a5,8(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2c38:	00800513          	li	a0,8
    2c3c:	00879e63          	bne	a5,s0,2c58 <z_impl_k_thread_abort+0x48>
    2c40:	30053573          	csrrc	a0,mstatus,a0
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
    2c44:	00812403          	lw	s0,8(sp)
    2c48:	00c12083          	lw	ra,12(sp)
    2c4c:	00857513          	andi	a0,a0,8
    2c50:	01010113          	addi	sp,sp,16
    2c54:	e04fd06f          	j	258 <arch_swap>
    2c58:	30053573          	csrrc	a0,mstatus,a0
    2c5c:	00812403          	lw	s0,8(sp)
    2c60:	00c12083          	lw	ra,12(sp)
	(void) z_reschedule_irqlock(arch_irq_lock());
    2c64:	00857513          	andi	a0,a0,8
    2c68:	01010113          	addi	sp,sp,16
    2c6c:	8b9ff06f          	j	2524 <z_reschedule_irqlock>
    2c70:	00c12083          	lw	ra,12(sp)
    2c74:	00812403          	lw	s0,8(sp)
    2c78:	01010113          	addi	sp,sp,16
    2c7c:	00008067          	ret

00002c80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2c80:	000037b7          	lui	a5,0x3
    2c84:	73c7a783          	lw	a5,1852(a5) # 373c <announce_remaining>
    2c88:	00079463          	bnez	a5,2c90 <elapsed+0x10>
    2c8c:	d75fe06f          	j	1a00 <z_clock_elapsed>
}
    2c90:	00000513          	li	a0,0
    2c94:	00008067          	ret

00002c98 <next_timeout>:
	return list->head == list;
    2c98:	000037b7          	lui	a5,0x3

static int32_t next_timeout(void)
{
    2c9c:	ff010113          	addi	sp,sp,-16
    2ca0:	6c078793          	addi	a5,a5,1728 # 36c0 <timeout_list>
    2ca4:	00812423          	sw	s0,8(sp)
    2ca8:	0007a403          	lw	s0,0(a5)
    2cac:	00112623          	sw	ra,12(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2cb0:	00f41463          	bne	s0,a5,2cb8 <next_timeout+0x20>
    2cb4:	00000413          	li	s0,0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    2cb8:	fc9ff0ef          	jal	ra,2c80 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    2cbc:	04040c63          	beqz	s0,2d14 <next_timeout+0x7c>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    2cc0:	01042703          	lw	a4,16(s0)
    2cc4:	01442783          	lw	a5,20(s0)
    2cc8:	41f55693          	srai	a3,a0,0x1f
    2ccc:	40a70533          	sub	a0,a4,a0
    2cd0:	00a73733          	sltu	a4,a4,a0
    2cd4:	40d787b3          	sub	a5,a5,a3
    2cd8:	40e787b3          	sub	a5,a5,a4
	int32_t ret = to == NULL ? MAX_WAIT
    2cdc:	02f04c63          	bgtz	a5,2d14 <next_timeout+0x7c>
    2ce0:	00079463          	bnez	a5,2ce8 <next_timeout+0x50>
    2ce4:	02054863          	bltz	a0,2d14 <next_timeout+0x7c>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    2ce8:	0007d463          	bgez	a5,2cf0 <next_timeout+0x58>
    2cec:	00000513          	li	a0,0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2cf0:	000047b7          	lui	a5,0x4
    2cf4:	8587a783          	lw	a5,-1960(a5) # 3858 <_kernel+0x10>
    2cf8:	00078663          	beqz	a5,2d04 <next_timeout+0x6c>
    2cfc:	00a7d463          	bge	a5,a0,2d04 <next_timeout+0x6c>
    2d00:	00078513          	mv	a0,a5
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2d04:	00c12083          	lw	ra,12(sp)
    2d08:	00812403          	lw	s0,8(sp)
    2d0c:	01010113          	addi	sp,sp,16
    2d10:	00008067          	ret
	int32_t ret = to == NULL ? MAX_WAIT
    2d14:	80000537          	lui	a0,0x80000
    2d18:	fff54513          	not	a0,a0
    2d1c:	fd5ff06f          	j	2cf0 <next_timeout+0x58>

00002d20 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    2d20:	00052783          	lw	a5,0(a0) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2d24:	02050e63          	beqz	a0,2d60 <remove_timeout+0x40>
	return (node == list->tail) ? NULL : node->next;
    2d28:	00003737          	lui	a4,0x3
    2d2c:	6c472703          	lw	a4,1732(a4) # 36c4 <timeout_list+0x4>
    2d30:	02e50863          	beq	a0,a4,2d60 <remove_timeout+0x40>
	if (next(t) != NULL) {
    2d34:	02078663          	beqz	a5,2d60 <remove_timeout+0x40>
		next(t)->dticks += t->dticks;
    2d38:	0107a703          	lw	a4,16(a5)
    2d3c:	01052683          	lw	a3,16(a0)
    2d40:	01452583          	lw	a1,20(a0)
    2d44:	0147a603          	lw	a2,20(a5)
    2d48:	00d706b3          	add	a3,a4,a3
    2d4c:	00e6b733          	sltu	a4,a3,a4
    2d50:	00b60633          	add	a2,a2,a1
    2d54:	00c70733          	add	a4,a4,a2
    2d58:	00d7a823          	sw	a3,16(a5)
    2d5c:	00e7aa23          	sw	a4,20(a5)
	node->prev->next = node->next;
    2d60:	00452703          	lw	a4,4(a0)
    2d64:	00f72023          	sw	a5,0(a4)
	node->next->prev = node->prev;
    2d68:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    2d6c:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    2d70:	00052223          	sw	zero,4(a0)
}
    2d74:	00008067          	ret

00002d78 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2d78:	fe010113          	addi	sp,sp,-32
    2d7c:	00912a23          	sw	s1,20(sp)
    2d80:	01412423          	sw	s4,8(sp)
    2d84:	00112e23          	sw	ra,28(sp)
    2d88:	00058a13          	mv	s4,a1
    2d8c:	00812c23          	sw	s0,24(sp)
    2d90:	01212823          	sw	s2,16(sp)
    2d94:	01312623          	sw	s3,12(sp)
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2d98:	fff00593          	li	a1,-1
{
    2d9c:	00050493          	mv	s1,a0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2da0:	00b61463          	bne	a2,a1,2da8 <z_add_timeout+0x30>
    2da4:	14c68c63          	beq	a3,a2,2efc <z_add_timeout+0x184>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    2da8:	00160793          	addi	a5,a2,1
    2dac:	00c7b633          	sltu	a2,a5,a2

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2db0:	ffe00913          	li	s2,-2
	k_ticks_t ticks = timeout.ticks + 1;
    2db4:	00078993          	mv	s3,a5
    2db8:	00d60433          	add	s0,a2,a3
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2dbc:	40f907b3          	sub	a5,s2,a5
    2dc0:	00f93733          	sltu	a4,s2,a5
    2dc4:	fff44793          	not	a5,s0
    2dc8:	40e787b3          	sub	a5,a5,a4
    2dcc:	0407c863          	bltz	a5,2e1c <z_add_timeout+0xa4>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    2dd0:	eb1ff0ef          	jal	ra,2c80 <elapsed>
    2dd4:	000037b7          	lui	a5,0x3
    2dd8:	71878793          	addi	a5,a5,1816 # 3718 <curr_tick>
    2ddc:	0007a703          	lw	a4,0(a5)
    2de0:	0047a683          	lw	a3,4(a5)
    2de4:	40e90733          	sub	a4,s2,a4
    2de8:	00e93933          	sltu	s2,s2,a4
    2dec:	fff6c693          	not	a3,a3
    2df0:	413709b3          	sub	s3,a4,s3
    2df4:	412686b3          	sub	a3,a3,s2
    2df8:	01373733          	sltu	a4,a4,s3
    2dfc:	40868433          	sub	s0,a3,s0
    2e00:	40e40433          	sub	s0,s0,a4
    2e04:	40a987b3          	sub	a5,s3,a0
    2e08:	41f55713          	srai	a4,a0,0x1f
    2e0c:	00f9b6b3          	sltu	a3,s3,a5
    2e10:	40e40433          	sub	s0,s0,a4
    2e14:	00078993          	mv	s3,a5
    2e18:	40d40433          	sub	s0,s0,a3
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2e1c:	0144a423          	sw	s4,8(s1)
    2e20:	00800913          	li	s2,8
    2e24:	30093973          	csrrc	s2,mstatus,s2
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2e28:	e59ff0ef          	jal	ra,2c80 <elapsed>
	key = (mstatus & MSTATUS_IEN);
    2e2c:	00897913          	andi	s2,s2,8
	ticks = MAX(1, ticks);
    2e30:	00098793          	mv	a5,s3
    2e34:	00804a63          	bgtz	s0,2e48 <z_add_timeout+0xd0>
    2e38:	00041463          	bnez	s0,2e40 <z_add_timeout+0xc8>
    2e3c:	00099663          	bnez	s3,2e48 <z_add_timeout+0xd0>
    2e40:	00100793          	li	a5,1
    2e44:	00000413          	li	s0,0
		to->dticks = ticks + elapsed();
    2e48:	41f55713          	srai	a4,a0,0x1f
    2e4c:	00a78533          	add	a0,a5,a0
    2e50:	00e40433          	add	s0,s0,a4
    2e54:	00f537b3          	sltu	a5,a0,a5
    2e58:	008787b3          	add	a5,a5,s0
	return list->head == list;
    2e5c:	00003737          	lui	a4,0x3
    2e60:	00f4aa23          	sw	a5,20(s1)
    2e64:	6c072783          	lw	a5,1728(a4) # 36c0 <timeout_list>
    2e68:	00a4a823          	sw	a0,16(s1)
    2e6c:	6c070713          	addi	a4,a4,1728
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e70:	00e78663          	beq	a5,a4,2e7c <z_add_timeout+0x104>
	return (node == list->tail) ? NULL : node->next;
    2e74:	00472803          	lw	a6,4(a4)
		for (t = first(); t != NULL; t = next(t)) {
    2e78:	02079063          	bnez	a5,2e98 <z_add_timeout+0x120>
	node->prev = list->tail;
    2e7c:	00472783          	lw	a5,4(a4)
	node->next = list;
    2e80:	00e4a023          	sw	a4,0(s1)
	node->prev = list->tail;
    2e84:	00f4a223          	sw	a5,4(s1)
	list->tail->next = node;
    2e88:	00472783          	lw	a5,4(a4)
    2e8c:	0097a023          	sw	s1,0(a5)
	list->tail = node;
    2e90:	00972223          	sw	s1,4(a4)
}
    2e94:	04c0006f          	j	2ee0 <z_add_timeout+0x168>
			if (t->dticks > to->dticks) {
    2e98:	0147a503          	lw	a0,20(a5)
    2e9c:	0144a583          	lw	a1,20(s1)
    2ea0:	0107a683          	lw	a3,16(a5)
    2ea4:	0104a603          	lw	a2,16(s1)
    2ea8:	00a5c663          	blt	a1,a0,2eb4 <z_add_timeout+0x13c>
    2eac:	06b51863          	bne	a0,a1,2f1c <z_add_timeout+0x1a4>
    2eb0:	06d67663          	bgeu	a2,a3,2f1c <z_add_timeout+0x1a4>
				t->dticks -= to->dticks;
    2eb4:	40c68633          	sub	a2,a3,a2
    2eb8:	00c6b6b3          	sltu	a3,a3,a2
    2ebc:	40b505b3          	sub	a1,a0,a1
    2ec0:	40d586b3          	sub	a3,a1,a3
    2ec4:	00d7aa23          	sw	a3,20(a5)
	node->prev = successor->prev;
    2ec8:	0047a683          	lw	a3,4(a5)
    2ecc:	00c7a823          	sw	a2,16(a5)
	node->next = successor;
    2ed0:	00f4a023          	sw	a5,0(s1)
	node->prev = successor->prev;
    2ed4:	00d4a223          	sw	a3,4(s1)
	successor->prev->next = node;
    2ed8:	0096a023          	sw	s1,0(a3)
	successor->prev = node;
    2edc:	0097a223          	sw	s1,4(a5)
	return list->head == list;
    2ee0:	00072783          	lw	a5,0(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ee4:	00e78a63          	beq	a5,a4,2ef8 <z_add_timeout+0x180>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2ee8:	00f49863          	bne	s1,a5,2ef8 <z_add_timeout+0x180>
			z_clock_set_timeout(next_timeout(), false);
    2eec:	dadff0ef          	jal	ra,2c98 <next_timeout>
    2ef0:	00000593          	li	a1,0
    2ef4:	b09fe0ef          	jal	ra,19fc <z_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2ef8:	30092973          	csrrs	s2,mstatus,s2
		}
	}
}
    2efc:	01c12083          	lw	ra,28(sp)
    2f00:	01812403          	lw	s0,24(sp)
    2f04:	01412483          	lw	s1,20(sp)
    2f08:	01012903          	lw	s2,16(sp)
    2f0c:	00c12983          	lw	s3,12(sp)
    2f10:	00812a03          	lw	s4,8(sp)
    2f14:	02010113          	addi	sp,sp,32
    2f18:	00008067          	ret
			to->dticks -= t->dticks;
    2f1c:	40d606b3          	sub	a3,a2,a3
    2f20:	00d63633          	sltu	a2,a2,a3
    2f24:	40a585b3          	sub	a1,a1,a0
    2f28:	40c58633          	sub	a2,a1,a2
    2f2c:	00d4a823          	sw	a3,16(s1)
    2f30:	00c4aa23          	sw	a2,20(s1)
	return (node == list->tail) ? NULL : node->next;
    2f34:	f50784e3          	beq	a5,a6,2e7c <z_add_timeout+0x104>
    2f38:	0007a783          	lw	a5,0(a5)
    2f3c:	f3dff06f          	j	2e78 <z_add_timeout+0x100>

00002f40 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    2f40:	ff010113          	addi	sp,sp,-16
    2f44:	00812423          	sw	s0,8(sp)
    2f48:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2f4c:	00800413          	li	s0,8
    2f50:	30043473          	csrrc	s0,mstatus,s0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    2f54:	00052783          	lw	a5,0(a0)
	key = (mstatus & MSTATUS_IEN);
    2f58:	00847413          	andi	s0,s0,8
    2f5c:	02078063          	beqz	a5,2f7c <z_abort_timeout+0x3c>
			remove_timeout(to);
    2f60:	dc1ff0ef          	jal	ra,2d20 <remove_timeout>
			ret = 0;
    2f64:	00000513          	li	a0,0
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2f68:	30042473          	csrrs	s0,mstatus,s0
		}
	}

	return ret;
}
    2f6c:	00c12083          	lw	ra,12(sp)
    2f70:	00812403          	lw	s0,8(sp)
    2f74:	01010113          	addi	sp,sp,16
    2f78:	00008067          	ret
	int ret = -EINVAL;
    2f7c:	fea00513          	li	a0,-22
    2f80:	fe9ff06f          	j	2f68 <z_abort_timeout+0x28>

00002f84 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    2f84:	ff010113          	addi	sp,sp,-16
    2f88:	00112623          	sw	ra,12(sp)
    2f8c:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2f90:	00800793          	li	a5,8
    2f94:	3007b473          	csrrc	s0,mstatus,a5
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    2f98:	d01ff0ef          	jal	ra,2c98 <next_timeout>
	key = (mstatus & MSTATUS_IEN);
    2f9c:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2fa0:	3007a7f3          	csrrs	a5,mstatus,a5
	}
	return ret;
}
    2fa4:	00c12083          	lw	ra,12(sp)
    2fa8:	00812403          	lw	s0,8(sp)
    2fac:	01010113          	addi	sp,sp,16
    2fb0:	00008067          	ret

00002fb4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    2fb4:	fe010113          	addi	sp,sp,-32
    2fb8:	00812c23          	sw	s0,24(sp)
    2fbc:	00912a23          	sw	s1,20(sp)
    2fc0:	00112e23          	sw	ra,28(sp)
    2fc4:	00050493          	mv	s1,a0
    2fc8:	00b12623          	sw	a1,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    2fcc:	00800413          	li	s0,8
    2fd0:	30043473          	csrrc	s0,mstatus,s0
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    2fd4:	cc5ff0ef          	jal	ra,2c98 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    2fd8:	00100793          	li	a5,1
	key = (mstatus & MSTATUS_IEN);
    2fdc:	00847413          	andi	s0,s0,8
    2fe0:	00a7da63          	bge	a5,a0,2ff4 <z_set_timeout_expiry+0x40>
    2fe4:	00c12583          	lw	a1,12(sp)
    2fe8:	00a4d663          	bge	s1,a0,2ff4 <z_set_timeout_expiry+0x40>
			z_clock_set_timeout(ticks, is_idle);
    2fec:	00048513          	mv	a0,s1
    2ff0:	a0dfe0ef          	jal	ra,19fc <z_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    2ff4:	30042473          	csrrs	s0,mstatus,s0
		}
	}
}
    2ff8:	01c12083          	lw	ra,28(sp)
    2ffc:	01812403          	lw	s0,24(sp)
    3000:	01412483          	lw	s1,20(sp)
    3004:	02010113          	addi	sp,sp,32
    3008:	00008067          	ret

0000300c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
    300c:	fd010113          	addi	sp,sp,-48
    3010:	02812423          	sw	s0,40(sp)
    3014:	02912223          	sw	s1,36(sp)
    3018:	02112623          	sw	ra,44(sp)
    301c:	03212023          	sw	s2,32(sp)
    3020:	01312e23          	sw	s3,28(sp)
    3024:	01412c23          	sw	s4,24(sp)
    3028:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    302c:	00800413          	li	s0,8
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3030:	865ff0ef          	jal	ra,2894 <z_time_slice>
    3034:	30043473          	csrrc	s0,mstatus,s0
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3038:	00003937          	lui	s2,0x3
    303c:	72992e23          	sw	s1,1852(s2) # 373c <announce_remaining>
	return list->head == list;
    3040:	000039b7          	lui	s3,0x3

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3044:	000034b7          	lui	s1,0x3
	key = (mstatus & MSTATUS_IEN);
    3048:	00847413          	andi	s0,s0,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    304c:	73c90913          	addi	s2,s2,1852
    3050:	6c098993          	addi	s3,s3,1728 # 36c0 <timeout_list>
		curr_tick += dt;
    3054:	71848493          	addi	s1,s1,1816 # 3718 <curr_tick>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    3058:	00800a13          	li	s4,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    305c:	00092783          	lw	a5,0(s2)
    3060:	0009a503          	lw	a0,0(s3)
		curr_tick += dt;
    3064:	0004a683          	lw	a3,0(s1)
    3068:	0044a883          	lw	a7,4(s1)
    306c:	41f7d593          	srai	a1,a5,0x1f
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3070:	03350a63          	beq	a0,s3,30a4 <z_clock_announce+0x98>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3074:	02050863          	beqz	a0,30a4 <z_clock_announce+0x98>
    3078:	01452603          	lw	a2,20(a0)
    307c:	01052703          	lw	a4,16(a0)
    3080:	00c5c663          	blt	a1,a2,308c <z_clock_announce+0x80>
    3084:	06b61663          	bne	a2,a1,30f0 <z_clock_announce+0xe4>
    3088:	06e7f463          	bgeu	a5,a4,30f0 <z_clock_announce+0xe4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    308c:	40f70833          	sub	a6,a4,a5
    3090:	01073733          	sltu	a4,a4,a6
    3094:	40b60633          	sub	a2,a2,a1
    3098:	40e60733          	sub	a4,a2,a4
    309c:	01052823          	sw	a6,16(a0)
    30a0:	00e52a23          	sw	a4,20(a0)
	}

	curr_tick += announce_remaining;
    30a4:	00d786b3          	add	a3,a5,a3
    30a8:	011585b3          	add	a1,a1,a7
    30ac:	00f6b7b3          	sltu	a5,a3,a5
    30b0:	00b787b3          	add	a5,a5,a1
    30b4:	00d4a023          	sw	a3,0(s1)
    30b8:	00f4a223          	sw	a5,4(s1)
	announce_remaining = 0;
    30bc:	00092023          	sw	zero,0(s2)

	z_clock_set_timeout(next_timeout(), false);
    30c0:	bd9ff0ef          	jal	ra,2c98 <next_timeout>
    30c4:	00000593          	li	a1,0
    30c8:	935fe0ef          	jal	ra,19fc <z_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    30cc:	30042473          	csrrs	s0,mstatus,s0

	k_spin_unlock(&timeout_lock, key);
}
    30d0:	02c12083          	lw	ra,44(sp)
    30d4:	02812403          	lw	s0,40(sp)
    30d8:	02412483          	lw	s1,36(sp)
    30dc:	02012903          	lw	s2,32(sp)
    30e0:	01c12983          	lw	s3,28(sp)
    30e4:	01812a03          	lw	s4,24(sp)
    30e8:	03010113          	addi	sp,sp,48
    30ec:	00008067          	ret
		curr_tick += dt;
    30f0:	00d706b3          	add	a3,a4,a3
		announce_remaining -= dt;
    30f4:	40e787b3          	sub	a5,a5,a4
		curr_tick += dt;
    30f8:	41f75593          	srai	a1,a4,0x1f
    30fc:	00e6b633          	sltu	a2,a3,a4
    3100:	011585b3          	add	a1,a1,a7
		announce_remaining -= dt;
    3104:	00f92023          	sw	a5,0(s2)
		t->dticks = 0;
    3108:	00000813          	li	a6,0
    310c:	00000793          	li	a5,0
		curr_tick += dt;
    3110:	00b605b3          	add	a1,a2,a1
		t->dticks = 0;
    3114:	00f52823          	sw	a5,16(a0)
    3118:	01052a23          	sw	a6,20(a0)
		curr_tick += dt;
    311c:	00d4a023          	sw	a3,0(s1)
    3120:	00b4a223          	sw	a1,4(s1)
		remove_timeout(t);
    3124:	00a12623          	sw	a0,12(sp)
    3128:	bf9ff0ef          	jal	ra,2d20 <remove_timeout>
    312c:	30042473          	csrrs	s0,mstatus,s0
		t->fn(t);
    3130:	00c12503          	lw	a0,12(sp)
    3134:	00852783          	lw	a5,8(a0)
    3138:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    313c:	300a3473          	csrrc	s0,mstatus,s4
	key = (mstatus & MSTATUS_IEN);
    3140:	00847413          	andi	s0,s0,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3144:	f19ff06f          	j	305c <z_clock_announce+0x50>

00003148 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    3148:	ff010113          	addi	sp,sp,-16
    314c:	00812423          	sw	s0,8(sp)
    3150:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    3154:	00800413          	li	s0,8
    3158:	300437f3          	csrrc	a5,mstatus,s0
	int32_t ticks = z_get_next_timeout_expiry();
    315c:	e29ff0ef          	jal	ra,2f84 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3160:	00a04463          	bgtz	a0,3168 <idle+0x20>
    3164:	00100513          	li	a0,1
    3168:	00100593          	li	a1,1
    316c:	e49ff0ef          	jal	ra,2fb4 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3170:	899fe0ef          	jal	ra,1a08 <arch_cpu_idle>
    3174:	fe5ff06f          	j	3158 <idle+0x10>

00003178 <k_heap_init>:
    3178:	00c50713          	addi	a4,a0,12
	list->head = (sys_dnode_t *)list;
    317c:	00e52623          	sw	a4,12(a0)
	list->tail = (sys_dnode_t *)list;
    3180:	00e52823          	sw	a4,16(a0)
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    3184:	ab0fe06f          	j	1434 <sys_heap_init>

00003188 <statics_init>:
}

static int statics_init(const struct device *unused)
{
    3188:	ff010113          	addi	sp,sp,-16
    318c:	00812423          	sw	s0,8(sp)
    3190:	00912223          	sw	s1,4(sp)
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3194:	00003437          	lui	s0,0x3
    3198:	000034b7          	lui	s1,0x3
{
    319c:	00112623          	sw	ra,12(sp)
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    31a0:	71040413          	addi	s0,s0,1808 # 3710 <last_count>
    31a4:	71048493          	addi	s1,s1,1808 # 3710 <last_count>
    31a8:	00946e63          	bltu	s0,s1,31c4 <statics_init+0x3c>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    31ac:	00c12083          	lw	ra,12(sp)
    31b0:	00812403          	lw	s0,8(sp)
    31b4:	00412483          	lw	s1,4(sp)
    31b8:	00000513          	li	a0,0
    31bc:	01010113          	addi	sp,sp,16
    31c0:	00008067          	ret
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    31c4:	00842603          	lw	a2,8(s0)
    31c8:	00442583          	lw	a1,4(s0)
    31cc:	00040513          	mv	a0,s0
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    31d0:	01440413          	addi	s0,s0,20
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    31d4:	fa5ff0ef          	jal	ra,3178 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    31d8:	fd1ff06f          	j	31a8 <statics_init+0x20>
